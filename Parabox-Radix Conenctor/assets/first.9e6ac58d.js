import{g as l,_ as E,h as L,S as R,O as v,o as T,j as W,k,l as b,r as C,m as U,p as V,q as j,t as M,u as q,i as z}from"./Subject.c67f7ae3.js";function F(e){return l(e==null?void 0:e.lift)}function h(e){return function(t){if(F(t))return t.lift(function(n){try{return e(n,this)}catch(r){this.error(r)}});throw new TypeError("Unable to lift unknown Observable type")}}function d(e,t,n,r,i){return new G(e,t,n,r,i)}var G=function(e){E(t,e);function t(n,r,i,o,a,u){var f=e.call(this,n)||this;return f.onFinalize=a,f.shouldUnsubscribe=u,f._next=r?function(s){try{r(s)}catch(c){n.error(c)}}:e.prototype._next,f._error=o?function(s){try{o(s)}catch(c){n.error(c)}finally{this.unsubscribe()}}:e.prototype._error,f._complete=i?function(){try{i()}catch(s){n.error(s)}finally{this.unsubscribe()}}:e.prototype._complete,f}return t.prototype.unsubscribe=function(){var n;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var r=this.closed;e.prototype.unsubscribe.call(this),!r&&((n=this.onFinalize)===null||n===void 0||n.call(this))}},t}(L),O={now:function(){return(O.delegate||Date).now()},delegate:void 0},ye=function(e){E(t,e);function t(n,r,i){n===void 0&&(n=1/0),r===void 0&&(r=1/0),i===void 0&&(i=O);var o=e.call(this)||this;return o._bufferSize=n,o._windowTime=r,o._timestampProvider=i,o._buffer=[],o._infiniteTimeWindow=!0,o._infiniteTimeWindow=r===1/0,o._bufferSize=Math.max(1,n),o._windowTime=Math.max(1,r),o}return t.prototype.next=function(n){var r=this,i=r.isStopped,o=r._buffer,a=r._infiniteTimeWindow,u=r._timestampProvider,f=r._windowTime;i||(o.push(n),!a&&o.push(u.now()+f)),this._trimBuffer(),e.prototype.next.call(this,n)},t.prototype._subscribe=function(n){this._throwIfClosed(),this._trimBuffer();for(var r=this._innerSubscribe(n),i=this,o=i._infiniteTimeWindow,a=i._buffer,u=a.slice(),f=0;f<u.length&&!n.closed;f+=o?1:2)n.next(u[f]);return this._checkFinalizedStatuses(n),r},t.prototype._trimBuffer=function(){var n=this,r=n._bufferSize,i=n._timestampProvider,o=n._buffer,a=n._infiniteTimeWindow,u=(a?1:2)*r;if(r<1/0&&u<o.length&&o.splice(0,o.length-u),!a){for(var f=i.now(),s=0,c=1;c<o.length&&o[c]<=f;c+=2)s=c;s&&o.splice(0,s+1)}},t}(R),Y=new v(function(e){return e.complete()}),B=function(e){return e&&typeof e.length=="number"&&typeof e!="function"};function D(e){return l(e==null?void 0:e.then)}function H(e){return l(e[T])}function J(e){return Symbol.asyncIterator&&l(e==null?void 0:e[Symbol.asyncIterator])}function K(e){return new TypeError("You provided "+(e!==null&&typeof e=="object"?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}function Q(){return typeof Symbol!="function"||!Symbol.iterator?"@@iterator":Symbol.iterator}var X=Q();function Z(e){return l(e==null?void 0:e[X])}function $(e){return W(this,arguments,function(){var n,r,i,o;return k(this,function(a){switch(a.label){case 0:n=e.getReader(),a.label=1;case 1:a.trys.push([1,,9,10]),a.label=2;case 2:return[4,b(n.read())];case 3:return r=a.sent(),i=r.value,o=r.done,o?[4,b(void 0)]:[3,5];case 4:return[2,a.sent()];case 5:return[4,b(i)];case 6:return[4,a.sent()];case 7:return a.sent(),[3,2];case 8:return[3,10];case 9:return n.releaseLock(),[7];case 10:return[2]}})})}function N(e){return l(e==null?void 0:e.getReader)}function P(e){if(e instanceof v)return e;if(e!=null){if(H(e))return ee(e);if(B(e))return ne(e);if(D(e))return re(e);if(J(e))return A(e);if(Z(e))return te(e);if(N(e))return ie(e)}throw K(e)}function ee(e){return new v(function(t){var n=e[T]();if(l(n.subscribe))return n.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")})}function ne(e){return new v(function(t){for(var n=0;n<e.length&&!t.closed;n++)t.next(e[n]);t.complete()})}function re(e){return new v(function(t){e.then(function(n){t.closed||(t.next(n),t.complete())},function(n){return t.error(n)}).then(null,C)})}function te(e){return new v(function(t){var n,r;try{for(var i=U(e),o=i.next();!o.done;o=i.next()){var a=o.value;if(t.next(a),t.closed)return}}catch(u){n={error:u}}finally{try{o&&!o.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}t.complete()})}function A(e){return new v(function(t){oe(e,t).catch(function(n){return t.error(n)})})}function ie(e){return A($(e))}function oe(e,t){var n,r,i,o;return V(this,void 0,void 0,function(){var a,u;return k(this,function(f){switch(f.label){case 0:f.trys.push([0,5,6,11]),n=j(e),f.label=1;case 1:return[4,n.next()];case 2:if(r=f.sent(),!!r.done)return[3,4];if(a=r.value,t.next(a),t.closed)return[2];f.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return u=f.sent(),i={error:u},[3,11];case 6:return f.trys.push([6,,9,10]),r&&!r.done&&(o=n.return)?[4,o.call(n)]:[3,8];case 7:f.sent(),f.label=8;case 8:return[3,10];case 9:if(i)throw i.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}})})}function ae(e,t,n,r,i){r===void 0&&(r=0),i===void 0&&(i=!1);var o=t.schedule(function(){n(),i?e.add(this.schedule(null,r)):this.unsubscribe()},r);if(e.add(o),!i)return o}var _=M(function(e){return function(){e(this),this.name="EmptyError",this.message="no elements in sequence"}});function pe(e,t){var n=typeof t=="object";return new Promise(function(r,i){var o=new q({next:function(a){r(a),o.unsubscribe()},error:i,complete:function(){n?r(t.defaultValue):i(new _)}});e.subscribe(o)})}function fe(e,t){return h(function(n,r){var i=0;n.subscribe(d(r,function(o){r.next(e.call(t,o,i++))}))})}function ue(e,t,n,r,i,o,a,u){var f=[],s=0,c=0,x=!1,I=function(){x&&!f.length&&!s&&t.complete()},S=function(m){return s<r?w(m):f.push(m)},w=function(m){o&&t.next(m),s++;var g=!1;P(n(m,c++)).subscribe(d(t,function(y){i==null||i(y),o?S(y):t.next(y)},function(){g=!0},void 0,function(){if(g)try{s--;for(var y=function(){var p=f.shift();a?ae(t,a,function(){return w(p)}):w(p)};f.length&&s<r;)y();I()}catch(p){t.error(p)}}))};return e.subscribe(d(t,S,function(){x=!0,I()})),function(){u==null||u()}}function se(e,t,n){return n===void 0&&(n=1/0),l(t)?se(function(r,i){return fe(function(o,a){return t(r,o,i,a)})(P(e(r,i)))},n):(typeof t=="number"&&(n=t),h(function(r,i){return ue(r,i,e,n)}))}function ce(e,t){return h(function(n,r){var i=0;n.subscribe(d(r,function(o){return e.call(t,o,i++)&&r.next(o)}))})}function le(e){return h(function(t,n){var r=!1;t.subscribe(d(n,function(i){r=!0,n.next(i)},function(){r||n.next(e),n.complete()}))})}function de(e){return e<=0?function(){return Y}:h(function(t,n){var r=0;t.subscribe(d(n,function(i){++r<=e&&(n.next(i),e<=r&&n.complete())}))})}function ve(e){return e===void 0&&(e=he),h(function(t,n){var r=!1;t.subscribe(d(n,function(i){r=!0,n.next(i)},function(){return r?n.complete():n.error(e())}))})}function he(){return new _}function we(e,t){var n=arguments.length>=2;return function(r){return r.pipe(e?ce(function(i,o){return e(i,o,r)}):z,de(1),n?le(t):ve(function(){return new _}))}}export{Y as E,ye as R,se as a,we as b,d as c,pe as d,ae as e,ce as f,O as g,X as h,P as i,H as j,B as k,D as l,fe as m,J as n,h as o,Z as p,N as q,$ as r,K as s,de as t};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
