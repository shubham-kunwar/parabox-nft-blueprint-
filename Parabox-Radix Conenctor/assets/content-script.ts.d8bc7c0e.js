import{a as v,b as i,R as E,o as l}from"./index.es.095da3c8.js";import{w as r,c as a}from"./Subject.c67f7ae3.js";import{g}from"./get-connection-password.e42f6d71.js";import{M as w}from"./message-client.0e26c204.js";import{l as m}from"./logger.8aad6c34.js";import"./chrome-local-store.60de0fbe.js";import"./first.9e6ac58d.js";import"./send-message.6e0479e0.js";const u={receive:"radix#chromeExtension#receive",send:"radix#chromeExtension#send"},f=()=>{const e=n=>(window.dispatchEvent(new CustomEvent(u.receive,{detail:n})),v(!0));return{sendMessage:e,messageListener:n=>{window.addEventListener(u.send,s=>{const{detail:o}=s;n(o)})},sendMessageEvent:(n,s)=>e({interactionId:n,eventType:s})}},C=e=>({...e,metadata:{...e.metadata||{},origin:window.location.origin}}),h=({sendMessageEventToDapp:e,sendMessageToDapp:t,logger:p})=>(n,s)=>{switch(n.discriminator){case r.sendMessageEventToDapp:return e(n.interactionId,n.messageEvent).map(()=>({sendConfirmation:!0}));case r.walletResponse:return t(n.data).map(()=>({sendConfirmation:!0}));case r.incomingDappMessage:return n.data.discriminator===r.extensionStatus?g().andThen(o=>t(a.extensionStatus(!!o)).map(()=>({sendConfirmation:!1}))).mapErr(o=>({reason:"unableToGetConnectionPassword"})):e(n.data.interactionId,"receivedByExtension").andThen(()=>E.combine([s(a.dAppRequest("contentScript",C(n.data))),s(a.detectWalletLink("contentScript"))])).map(()=>({sendConfirmation:!1}));default:return i({reason:"unhandledMessageDiscriminator"})}},d=f(),c=e=>d.sendMessage(e).isErr()?i({reason:"unableToSendMessageToDapp"}):l(void 0),S=(e,t)=>d.sendMessageEvent(e,t).isErr()?i({reason:"unableToSendMessageEventToDapp"}):l(void 0),M=w(h({sendMessageToDapp:c,sendMessageEventToDapp:S,logger:m}),"contentScript",{logger:m});d.messageListener(e=>{M.onMessage(a.incomingDappMessage("dApp",e))});chrome.runtime.onMessage.addListener(e=>{M.onMessage(e)});chrome.storage.onChanged.addListener(e=>{var t;e.connectionPassword&&c(a.extensionStatus(!!((t=e.connectionPassword)!=null&&t.newValue)))});g().map(e=>{c(a.extensionStatus(!!e))});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC1zY3JpcHQudHMuZDhiYzdjMGUuanMiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jaHJvbWUvZGFwcC9fdHlwZXMudHMiLCIuLi8uLi9zcmMvY2hyb21lL2RhcHAvZGFwcC1jbGllbnQudHMiLCIuLi8uLi9zcmMvY2hyb21lL2hlbHBlcnMvYWRkLW1ldGFkYXRhLnRzIiwiLi4vLi4vc3JjL2Nocm9tZS9jb250ZW50LXNjcmlwdC9tZXNzYWdlLWhhbmRsZXIudHMiLCIuLi8uLi9zcmMvY2hyb21lL2NvbnRlbnQtc2NyaXB0L2NvbnRlbnQtc2NyaXB0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBkQXBwRXZlbnQgPSB7XG4gIHJlY2VpdmU6ICdyYWRpeCNjaHJvbWVFeHRlbnNpb24jcmVjZWl2ZScsXG4gIHNlbmQ6ICdyYWRpeCNjaHJvbWVFeHRlbnNpb24jc2VuZCcsXG59IGFzIGNvbnN0XG5cbmV4cG9ydCB0eXBlIERhcHBFdmVudFR5cGUgPSBrZXlvZiB0eXBlb2YgZEFwcEV2ZW50XG5cbmV4cG9ydCBjb25zdCBtZXNzYWdlTGlmZUN5Y2xlRXZlbnQgPSB7XG4gIHJlY2VpdmVkQnlFeHRlbnNpb246ICdyZWNlaXZlZEJ5RXh0ZW5zaW9uJyxcbiAgcmVjZWl2ZWRCeVdhbGxldDogJ3JlY2VpdmVkQnlXYWxsZXQnLFxuICByZXF1ZXN0Q2FuY2VsU3VjY2VzczogJ3JlcXVlc3RDYW5jZWxTdWNjZXNzJyxcbiAgcmVxdWVzdENhbmNlbEZhaWw6ICdyZXF1ZXN0Q2FuY2VsRmFpbCcsXG4gIGV4dGVuc2lvblN0YXR1czogJ2V4dGVuc2lvblN0YXR1cycsXG59IGFzIGNvbnN0XG5cbmV4cG9ydCB0eXBlIE1lc3NhZ2VMaWZlQ3ljbGVFdmVudCA9IGtleW9mIHR5cGVvZiBtZXNzYWdlTGlmZUN5Y2xlRXZlbnRcbiIsImltcG9ydCB7IE1lc3NhZ2VMaWZlQ3ljbGVFdmVudCwgZEFwcEV2ZW50IH0gZnJvbSAnY2hyb21lL2RhcHAvX3R5cGVzJ1xuaW1wb3J0IHsgb2sgfSBmcm9tICduZXZlcnRocm93J1xuXG5leHBvcnQgdHlwZSBDaHJvbWVEQXBwQ2xpZW50ID0gUmV0dXJuVHlwZTx0eXBlb2YgQ2hyb21lREFwcENsaWVudD5cbmV4cG9ydCBjb25zdCBDaHJvbWVEQXBwQ2xpZW50ID0gKCkgPT4ge1xuICBjb25zdCBzZW5kTWVzc2FnZSA9IChtZXNzYWdlOiBSZWNvcmQ8c3RyaW5nLCBhbnk+KSA9PiB7XG4gICAgd2luZG93LmRpc3BhdGNoRXZlbnQoXG4gICAgICBuZXcgQ3VzdG9tRXZlbnQoZEFwcEV2ZW50LnJlY2VpdmUsIHtcbiAgICAgICAgZGV0YWlsOiBtZXNzYWdlLFxuICAgICAgfSksXG4gICAgKVxuICAgIHJldHVybiBvayh0cnVlKVxuICB9XG5cbiAgY29uc3Qgc2VuZE1lc3NhZ2VFdmVudCA9IChcbiAgICBpbnRlcmFjdGlvbklkOiBzdHJpbmcsXG4gICAgZXZlbnRUeXBlOiBNZXNzYWdlTGlmZUN5Y2xlRXZlbnQsXG4gICkgPT5cbiAgICBzZW5kTWVzc2FnZSh7XG4gICAgICBpbnRlcmFjdGlvbklkLFxuICAgICAgZXZlbnRUeXBlLFxuICAgIH0pXG5cbiAgY29uc3QgbWVzc2FnZUxpc3RlbmVyID0gKFxuICAgIGNhbGxiYWNrRm46IChtZXNzYWdlOiBSZWNvcmQ8c3RyaW5nLCBhbnk+KSA9PiB2b2lkLFxuICApID0+IHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihkQXBwRXZlbnQuc2VuZCwgKGV2ZW50KSA9PiB7XG4gICAgICBjb25zdCB7IGRldGFpbDogbWVzc2FnZSB9ID0gZXZlbnQgYXMgQ3VzdG9tRXZlbnQ8YW55PlxuICAgICAgY2FsbGJhY2tGbihtZXNzYWdlKVxuICAgIH0pXG4gIH1cblxuICByZXR1cm4geyBzZW5kTWVzc2FnZSwgbWVzc2FnZUxpc3RlbmVyLCBzZW5kTWVzc2FnZUV2ZW50IH1cbn1cbiIsImV4cG9ydCBjb25zdCBhZGRNZXRhZGF0YSA9IChcbiAgbWVzc2FnZTogUmVjb3JkPHN0cmluZywgYW55Pixcbik6IFJlY29yZDxzdHJpbmcsIGFueT4gPT4gKHtcbiAgLi4ubWVzc2FnZSxcbiAgbWV0YWRhdGE6IHtcbiAgICAuLi4obWVzc2FnZS5tZXRhZGF0YSB8fCB7fSksXG4gICAgb3JpZ2luOiB3aW5kb3cubG9jYXRpb24ub3JpZ2luLFxuICB9LFxufSlcbiIsImltcG9ydCB7IGFkZE1ldGFkYXRhIH0gZnJvbSAnY2hyb21lL2hlbHBlcnMvYWRkLW1ldGFkYXRhJ1xuaW1wb3J0IHsgZXJyQXN5bmMsIFJlc3VsdEFzeW5jIH0gZnJvbSAnbmV2ZXJ0aHJvdydcbmltcG9ydCB7IGNyZWF0ZU1lc3NhZ2UgfSBmcm9tICcuLi9tZXNzYWdlcy9jcmVhdGUtbWVzc2FnZSdcbmltcG9ydCB7XG4gIENvbmZpcm1hdGlvbk1lc3NhZ2VFcnJvcixcbiAgTWVzc2FnZSxcbiAgbWVzc2FnZURpc2NyaW1pbmF0b3IsXG4gIE1lc3NhZ2VIYW5kbGVyLFxuICBNZXNzYWdlSGFuZGxlck91dHB1dCxcbiAgU2VuZE1lc3NhZ2VXaXRoQ29uZmlybWF0aW9uLFxufSBmcm9tICcuLi9tZXNzYWdlcy9fdHlwZXMnXG5pbXBvcnQgeyBBcHBMb2dnZXIgfSBmcm9tICd1dGlscy9sb2dnZXInXG5pbXBvcnQgeyBNZXNzYWdlTGlmZUN5Y2xlRXZlbnQgfSBmcm9tICdjaHJvbWUvZGFwcC9fdHlwZXMnXG5pbXBvcnQgeyBnZXRDb25uZWN0aW9uUGFzc3dvcmQgfSBmcm9tICdjaHJvbWUvaGVscGVycy9nZXQtY29ubmVjdGlvbi1wYXNzd29yZCdcblxuZXhwb3J0IHR5cGUgQ29udGVudFNjcmlwdE1lc3NhZ2VIYW5kbGVyT3B0aW9ucyA9IHtcbiAgbG9nZ2VyPzogQXBwTG9nZ2VyXG4gIHNlbmRNZXNzYWdlVG9EYXBwOiAoXG4gICAgbWVzc2FnZTogYW55LFxuICApID0+IFJlc3VsdEFzeW5jPHVuZGVmaW5lZCwgQ29uZmlybWF0aW9uTWVzc2FnZUVycm9yWydlcnJvciddPlxuICBzZW5kTWVzc2FnZUV2ZW50VG9EYXBwOiAoXG4gICAgaW50ZXJhY3Rpb25JZDogc3RyaW5nLFxuICAgIGV2ZW50VHlwZTogTWVzc2FnZUxpZmVDeWNsZUV2ZW50LFxuICApID0+IFJlc3VsdEFzeW5jPHVuZGVmaW5lZCwgQ29uZmlybWF0aW9uTWVzc2FnZUVycm9yWydlcnJvciddPlxufVxuZXhwb3J0IHR5cGUgQ29udGVudFNjcmlwdE1lc3NhZ2VIYW5kbGVyID0gUmV0dXJuVHlwZTxcbiAgdHlwZW9mIENvbnRlbnRTY3JpcHRNZXNzYWdlSGFuZGxlclxuPlxuZXhwb3J0IGNvbnN0IENvbnRlbnRTY3JpcHRNZXNzYWdlSGFuZGxlciA9XG4gICh7XG4gICAgc2VuZE1lc3NhZ2VFdmVudFRvRGFwcCxcbiAgICBzZW5kTWVzc2FnZVRvRGFwcCxcbiAgICBsb2dnZXIsXG4gIH06IENvbnRlbnRTY3JpcHRNZXNzYWdlSGFuZGxlck9wdGlvbnMpOiBNZXNzYWdlSGFuZGxlciA9PlxuICAoXG4gICAgbWVzc2FnZTogTWVzc2FnZSxcbiAgICBzZW5kTWVzc2FnZVdpdGhDb25maXJtYXRpb246IFNlbmRNZXNzYWdlV2l0aENvbmZpcm1hdGlvbixcbiAgKTogTWVzc2FnZUhhbmRsZXJPdXRwdXQgPT4ge1xuICAgIHN3aXRjaCAobWVzc2FnZS5kaXNjcmltaW5hdG9yKSB7XG4gICAgICBjYXNlIG1lc3NhZ2VEaXNjcmltaW5hdG9yLnNlbmRNZXNzYWdlRXZlbnRUb0RhcHA6XG4gICAgICAgIHJldHVybiBzZW5kTWVzc2FnZUV2ZW50VG9EYXBwKFxuICAgICAgICAgIG1lc3NhZ2UuaW50ZXJhY3Rpb25JZCxcbiAgICAgICAgICBtZXNzYWdlLm1lc3NhZ2VFdmVudCxcbiAgICAgICAgKS5tYXAoKCkgPT4gKHtcbiAgICAgICAgICBzZW5kQ29uZmlybWF0aW9uOiB0cnVlLFxuICAgICAgICB9KSlcblxuICAgICAgY2FzZSBtZXNzYWdlRGlzY3JpbWluYXRvci53YWxsZXRSZXNwb25zZToge1xuICAgICAgICByZXR1cm4gc2VuZE1lc3NhZ2VUb0RhcHAobWVzc2FnZS5kYXRhKS5tYXAoKCkgPT4gKHtcbiAgICAgICAgICBzZW5kQ29uZmlybWF0aW9uOiB0cnVlLFxuICAgICAgICB9KSlcbiAgICAgIH1cblxuICAgICAgY2FzZSBtZXNzYWdlRGlzY3JpbWluYXRvci5pbmNvbWluZ0RhcHBNZXNzYWdlOiB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBtZXNzYWdlLmRhdGEuZGlzY3JpbWluYXRvciA9PT0gbWVzc2FnZURpc2NyaW1pbmF0b3IuZXh0ZW5zaW9uU3RhdHVzXG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybiBnZXRDb25uZWN0aW9uUGFzc3dvcmQoKVxuICAgICAgICAgICAgLmFuZFRoZW4oKGNvbm5lY3Rpb25QYXNzd29yZCkgPT5cbiAgICAgICAgICAgICAgc2VuZE1lc3NhZ2VUb0RhcHAoXG4gICAgICAgICAgICAgICAgY3JlYXRlTWVzc2FnZS5leHRlbnNpb25TdGF0dXMoISFjb25uZWN0aW9uUGFzc3dvcmQpLFxuICAgICAgICAgICAgICApLm1hcCgoKSA9PiAoeyBzZW5kQ29uZmlybWF0aW9uOiBmYWxzZSB9KSksXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAubWFwRXJyKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHJlYXNvbjogJ3VuYWJsZVRvR2V0Q29ubmVjdGlvblBhc3N3b3JkJyxcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzZW5kTWVzc2FnZUV2ZW50VG9EYXBwKFxuICAgICAgICAgIG1lc3NhZ2UuZGF0YS5pbnRlcmFjdGlvbklkLFxuICAgICAgICAgICdyZWNlaXZlZEJ5RXh0ZW5zaW9uJyxcbiAgICAgICAgKVxuICAgICAgICAgIC5hbmRUaGVuKCgpID0+XG4gICAgICAgICAgICBSZXN1bHRBc3luYy5jb21iaW5lKFtcbiAgICAgICAgICAgICAgc2VuZE1lc3NhZ2VXaXRoQ29uZmlybWF0aW9uKFxuICAgICAgICAgICAgICAgIGNyZWF0ZU1lc3NhZ2UuZEFwcFJlcXVlc3QoXG4gICAgICAgICAgICAgICAgICAnY29udGVudFNjcmlwdCcsXG4gICAgICAgICAgICAgICAgICBhZGRNZXRhZGF0YShtZXNzYWdlLmRhdGEpLFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIHNlbmRNZXNzYWdlV2l0aENvbmZpcm1hdGlvbihcbiAgICAgICAgICAgICAgICBjcmVhdGVNZXNzYWdlLmRldGVjdFdhbGxldExpbmsoJ2NvbnRlbnRTY3JpcHQnKSxcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgIClcbiAgICAgICAgICAubWFwKCgpID0+ICh7XG4gICAgICAgICAgICBzZW5kQ29uZmlybWF0aW9uOiBmYWxzZSxcbiAgICAgICAgICB9KSlcbiAgICAgIH1cblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGVyckFzeW5jKHtcbiAgICAgICAgICByZWFzb246ICd1bmhhbmRsZWRNZXNzYWdlRGlzY3JpbWluYXRvcicsXG4gICAgICAgIH0pXG4gICAgfVxuICB9XG4iLCJpbXBvcnQgeyBDaHJvbWVEQXBwQ2xpZW50IH0gZnJvbSAnLi4vZGFwcC9kYXBwLWNsaWVudCdcbmltcG9ydCB7IENvbnRlbnRTY3JpcHRNZXNzYWdlSGFuZGxlciB9IGZyb20gJy4vbWVzc2FnZS1oYW5kbGVyJ1xuaW1wb3J0IHsgY3JlYXRlTWVzc2FnZSB9IGZyb20gJy4uL21lc3NhZ2VzL2NyZWF0ZS1tZXNzYWdlJ1xuaW1wb3J0IHsgTWVzc2FnZUNsaWVudCB9IGZyb20gJy4uL21lc3NhZ2VzL21lc3NhZ2UtY2xpZW50J1xuaW1wb3J0IHsgQ29uZmlybWF0aW9uTWVzc2FnZUVycm9yLCBNZXNzYWdlIH0gZnJvbSAnLi4vbWVzc2FnZXMvX3R5cGVzJ1xuaW1wb3J0IHsgZXJyQXN5bmMsIG9rQXN5bmMsIFJlc3VsdEFzeW5jIH0gZnJvbSAnbmV2ZXJ0aHJvdydcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJ3V0aWxzL2xvZ2dlcidcbmltcG9ydCB7IE1lc3NhZ2VMaWZlQ3ljbGVFdmVudCB9IGZyb20gJ2Nocm9tZS9kYXBwL190eXBlcydcbmltcG9ydCB7IGdldENvbm5lY3Rpb25QYXNzd29yZCB9IGZyb20gJ2Nocm9tZS9oZWxwZXJzL2dldC1jb25uZWN0aW9uLXBhc3N3b3JkJ1xuXG5jb25zdCBjaHJvbWVEQXBwQ2xpZW50ID0gQ2hyb21lREFwcENsaWVudCgpXG5cbmNvbnN0IHNlbmRNZXNzYWdlVG9EYXBwID0gKFxuICBtZXNzYWdlOiBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuKTogUmVzdWx0QXN5bmM8dW5kZWZpbmVkLCBDb25maXJtYXRpb25NZXNzYWdlRXJyb3JbJ2Vycm9yJ10+ID0+IHtcbiAgY29uc3QgcmVzdWx0ID0gY2hyb21lREFwcENsaWVudC5zZW5kTWVzc2FnZShtZXNzYWdlKVxuXG4gIHJldHVybiByZXN1bHQuaXNFcnIoKVxuICAgID8gZXJyQXN5bmMoeyByZWFzb246ICd1bmFibGVUb1NlbmRNZXNzYWdlVG9EYXBwJyB9KVxuICAgIDogb2tBc3luYyh1bmRlZmluZWQpXG59XG5cbmNvbnN0IHNlbmRNZXNzYWdlRXZlbnRUb0RhcHAgPSAoXG4gIGludGVyYWN0aW9uSWQ6IHN0cmluZyxcbiAgZXZlbnRUeXBlOiBNZXNzYWdlTGlmZUN5Y2xlRXZlbnQsXG4pOiBSZXN1bHRBc3luYzx1bmRlZmluZWQsIENvbmZpcm1hdGlvbk1lc3NhZ2VFcnJvclsnZXJyb3InXT4gPT4ge1xuICBjb25zdCByZXN1bHQgPSBjaHJvbWVEQXBwQ2xpZW50LnNlbmRNZXNzYWdlRXZlbnQoaW50ZXJhY3Rpb25JZCwgZXZlbnRUeXBlKVxuICByZXR1cm4gcmVzdWx0LmlzRXJyKClcbiAgICA/IGVyckFzeW5jKHsgcmVhc29uOiAndW5hYmxlVG9TZW5kTWVzc2FnZUV2ZW50VG9EYXBwJyB9KVxuICAgIDogb2tBc3luYyh1bmRlZmluZWQpXG59XG5cbmNvbnN0IG1lc3NhZ2VIYW5kbGVyID0gTWVzc2FnZUNsaWVudChcbiAgQ29udGVudFNjcmlwdE1lc3NhZ2VIYW5kbGVyKHtcbiAgICBzZW5kTWVzc2FnZVRvRGFwcCxcbiAgICBzZW5kTWVzc2FnZUV2ZW50VG9EYXBwLFxuICAgIGxvZ2dlcjogbG9nZ2VyLFxuICB9KSxcbiAgJ2NvbnRlbnRTY3JpcHQnLFxuICB7IGxvZ2dlciB9LFxuKVxuXG5jaHJvbWVEQXBwQ2xpZW50Lm1lc3NhZ2VMaXN0ZW5lcigobWVzc2FnZSkgPT4ge1xuICBtZXNzYWdlSGFuZGxlci5vbk1lc3NhZ2UoY3JlYXRlTWVzc2FnZS5pbmNvbWluZ0RhcHBNZXNzYWdlKCdkQXBwJywgbWVzc2FnZSkpXG59KVxuXG5jaHJvbWUucnVudGltZS5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIoKG1lc3NhZ2U6IE1lc3NhZ2UpID0+IHtcbiAgbWVzc2FnZUhhbmRsZXIub25NZXNzYWdlKG1lc3NhZ2UpXG59KVxuXG5jaHJvbWUuc3RvcmFnZS5vbkNoYW5nZWQuYWRkTGlzdGVuZXIoXG4gIChjaGFuZ2VzOiB7IFtrZXk6IHN0cmluZ106IGNocm9tZS5zdG9yYWdlLlN0b3JhZ2VDaGFuZ2UgfSkgPT4ge1xuICAgIGlmIChjaGFuZ2VzWydjb25uZWN0aW9uUGFzc3dvcmQnXSlcbiAgICAgIHNlbmRNZXNzYWdlVG9EYXBwKFxuICAgICAgICBjcmVhdGVNZXNzYWdlLmV4dGVuc2lvblN0YXR1cyhcbiAgICAgICAgICAhIWNoYW5nZXNbJ2Nvbm5lY3Rpb25QYXNzd29yZCddPy5uZXdWYWx1ZSxcbiAgICAgICAgKSxcbiAgICAgIClcbiAgfSxcbilcblxuZ2V0Q29ubmVjdGlvblBhc3N3b3JkKCkubWFwKChjb25uZWN0aW9uUGFzc3dvcmQpID0+IHtcbiAgc2VuZE1lc3NhZ2VUb0RhcHAoY3JlYXRlTWVzc2FnZS5leHRlbnNpb25TdGF0dXMoISFjb25uZWN0aW9uUGFzc3dvcmQpKVxufSlcbiJdLCJuYW1lcyI6WyJkQXBwRXZlbnQiLCJDaHJvbWVEQXBwQ2xpZW50Iiwic2VuZE1lc3NhZ2UiLCJtZXNzYWdlIiwib2siLCJjYWxsYmFja0ZuIiwiZXZlbnQiLCJpbnRlcmFjdGlvbklkIiwiZXZlbnRUeXBlIiwiYWRkTWV0YWRhdGEiLCJDb250ZW50U2NyaXB0TWVzc2FnZUhhbmRsZXIiLCJzZW5kTWVzc2FnZUV2ZW50VG9EYXBwIiwic2VuZE1lc3NhZ2VUb0RhcHAiLCJsb2dnZXIiLCJzZW5kTWVzc2FnZVdpdGhDb25maXJtYXRpb24iLCJtZXNzYWdlRGlzY3JpbWluYXRvciIsImdldENvbm5lY3Rpb25QYXNzd29yZCIsImNvbm5lY3Rpb25QYXNzd29yZCIsImNyZWF0ZU1lc3NhZ2UiLCJlcnJvciIsIlJlc3VsdEFzeW5jIiwiZXJyQXN5bmMiLCJjaHJvbWVEQXBwQ2xpZW50Iiwib2tBc3luYyIsIm1lc3NhZ2VIYW5kbGVyIiwiTWVzc2FnZUNsaWVudCIsImNoYW5nZXMiLCJfYSJdLCJtYXBwaW5ncyI6IndXQUFPLE1BQU1BLEVBQVksQ0FDdkIsUUFBUyxnQ0FDVCxLQUFNLDRCQUNSLEVDQ2FDLEVBQW1CLElBQU0sQ0FDOUIsTUFBQUMsRUFBZUMsSUFDWixPQUFBLGNBQ0wsSUFBSSxZQUFZSCxFQUFVLFFBQVMsQ0FDakMsT0FBUUcsQ0FBQSxDQUNULENBQUEsRUFFSUMsRUFBRyxFQUFJLEdBcUJULE1BQUEsQ0FBRSxZQUFBRixFQUFhLGdCQVJwQkcsR0FDRyxDQUNILE9BQU8saUJBQWlCTCxFQUFVLEtBQU9NLEdBQVUsQ0FDM0MsS0FBQSxDQUFFLE9BQVFILENBQVksRUFBQUcsRUFDNUJELEVBQVdGLENBQU8sQ0FBQSxDQUNuQixDQUFBLEVBR29DLGlCQWxCZCxDQUN2QkksRUFDQUMsSUFFQU4sRUFBWSxDQUNWLGNBQUFLLEVBQ0EsVUFBQUMsQ0FBQSxDQUNELEVBWUwsRUNqQ2FDLEVBQ1hOLElBQ3lCLENBQ3pCLEdBQUdBLEVBQ0gsU0FBVSxDQUNSLEdBQUlBLEVBQVEsVUFBWSxDQUFDLEVBQ3pCLE9BQVEsT0FBTyxTQUFTLE1BQzFCLENBQ0YsR0NvQmFPLEVBQ1gsQ0FBQyxDQUNDLHVCQUFBQyxFQUNBLGtCQUFBQyxFQUNBLE9BQUFDLENBQ0YsSUFDQSxDQUNFVixFQUNBVyxJQUN5QixDQUN6QixPQUFRWCxFQUFRLGNBQWUsQ0FDN0IsS0FBS1ksRUFBcUIsdUJBQ2pCLE9BQUFKLEVBQ0xSLEVBQVEsY0FDUkEsRUFBUSxZQUNWLEVBQUUsSUFBSSxLQUFPLENBQ1gsaUJBQWtCLEVBQ2xCLEVBQUEsRUFFSixLQUFLWSxFQUFxQixlQUN4QixPQUFPSCxFQUFrQlQsRUFBUSxJQUFJLEVBQUUsSUFBSSxLQUFPLENBQ2hELGlCQUFrQixFQUNsQixFQUFBLEVBR0osS0FBS1ksRUFBcUIsb0JBQ3hCLE9BQ0VaLEVBQVEsS0FBSyxnQkFBa0JZLEVBQXFCLGdCQUU3Q0MsRUFDSixFQUFBLFFBQVNDLEdBQ1JMLEVBQ0VNLEVBQWMsZ0JBQWdCLENBQUMsQ0FBQ0QsQ0FBa0IsR0FDbEQsSUFBSSxLQUFPLENBQUUsaUJBQWtCLEVBQVEsRUFBQSxDQUFBLEVBRTFDLE9BQVFFLElBQ0EsQ0FDTCxPQUFRLCtCQUFBLEVBRVgsRUFHRVIsRUFDTFIsRUFBUSxLQUFLLGNBQ2IscUJBQUEsRUFFQyxRQUFRLElBQ1BpQixFQUFZLFFBQVEsQ0FDbEJOLEVBQ0VJLEVBQWMsWUFDWixnQkFDQVQsRUFBWU4sRUFBUSxJQUFJLENBQzFCLENBQ0YsRUFDQVcsRUFDRUksRUFBYyxpQkFBaUIsZUFBZSxDQUNoRCxDQUFBLENBQ0QsQ0FDSCxFQUNDLElBQUksS0FBTyxDQUNWLGlCQUFrQixFQUNsQixFQUFBLEVBR04sUUFDRSxPQUFPRyxFQUFTLENBQ2QsT0FBUSwrQkFBQSxDQUNULENBQ0wsQ0FDRixFQ3ZGSUMsRUFBbUJyQixFQUFpQixFQUVwQ1csRUFDSlQsR0FFZW1CLEVBQWlCLFlBQVluQixDQUFPLEVBRXJDLFFBQ1ZrQixFQUFTLENBQUUsT0FBUSwyQkFBNEIsQ0FBQyxFQUNoREUsRUFBUSxNQUFTLEVBR2pCWixFQUF5QixDQUM3QkosRUFDQUMsSUFFZWMsRUFBaUIsaUJBQWlCZixFQUFlQyxDQUFTLEVBQzNELFFBQ1ZhLEVBQVMsQ0FBRSxPQUFRLGdDQUFpQyxDQUFDLEVBQ3JERSxFQUFRLE1BQVMsRUFHakJDLEVBQWlCQyxFQUNyQmYsRUFBNEIsQ0FDMUIsa0JBQUFFLEVBQ0EsdUJBQUFELEVBQ0EsT0FBQUUsQ0FBQSxDQUNELEVBQ0QsZ0JBQ0EsQ0FBRSxPQUFBQSxDQUFPLENBQ1gsRUFFQVMsRUFBaUIsZ0JBQWlCbkIsR0FBWSxDQUM1Q3FCLEVBQWUsVUFBVU4sRUFBYyxvQkFBb0IsT0FBUWYsQ0FBTyxDQUFDLENBQzdFLENBQUMsRUFFRCxPQUFPLFFBQVEsVUFBVSxZQUFhQSxHQUFxQixDQUN6RHFCLEVBQWUsVUFBVXJCLENBQU8sQ0FDbEMsQ0FBQyxFQUVELE9BQU8sUUFBUSxVQUFVLFlBQ3RCdUIsR0FBNkQsT0FDeERBLEVBQVEsb0JBQ1ZkLEVBQ0VNLEVBQWMsZ0JBQ1osQ0FBQyxHQUFDUyxFQUFBRCxFQUFRLHFCQUFSLE1BQUFDLEVBQStCLFNBQ25DLENBQUEsQ0FFTixDQUNGLEVBRUFYLElBQXdCLElBQUtDLEdBQXVCLENBQ2xETCxFQUFrQk0sRUFBYyxnQkFBZ0IsQ0FBQyxDQUFDRCxDQUFrQixDQUFDLENBQ3ZFLENBQUMifQ==
