import{_ as Me,S as w,e as H,f as Q,O as ce,i as N,g as ie,n as ue,b as j,d as X,a as K}from"./Subject.c67f7ae3.js";import{e as I,c as Y,b as Ee}from"./blake2b.e5109153.js";import{a as v,e as F,R as E,c as de,o as fe,b as le}from"./index.es.095da3c8.js";import{m as A,e as Ae,c as O,i as V,a as x,o as D,t as ee,f as m,b as T,R as ne,d as be}from"./first.9e6ac58d.js";import{p as ge,a as pe,f as W,m as Ie,t as me,b as $e,s as $,o as te,c as L}from"./switchMap.deec5196.js";const q=e=>{try{return v(JSON.parse(e))}catch(n){return F(I(n))}};var B=function(e){Me(n,e);function n(t){var r=e.call(this)||this;return r._value=t,r}return Object.defineProperty(n.prototype,"value",{get:function(){return this.getValue()},enumerable:!1,configurable:!0}),n.prototype._subscribe=function(t){var r=e.prototype._subscribe.call(this,t);return!r.closed&&t.next(this._value),r},n.prototype.getValue=function(){var t=this,r=t.hasError,o=t.thrownError,a=t._value;if(r)throw o;return this._throwIfClosed(),a},n.prototype.next=function(t){e.prototype.next.call(this,this._value=t)},n}(w),Oe=Array.isArray;function xe(e,n){return Oe(n)?e.apply(void 0,H([],Q(n))):e(n)}function Re(e){return A(function(n){return xe(e,n)})}var Te=Array.isArray,Be=Object.getPrototypeOf,De=Object.prototype,ke=Object.keys;function Pe(e){if(e.length===1){var n=e[0];if(Te(n))return{args:n,keys:null};if(Le(n)){var t=ke(n);return{args:t.map(function(r){return n[r]}),keys:t}}}return{args:e,keys:null}}function Le(e){return e&&typeof e=="object"&&Be(e)===De}function Ke(e,n){return e.reduce(function(t,r,o){return t[r]=n[o],t},{})}function re(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];var t=ge(e),r=pe(e),o=Pe(e),a=o.args,s=o.keys;if(a.length===0)return W([],t);var i=new ce(_e(a,t,s?function(u){return Ke(s,u)}:N));return r?i.pipe(Re(r)):i}function _e(e,n,t){return t===void 0&&(t=N),function(r){oe(n,function(){for(var o=e.length,a=new Array(o),s=o,i=o,u=function(C){oe(n,function(){var b=W(e[C],n),g=!1;b.subscribe(O(r,function(d){a[C]=d,g||(g=!0,i--),i||r.next(t(a.slice()))},function(){--s||r.complete()}))},r)},f=0;f<o;f++)u(f)},r)}}function oe(e,n,t){e?Ae(t,e,n):n()}function Ue(){return Ie(1)}function Ve(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return Ue()(W(e,ge(e)))}function Ne(e){return new ce(function(n){V(e()).subscribe(n)})}function Je(e,n,t){return Ne(function(){return e()?n:t})}function We(e,n,t,r,o){return function(a,s){var i=t,u=n,f=0;a.subscribe(O(s,function(C){var b=f++;u=i?e(u,C,b):(i=!0,C),r&&s.next(u)},o&&function(){i&&s.next(u),s.complete()}))}}function Z(e,n){return ie(n)?x(e,n,1):x(e,1)}function qe(){return D(function(e,n){e.subscribe(O(n,ue))})}function ze(e){return A(function(){return e})}function Ce(e,n){return n?function(t){return Ve(n.pipe(ee(1),qe()),t.pipe(Ce(e)))}:x(function(t,r){return V(e(t,r)).pipe(ee(1),ze(t))})}function Ge(e,n){n===void 0&&(n=$e);var t=me(e,n);return Ce(function(){return t})}function He(e,n){return n===void 0&&(n=N),e=e!=null?e:Qe,D(function(t,r){var o,a=!0;t.subscribe(O(r,function(s){var i=n(s);(a||!e(o,i))&&(a=!1,o=i,r.next(s))}))})}function Qe(e,n){return e===n}function he(e,n){return n?function(t){return t.pipe(he(function(r,o){return V(e(r,o)).pipe(A(function(a,s){return n(r,a,o,s)}))}))}:D(function(t,r){var o=0,a=null,s=!1;t.subscribe(O(r,function(i){a||(a=O(r,void 0,function(){a=null,s&&r.complete()}),V(e(i,o++)).subscribe(a))},function(){s=!0,!a&&r.complete()}))})}function Xe(e){return D(function(n,t){try{n.subscribe(t)}finally{t.add(e)}})}function Ye(e,n){return D(We(e,n,arguments.length>=2,!0))}function y(e,n,t){var r=ie(e)||n||t?{next:e,error:n,complete:t}:e;return r?D(function(o,a){var s;(s=r.subscribe)===null||s===void 0||s.call(r);var i=!0;o.subscribe(O(a,function(u){var f;(f=r.next)===null||f===void 0||f.call(r,u),a.next(u)},function(){var u;i=!1,(u=r.complete)===null||u===void 0||u.call(r),a.complete()},function(u){var f;i=!1,(f=r.error)===null||f===void 0||f.call(r,u),a.error(u)},function(){var u,f;i&&((u=r.unsubscribe)===null||u===void 0||u.call(r)),(f=r.finalize)===null||f===void 0||f.call(r)}))}):N}function Ze(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];var t=pe(e);return D(function(r,o){for(var a=e.length,s=new Array(a),i=e.map(function(){return!1}),u=!1,f=function(b){V(e[b]).subscribe(O(o,function(g){s[b]=g,!u&&!i[b]&&(i[b]=!0,(u=i.every(N))&&(i=null))},ue))},C=0;C<a;C++)f(C);r.subscribe(O(o,function(b){if(u){var g=H([b],Q(s));o.next(t?t.apply(void 0,H([],Q(g))):g)}}))})}const ae=e=>Y(e).map(n=>({connectionId:n,encryptionKey:e})),Se=e=>{if(e<=0)return F(new Error("byteCount out of boundaries"));const n=crypto.getRandomValues(new Uint8Array(e));return v(j.Buffer.from(n))},en=(e=X.secrets.connectionPasswordByteLength)=>Se(e),nn=e=>{const n=e.logger,t=new B(void 0);return{generateConnectionSecrets:()=>en().asyncAndThen(a=>ae(a).map(s=>(n==null||n.debug("\u{1F510}\u{1F504} connection password generated"),t.next(s),a))),deriveSecretsFromPassword:a=>ae(a).map(s=>{var i;(i=t.value)!=null&&i.encryptionKey.equals(s.encryptionKey)||t.next(s)}),secrets$:t}},tn=e=>q(e),J={remoteClientIsAlreadyConnected:"remoteClientIsAlreadyConnected",remoteClientDisconnected:"remoteClientDisconnected",remoteClientJustConnected:"remoteClientJustConnected"},ve=new Set([J.remoteClientIsAlreadyConnected,J.remoteClientJustConnected]),ye=new Set([J.remoteClientDisconnected]),rn=e=>ve.has(e.info)||ye.has(e.info),se={notConnected:"notConnected",failedToSendMessage:"failedToSendMessage",failedToPrepareMessage:"failedToPrepareMessage",timeout:"timeout"},on=(e,n=X.webRTC.chunkSize)=>{const t=crypto.randomUUID();return Ee(e,n).map(r=>r.map((o,a)=>({packageType:"chunk",chunkIndex:a,chunkData:o.toString("base64"),messageId:t}))).asyncAndThen(r=>Y(e).map(o=>({packageType:"metaData",chunkCount:r.length,messageByteCount:e.byteLength,hashOfMessage:o.toString("hex"),messageId:t})).map(o=>({metaData:o,chunks:r})))},an=e=>{const n=[],t=i=>i.messageId!==e.messageId?F(Error("messageId mismatch")):n.length===e.chunkCount?F(Error("expected chunks received")):(n.push(i),v(void 0)),r=()=>{try{return v(n.map(({chunkData:i})=>j.Buffer.from(i,"base64").toString("utf-8")).join(""))}catch{return F(Error("failed to decode chunked messages"))}},o=()=>e?v(e.chunkCount===n.length):v(!1),a=()=>r().asyncAndThen(i=>Y(j.Buffer.from(i,"utf-8"))).andThen(i=>{const u=i.toString("hex");return u===e.hashOfMessage?v(void 0):F(Error(`message hash "${e.hashOfMessage}" does not match expected hash "${u}"`))});return{addChunk:t,allChunksReceived:o,validate:a,metaData:e,toString:()=>o().asyncAndThen(a).andThen(r)}},sn=()=>Se(12),je=e=>E.fromPromise(crypto.subtle.importKey("raw",e,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]),I),cn=(e,n,t)=>E.fromPromise(crypto.subtle.decrypt({name:"AES-GCM",iv:t},n,e),I).map(j.Buffer.from),un=(e,n,t)=>E.fromPromise(crypto.subtle.encrypt({name:"AES-GCM",iv:t},n,e),I).map(j.Buffer.from),dn=(e,n,t)=>je(n).andThen(r=>cn(e,r,t)),fn=(e,n)=>j.Buffer.concat([e,n]),ln=(e,n,t)=>je(n).andThen(r=>un(e,r,t)).map(r=>({combined:fn(t,r),iv:t,ciphertext:r})).mapErr(r=>r),bn=e=>{let n=0,t=e.length;const r=a=>{if(a<0)return F(Error("'byteCount' must not be negative"));if(a===0)return v(j.Buffer.alloc(0));if(n+a>e.length)return F(Error("Out of buffer's boundary"));const s=j.Buffer.alloc(a);return e.copy(s,0,n,n+a),s.length!==a?F(Error("Incorrect length of newly read buffer...")):(n+=a,t-=a,v(s))},o=()=>t<0?F(Error("Incorrect implementation, read too many bytes.")):v(t===0);return{readNextBuffer:r,finishedParsing:o,remainingBytes:()=>o().andThen(a=>{if(a)return v(j.Buffer.alloc(0));const s=j.Buffer.alloc(t);return e.copy(s,0,n),v(s)})}},gn=e=>bn(e).readNextBuffer,pn=({iv:e,ciphertext:n,authTag:t})=>j.Buffer.concat([e,n,t]),mn=({ciphertext:e,authTag:n})=>j.Buffer.concat([e,n]),Cn=e=>{const n=gn(e),t=12,r=16;return de.combine([n(t),n(e.length-t-r),n(r)]).map(([o,a,s])=>({iv:o,ciphertext:a,authTag:s,combined:pn({iv:o,ciphertext:a,authTag:s}),ciphertextAndAuthTag:mn({ciphertext:a,authTag:s})}))},G=(e,n)=>Cn(Buffer.from(e.encryptedPayload,"hex")).asyncAndThen(({ciphertextAndAuthTag:t,iv:r})=>dn(t,n,r)).andThen(t=>q(t.toString("utf8"))),P=e=>{try{return v(JSON.stringify(e))}catch(n){return F(n)}},hn=e=>{const n=e.logger,t=e.subjects,r=new K,o=Buffer.from(e.secrets.connectionId).toString("hex"),a=`${e.baseUrl}/${o}?target=${e.target}&source=${e.source}`;t.statusSubject.next("connecting"),n==null||n.debug("\u{1F6F0}\u26AA\uFE0F signaling server: connecting",{url:a});const s=new WebSocket(a),i=e.subjects.onMessageSubject.pipe(m(c=>c.info==="confirmation")),u=c=>i.pipe(m(h=>h.requestId===c)),f=c=>{tn(c.data).map(h=>{h.info==="remoteData"?n==null||n.trace(`\u{1F6F0}\u{1F4AC}\u2B07\uFE0F received: ${h.data.method} (${h.requestId})`):h.info!=="confirmation"&&(n==null||n.trace("\u{1F6F0}\u{1F4AC}\u2B07\uFE0F received:",h)),t.onMessageSubject.next(h)})},C=()=>{n==null||n.debug("\u{1F6F0}\u{1F7E2} signaling server: connected"),t.statusSubject.next("connected")},b=c=>{n==null||n.debug("\u{1F6F0}\u{1F534} signaling server: disconnected"),t.statusSubject.next("disconnected")},g=c=>{n==null||n.debug("\u{1F6F0}\u274C signaling server error",c),t.onErrorSubject.next(c)},d=({payload:c,method:h,source:U,targetClientId:z})=>sn().asyncAndThen(R=>ln(Buffer.from(JSON.stringify(c)),e.secrets.encryptionKey,R)).map(R=>({requestId:crypto.randomUUID(),connectionId:o,targetClientId:z,encryptedPayload:R.combined.toString("hex"),method:h,source:U})).mapErr(R=>(n==null||n.error("prepareMessage",R),R)),p=c=>W(d(c)).pipe(x(h=>{if(h.isErr())return te(F(h.error));const U=h.value,z=te(P(U)).pipe(y(R=>R.map(Fe=>(n==null||n.trace(`\u{1F6F0}\u{1F4AC}\u2B06\uFE0F sending: ${c.method} (${U.requestId})`),s.send(Fe)))),m(()=>!1));return L(z,u(U.requestId)).pipe(A(()=>v(void 0)))}),T()),M=c=>t.onMessageSubject.pipe(m(h=>c.has(h.info)),T()),l=e.subjects.onMessageSubject.pipe(m(c=>c.info==="remoteData"&&c.data.method==="offer"),$(c=>G(c.data,e.secrets.encryptionKey)),m(c=>!c.isErr()),A(c=>({...c.value,type:"offer"}))),S=e.subjects.onMessageSubject.pipe(m(c=>c.info==="remoteData"&&c.data.method==="answer"),$(c=>G(c.data,e.secrets.encryptionKey)),m(c=>!c.isErr()),A(c=>({...c.value,type:"answer"}))),k=e.subjects.onMessageSubject.pipe(m(c=>c.info==="remoteData"&&c.data.method==="iceCandidate"),Z(c=>G(c.data,e.secrets.encryptionKey)),m(c=>!c.isErr()),A(c=>new RTCIceCandidate(c.value))),_=e.subjects.onMessageSubject.pipe(m(rn),y(c=>{t.targetClientIdSubject.next(c.info===J.remoteClientDisconnected?void 0:c.remoteClientId)}));return r.add(_.subscribe()),r.add(t.onErrorSubject.pipe(Ge(1e3),y(()=>{e.restart()})).subscribe()),s.onmessage=f,s.onopen=C,s.onclose=b,s.onerror=g,{remoteClientConnected$:M(ve),remoteClientDisconnected$:M(ye),sendMessage:c=>t.targetClientIdSubject.pipe(m(Boolean),T(),$(h=>p({...c,targetClientId:h}))),status$:t.statusSubject.asObservable(),onError$:t.onErrorSubject.asObservable(),onConnect$:t.statusSubject.pipe(m(c=>c==="connected")),onDisconnect$:t.statusSubject.pipe(m(c=>c==="disconnected")),onOffer$:l,onAnswer$:S,onIceCandidate$:k,subjects:t,disconnect:()=>{s.readyState===1&&s.close()},destroy:()=>{r.unsubscribe(),s.close(),s.removeEventListener("message",f),s.removeEventListener("close",b),s.removeEventListener("error",g),s.removeEventListener("open",C),n==null||n.debug("\u{1F6F0}\u{1F9F9} destroying signaling instance")}}},Sn=typeof ArrayBuffer=="function",{toString:vn}=Object.prototype;function yn(e){return Sn&&(e instanceof ArrayBuffer||vn.call(e)==="[object ArrayBuffer]")}const we=e=>typeof e=="string"?j.Buffer.from(e,"utf-8"):yn(e)?j.Buffer.from(e):e,jn=e=>e.pipe(m(n=>n.packageType==="metaData")),wn=(e,n)=>e.pipe(m(t=>t.packageType==="chunk"&&t.messageId===n)),Fn=e=>jn(e).pipe(he(n=>{const t=an(n);return wn(e,n.messageId).pipe(y(o=>t.addChunk(o)),m(()=>{const o=t.allChunksReceived();return o.isErr()?!0:o.value}),T(),x(()=>t.toString().andThen(q).map(o=>({messageId:n.messageId,message:o})).mapErr(()=>n.messageId)))})),Mn=e=>{const n=e.logger,t=e.dataChannel,r=e.subjects,o=()=>{n==null||n.debug("\u{1F578}\u{1F7E2} data channel open"),r.dataChannelStatusSubject.next("open")},a=()=>{n==null||n.debug("\u{1F578}\u{1F534} data channel closed"),r.dataChannelStatusSubject.next("closed")},s=g=>{q(we(g.data).toString("utf-8")).map(d=>(n==null||n.debug("\u{1F578}\u{1F4AC}\u2B07\uFE0F received data channel message",d),e.onDataChannelMessageSubject.next(d))).mapErr(d=>{n==null||n.debug("\u{1F578}\u{1F4AC}\u2B07\uFE0F received data channel message",d)})},i=()=>{n==null||n.debug("\u{1F578}\u274C data channel error")};t.onopen=o,t.onclose=a,t.onmessage=s,t.onerror=i;const u=g=>{n==null||n.debug("\u{1F578}\u{1F4AC}\u2B06\uFE0F sendMessageOverDataChannel",g),t.send(g)},f=g=>{P({packageType:"receiveMessageConfirmation",messageId:g}).map(u)},C=g=>{P({packageType:"receiveMessageError",messageId:g,error:"messageHashesMismatch"}).map(u)},b=new K;return b.add(e.sendMessageOverDataChannelSubject.pipe(y(u)).subscribe()),b.add(Fn(e.onDataChannelMessageSubject).pipe(y(g=>g.map(({messageId:d,message:p})=>{f(d),e.onMessage.next(p)}).mapErr(C))).subscribe()),{subjects:r,destroy:()=>{t.removeEventListener("message",s),t.removeEventListener("open",o),t.removeEventListener("close",a),b.unsubscribe()}}},En=e=>{const n=e.subjects,t=e.peerConnection,r=e.logger,o=d=>{d.candidate&&n.onIceCandidateSubject.next(d.candidate)},a=()=>{r==null||r.debug(`\u{1F578}\u{1F9CA} iceConnectionState: ${t.iceConnectionState}`),n.iceConnectionStateSubject.next(t.iceConnectionState)};t.onicecandidate=o,t.oniceconnectionstatechange=a;const s=d=>E.fromPromise(t.addIceCandidate(d),I),i=new K,u=n.onIceCandidateSubject.asObservable().pipe(A(({candidate:d,sdpMid:p,sdpMLineIndex:M})=>({candidate:d,sdpMid:p,sdpMLineIndex:M})),m(d=>!!d.candidate),A(d=>({method:"iceCandidate",payload:d,source:e.source}))),f=n.onSignalingStateChangeSubject.pipe(m(d=>d==="have-local-offer")),C=n.onSignalingStateChangeSubject.pipe(m(d=>d==="have-remote-offer")),b=L(f,C,n.onRemoteAnswerSubject),g=L(n.remoteIceCandidatesSubject.pipe(T(),x(d=>d)),n.onRemoteIceCandidateSubject);return i.add(n.onRemoteIceCandidateSubject.pipe(Ye((d,p)=>[...d,p],[]),y(d=>n.remoteIceCandidatesSubject.next(d))).subscribe()),i.add(b.pipe(x(()=>g),Z(s)).subscribe()),{iceCandidate$:u,destroy:()=>{t.removeEventListener("icecandidate",o),t.removeEventListener("iceconnectionstatechange",a),i.unsubscribe()}}},An=e=>{const n=e.peerConnection,t=e.subjects,r=e.logger,o=new K,a=e.signalingClient,s=a.onOffer$,i=a.onAnswer$,u=()=>{e.shouldCreateOffer&&o.add(a.remoteClientConnected$.pipe($(()=>d().andThen(C).map(()=>n.localDescription).map(({sdp:p})=>({method:"offer",payload:{sdp:p},source:e.source})).map(p=>t.offerSubject.next(p)))).subscribe())},f=()=>{r==null||r.debug(`\u{1F578}\u{1F3DB} signalingState: ${n.signalingState}`),t.onSignalingStateChangeSubject.next(n.signalingState)};n.onnegotiationneeded=u,n.onsignalingstatechange=f;const C=p=>E.fromPromise(n.setLocalDescription(p),I).map(()=>n.localDescription),b=p=>E.fromPromise(n.setRemoteDescription(p),I),g=()=>E.fromPromise(n.createAnswer(),I),d=()=>E.fromPromise(n.createOffer(),I);return o.add(s.pipe($(p=>b(p).andThen(g).andThen(C).map(({sdp:M})=>({method:"answer",payload:{sdp:M},source:e.source})).map(M=>t.answerSubject.next(M)))).subscribe()),o.add(i.pipe(x(b)).subscribe()),{destroy:()=>{n.removeEventListener("signalingstatechange",f),n.removeEventListener("onnegotiationneeded",u),n.close(),o.unsubscribe()}}},In=e=>{const n=e.logger,t=e.subjects,r=e.restart,o=e.signalingClient,a=new RTCPeerConnection(e.peerConnectionConfig),s=a.createDataChannel("data",e.dataChannelConfig),i=An({peerConnection:a,subjects:t,logger:n,shouldCreateOffer:e.shouldCreateOffer,source:e.source,signalingClient:e.signalingClient,restart:e.restart}),u=Mn({dataChannel:s,logger:n,subjects:t,onDataChannelMessageSubject:e.onDataChannelMessageSubject,onMessage:e.onMessage,sendMessageOverDataChannelSubject:e.sendMessageOverDataChannelSubject}),f=En({logger:n,subjects:t,peerConnection:a,source:e.source}),C=e.signalingClient.onIceCandidate$,b=f.iceCandidate$,g=t.offerSubject,d=t.answerSubject,p=new K;return p.add(o.remoteClientConnected$.pipe(T(),x(()=>L(o.remoteClientDisconnected$,me(100).pipe($(()=>o.remoteClientConnected$))).pipe(y(()=>r())))).subscribe()),p.add(L(g,d,b).pipe(Z(e.signalingClient.sendMessage)).subscribe()),p.add(C.pipe(y(l=>t.onRemoteIceCandidateSubject.next(l))).subscribe()),p.add(o.status$.pipe(m(l=>l==="connected"),T(),$(()=>re([o.status$,u.subjects.dataChannelStatusSubject]).pipe(m(([l,S])=>l==="disconnected"&&S==="closed"),T(),y(()=>r())))).subscribe()),p.add(re([u.subjects.dataChannelStatusSubject,o.status$]).pipe(y(([l,S])=>{l==="open"&&S==="connected"&&o.disconnect()})).subscribe()),p.add(t.iceConnectionStateSubject.pipe(m(l=>l==="disconnected"),y(()=>{r()})).subscribe()),{peerConnection:a,dataChannelClient:u,iceCandidateClient:f,subjects:t,destroy:()=>{var l;(l=e.logger)==null||l.debug("\u{1F578}\u{1F9F9} destroying webRTC instance"),f.destroy(),u.destroy(),i.destroy(),p.unsubscribe()}}},$n=()=>({onNegotiationNeededSubject:new w,onIceCandidateSubject:new w,iceCandidatesSubject:new B([]),onRemoteIceCandidateSubject:new w,remoteIceCandidatesSubject:new B([]),offerSubject:new ne,answerSubject:new ne,onRemoteAnswerSubject:new w,onSignalingStateChangeSubject:new w,dataChannelStatusSubject:new B("closed"),iceConnectionStateSubject:new w}),On=()=>({onMessageSubject:new w,onErrorSubject:new w,statusSubject:new B("disconnected"),targetClientIdSubject:new B(void 0)}),xn=e=>P(e).map(we).asyncAndThen(on).andThen(n=>de.combine([P(n.metaData),...n.chunks.map(P)]).map(t=>({chunks:t,messageId:n.metaData.messageId}))),Rn=(e,n)=>(e.forEach(t=>n.next(t)),fe(void 0)),Tn=(e,n)=>E.fromSafePromise(be(n.pipe(m(t=>["receiveMessageConfirmation","receiveMessageError"].includes(t.packageType)&&t.messageId===e)))).andThen(t=>t.packageType==="receiveMessageConfirmation"?fe(t):le({reason:t.error})),Bn=e=>xn(e.message).mapErr(()=>({reason:se.failedToPrepareMessage})).andThen(({chunks:n,messageId:t})=>E.combine([Rn(n,e.sendMessageOverDataChannelSubject).map(()=>{e.messageEventCallback("messageSent"),e.timeout&&setTimeout(()=>{e.onDataChannelMessageSubject.next({packageType:"receiveMessageError",messageId:t,error:se.timeout})},e.timeout)}),Tn(t,e.onDataChannelMessageSubject)])).map(()=>{}),Dn=()=>({shouldConnectSubject:new B(!1),connected:new B(!1),triggerRestartSubject:new w,onDataChannelMessageSubject:new w,onMessage:new w,sendMessageOverDataChannelSubject:new w}),Un=e=>{const n=e.logger;n==null||n.debug("\u{1F50C}\u2728 connector client initiated");const t=e.subjects||Dn(),r=t.shouldConnectSubject,o=t.connected,a=t.triggerRestartSubject,s=t.onDataChannelMessageSubject,i=t.onMessage,u=t.sendMessageOverDataChannelSubject,f=e.createWebRtcSubjects||(()=>$n()),C=e.createSignalingSubjects||(()=>On()),b=nn({logger:n}),g=a.pipe(Ze(r),A(([,l])=>l),y(()=>n==null?void 0:n.debug("\u{1F50C}\u{1F504} restarting connector client"))),d=L(r.pipe(He((l,S)=>l===S)),g),p=new K,M=b.secrets$.pipe(m(l=>!!l),$(l=>{const S=hn({baseUrl:e.signalingServerBaseUrl,target:e.target,source:e.source,logger:n,subjects:C(),secrets:l,restart:()=>a.next()}),k=In({...X.webRTC,logger:n,shouldCreateOffer:e.isInitiator,subjects:f(),onDataChannelMessageSubject:s,sendMessageOverDataChannelSubject:u,onMessage:i,signalingClient:S,source:e.source,restart:()=>a.next()}),_=()=>{S.destroy(),k.destroy()};return k.dataChannelClient.subjects.dataChannelStatusSubject.pipe(y(c=>o.next(c==="open")),Xe(()=>(o.next(!1),_())))}));return p.add(d.pipe($(l=>Je(()=>!!l,M,[]))).subscribe()),{connected$:o.asObservable(),connected:()=>E.fromPromise(be(o.pipe(m(l=>l))),I),setConnectionPassword:l=>b.deriveSecretsFromPassword(l),connectionPassword$:b.secrets$.pipe(A(l=>l==null?void 0:l.encryptionKey)),generateConnectionPassword:()=>b.generateConnectionSecrets(),connect:()=>r.next(!0),disconnect:()=>r.next(!1),shouldConnect$:r.asObservable(),sendMessage:(l,S)=>{if(!o.getValue())return le({reason:"notConnected"});const k=c=>{},_=(S==null?void 0:S.messageEventCallback)||k;return Bn({message:l,sendMessageOverDataChannelSubject:u,onDataChannelMessageSubject:s,messageEventCallback:_,timeout:S==null?void 0:S.timeout})},onMessage$:i.asObservable(),destroy:()=>{n==null||n.debug("\u{1F50C}\u{1F9F9} destroying connector client"),p.unsubscribe()}}};export{Un as C,Z as c,q as p,y as t,Ze as w};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
