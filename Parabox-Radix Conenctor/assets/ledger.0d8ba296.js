import"./modulepreload-polyfill.c7c6310f.js";import{S as ir,a as or,s as Ae,c as De}from"./Subject.c67f7ae3.js";import{j as L,B as he,T as ne,b as qt,r as pe,P as ar,F as cr,c as lr}from"./text.0bb5df42.js";import{L as P,c as ur,a as hr}from"./schemas.bc1c5361.js";import{e as dr,g as Ht,p as fr}from"./parse-sign-auth.f4c5a6b5.js";import{o as we,a as ae,e as ce,R as Se}from"./index.es.095da3c8.js";import{b as mr}from"./blake2b.e5109153.js";import{o as le}from"./logger.8aad6c34.js";import{M as pr}from"./mask.1d859e4c.js";/* empty css              */const Oe=t=>{class e extends Error{constructor(n,s,o){if(super(n||t,o),Object.setPrototypeOf(this,e.prototype),this.name=t,s)for(const i in s)this[i]=s[i];if(o&&gr(o)&&"cause"in o&&!("cause"in this)){const i=o.cause;this.cause=i,"stack"in i&&(this.stack=this.stack+`
CAUSE: `+i.stack)}}}return e};function gr(t){return typeof t=="object"}const vr=Oe("LockedDeviceError"),Er=Oe("DisconnectedDevice"),Nr=Oe("DisconnectedDeviceDuringOperation"),dt=Oe("TransportOpenUserCancelled"),Ir=Oe("TransportRaceCondition");var ft;(function(t){t.Unknown="Unknown",t.LocationServicesDisabled="LocationServicesDisabled",t.LocationServicesUnauthorized="LocationServicesUnauthorized",t.BluetoothScanStartFailed="BluetoothScanStartFailed"})(ft||(ft={}));class se extends Error{constructor(e,r){const n="TransportError";super(e||n),this.name=n,this.message=e,this.stack=new Error(e).stack,this.id=r}}const xe={ACCESS_CONDITION_NOT_FULFILLED:38916,ALGORITHM_NOT_SUPPORTED:38020,CLA_NOT_SUPPORTED:28160,CODE_BLOCKED:38976,CODE_NOT_INITIALIZED:38914,COMMAND_INCOMPATIBLE_FILE_STRUCTURE:27009,CONDITIONS_OF_USE_NOT_SATISFIED:27013,CONTRADICTION_INVALIDATION:38928,CONTRADICTION_SECRET_CODE_STATUS:38920,CUSTOM_IMAGE_BOOTLOADER:26159,CUSTOM_IMAGE_EMPTY:26158,FILE_ALREADY_EXISTS:27273,FILE_NOT_FOUND:37892,GP_AUTH_FAILED:25344,HALTED:28586,INCONSISTENT_FILE:37896,INCORRECT_DATA:27264,INCORRECT_LENGTH:26368,INCORRECT_P1_P2:27392,INS_NOT_SUPPORTED:27904,DEVICE_NOT_ONBOARDED:27911,DEVICE_NOT_ONBOARDED_2:26129,INVALID_KCV:38021,INVALID_OFFSET:37890,LICENSING:28482,LOCKED_DEVICE:21781,MAX_VALUE_REACHED:38992,MEMORY_PROBLEM:37440,MISSING_CRITICAL_PARAMETER:26624,NO_EF_SELECTED:37888,NOT_ENOUGH_MEMORY_SPACE:27268,OK:36864,PIN_REMAINING_ATTEMPTS:25536,REFERENCED_DATA_NOT_FOUND:27272,SECURITY_STATUS_NOT_SATISFIED:27010,TECHNICAL_PROBLEM:28416,UNKNOWN_APDU:27906,USER_REFUSED_ON_DEVICE:21761,NOT_ENOUGH_SPACE:20738};function $r(t){switch(t){case 26368:return"Incorrect length";case 26624:return"Missing critical parameter";case 27010:return"Security not satisfied (dongle locked or have invalid access rights)";case 27013:return"Condition of use not satisfied (denied by the user?)";case 27264:return"Invalid data received";case 27392:return"Invalid parameter received";case 21781:return"Locked device"}if(28416<=t&&t<=28671)return"Internal error, please report"}function et(t){const e=Object.keys(xe).find(o=>xe[o]===t)||"UNKNOWN_ERROR",r=$r(t)||e,n=t.toString(16),s=`Ledger device: ${r} (0x${n})`;if(t===xe.LOCKED_DEVICE)throw new vr(s);this.name="TransportStatusError",this.message=s,this.stack=new Error(s).stack,this.statusCode=t,this.statusText=e}et.prototype=new Error;var Ce=globalThis&&globalThis.__awaiter||function(t,e,r,n){function s(o){return o instanceof r?o:new r(function(i){i(o)})}return new(r||(r=Promise))(function(o,i){function a(c){try{u(n.next(c))}catch(l){i(l)}}function d(c){try{u(n.throw(c))}catch(l){i(l)}}function u(c){c.done?o(c.value):s(c.value).then(a,d)}u((n=n.apply(t,e||[])).next())})};class rt{constructor(){this.exchangeTimeout=3e4,this.unresponsiveTimeout=15e3,this.deviceModel=null,this._events=new dr.exports,this.send=(e,r,n,s,o=Buffer.alloc(0),i=[xe.OK])=>Ce(this,void 0,void 0,function*(){if(o.length>=256)throw new se("data.length exceed 256 bytes limit. Got: "+o.length,"DataLengthTooBig");const a=yield this.exchange(Buffer.concat([Buffer.from([e,r,n,s]),Buffer.from([o.length]),o])),d=a.readUInt16BE(a.length-2);if(!i.some(u=>u===d))throw new et(d);return a}),this.exchangeAtomicImpl=e=>Ce(this,void 0,void 0,function*(){if(this.exchangeBusyPromise)throw new Ir("An action was already pending on the Ledger device. Please deny or reconnect.");let r;const n=new Promise(i=>{r=i});this.exchangeBusyPromise=n;let s=!1;const o=setTimeout(()=>{s=!0,this.emit("unresponsive")},this.unresponsiveTimeout);try{const i=yield e();return s&&this.emit("responsive"),i}finally{clearTimeout(o),r&&r(),this.exchangeBusyPromise=null}}),this._appAPIlock=null}exchange(e){throw new Error("exchange not implemented")}exchangeBulk(e,r){let n=!1;const s=()=>{n=!0};return(()=>Ce(this,void 0,void 0,function*(){if(!n)for(const i of e){const a=yield this.exchange(i);if(n)return;const d=a.readUInt16BE(a.length-2);if(d!==xe.OK)throw new et(d);r.next(a)}}))().then(()=>!n&&r.complete(),i=>!n&&r.error(i)),{unsubscribe:s}}setScrambleKey(e){}close(){return Promise.resolve()}on(e,r){this._events.on(e,r)}off(e,r){this._events.removeListener(e,r)}emit(e,...r){this._events.emit(e,...r)}setDebugMode(){console.warn("setDebugMode is deprecated. use @ledgerhq/logs instead. No logs are emitted in this anymore.")}setExchangeTimeout(e){this.exchangeTimeout=e}setExchangeUnresponsiveTimeout(e){this.unresponsiveTimeout=e}static create(e=3e3,r){return new Promise((n,s)=>{let o=!1;const i=this.listen({next:d=>{o=!0,i&&i.unsubscribe(),a&&clearTimeout(a),this.open(d.descriptor,e).then(n,s)},error:d=>{a&&clearTimeout(a),s(d)},complete:()=>{a&&clearTimeout(a),o||s(new se(this.ErrorMessage_NoDeviceFound,"NoDeviceFound"))}}),a=r?setTimeout(()=>{i.unsubscribe(),s(new se(this.ErrorMessage_ListenTimeout,"ListenTimeout"))},r):null})}decorateAppAPIMethods(e,r,n){for(const s of r)e[s]=this.decorateAppAPIMethod(s,e[s],e,n)}decorateAppAPIMethod(e,r,n,s){return(...o)=>Ce(this,void 0,void 0,function*(){const{_appAPIlock:i}=this;if(i)return Promise.reject(new se("Ledger Device is busy (lock "+i+")","TransportLocked"));try{return this._appAPIlock=e,this.setScrambleKey(s),yield r.apply(n,o)}finally{this._appAPIlock=null}})}}rt.ErrorMessage_ListenTimeout="No Ledger device found (timeout)";rt.ErrorMessage_NoDeviceFound="No Ledger device found";const mt=5;function Tr(t){const e=Buffer.alloc(2);return e.writeUInt16BE(t,0),e}const Sr={data:Buffer.alloc(0),dataLength:0,sequence:0},Rr=(t,e)=>({makeBlocks(r){let n=Buffer.concat([Tr(r.length),r]);const s=e-5,o=Math.ceil(n.length/s);n=Buffer.concat([n,Buffer.alloc(o*s-n.length+1).fill(0)]);const i=[];for(let a=0;a<o;a++){const d=Buffer.alloc(5);d.writeUInt16BE(t,0),d.writeUInt8(mt,2),d.writeUInt16BE(a,3);const u=n.slice(a*s,(a+1)*s);i.push(Buffer.concat([d,u]))}return i},reduceResponse(r,n){let{data:s,dataLength:o,sequence:i}=r||Sr;if(n.readUInt16BE(0)!==t)throw new se("Invalid channel","InvalidChannel");if(n.readUInt8(2)!==mt)throw new se("Invalid tag","InvalidTag");if(n.readUInt16BE(3)!==i)throw new se("Invalid sequence","InvalidSequence");r||(o=n.readUInt16BE(5)),i++;const a=n.slice(r?5:7);return s=Buffer.concat([s,a]),s.length>o&&(s=s.slice(0,o)),{data:s,dataLength:o,sequence:i}},getReducedResult(r){if(r&&r.dataLength===r.data.length)return r.data}});var fe={exports:{}};const Lr="2.0.0",yr=256,xr=Number.MAX_SAFE_INTEGER||9007199254740991,br=16,Or=["major","premajor","minor","preminor","patch","prepatch","prerelease"];var je={MAX_LENGTH:yr,MAX_SAFE_COMPONENT_LENGTH:br,MAX_SAFE_INTEGER:xr,RELEASE_TYPES:Or,SEMVER_SPEC_VERSION:Lr,FLAG_INCLUDE_PRERELEASE:1,FLAG_LOOSE:2};const Ar=typeof process=="object"&&process.env&&{}.NODE_DEBUG&&/\bsemver\b/i.test({}.NODE_DEBUG)?(...t)=>console.error("SEMVER",...t):()=>{};var Xe=Ar;(function(t,e){const{MAX_SAFE_COMPONENT_LENGTH:r}=je,n=Xe;e=t.exports={};const s=e.re=[],o=e.safeRe=[],i=e.src=[],a=e.t={};let d=0;const u=(c,l,S)=>{const m=l.split("\\s*").join("\\s{0,1}").split("\\s+").join("\\s"),q=d++;n(c,q,l),a[c]=q,i[q]=l,s[q]=new RegExp(l,S?"g":void 0),o[q]=new RegExp(m,S?"g":void 0)};u("NUMERICIDENTIFIER","0|[1-9]\\d*"),u("NUMERICIDENTIFIERLOOSE","[0-9]+"),u("NONNUMERICIDENTIFIER","\\d*[a-zA-Z-][a-zA-Z0-9-]*"),u("MAINVERSION",`(${i[a.NUMERICIDENTIFIER]})\\.(${i[a.NUMERICIDENTIFIER]})\\.(${i[a.NUMERICIDENTIFIER]})`),u("MAINVERSIONLOOSE",`(${i[a.NUMERICIDENTIFIERLOOSE]})\\.(${i[a.NUMERICIDENTIFIERLOOSE]})\\.(${i[a.NUMERICIDENTIFIERLOOSE]})`),u("PRERELEASEIDENTIFIER",`(?:${i[a.NUMERICIDENTIFIER]}|${i[a.NONNUMERICIDENTIFIER]})`),u("PRERELEASEIDENTIFIERLOOSE",`(?:${i[a.NUMERICIDENTIFIERLOOSE]}|${i[a.NONNUMERICIDENTIFIER]})`),u("PRERELEASE",`(?:-(${i[a.PRERELEASEIDENTIFIER]}(?:\\.${i[a.PRERELEASEIDENTIFIER]})*))`),u("PRERELEASELOOSE",`(?:-?(${i[a.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${i[a.PRERELEASEIDENTIFIERLOOSE]})*))`),u("BUILDIDENTIFIER","[0-9A-Za-z-]+"),u("BUILD",`(?:\\+(${i[a.BUILDIDENTIFIER]}(?:\\.${i[a.BUILDIDENTIFIER]})*))`),u("FULLPLAIN",`v?${i[a.MAINVERSION]}${i[a.PRERELEASE]}?${i[a.BUILD]}?`),u("FULL",`^${i[a.FULLPLAIN]}$`),u("LOOSEPLAIN",`[v=\\s]*${i[a.MAINVERSIONLOOSE]}${i[a.PRERELEASELOOSE]}?${i[a.BUILD]}?`),u("LOOSE",`^${i[a.LOOSEPLAIN]}$`),u("GTLT","((?:<|>)?=?)"),u("XRANGEIDENTIFIERLOOSE",`${i[a.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`),u("XRANGEIDENTIFIER",`${i[a.NUMERICIDENTIFIER]}|x|X|\\*`),u("XRANGEPLAIN",`[v=\\s]*(${i[a.XRANGEIDENTIFIER]})(?:\\.(${i[a.XRANGEIDENTIFIER]})(?:\\.(${i[a.XRANGEIDENTIFIER]})(?:${i[a.PRERELEASE]})?${i[a.BUILD]}?)?)?`),u("XRANGEPLAINLOOSE",`[v=\\s]*(${i[a.XRANGEIDENTIFIERLOOSE]})(?:\\.(${i[a.XRANGEIDENTIFIERLOOSE]})(?:\\.(${i[a.XRANGEIDENTIFIERLOOSE]})(?:${i[a.PRERELEASELOOSE]})?${i[a.BUILD]}?)?)?`),u("XRANGE",`^${i[a.GTLT]}\\s*${i[a.XRANGEPLAIN]}$`),u("XRANGELOOSE",`^${i[a.GTLT]}\\s*${i[a.XRANGEPLAINLOOSE]}$`),u("COERCE",`(^|[^\\d])(\\d{1,${r}})(?:\\.(\\d{1,${r}}))?(?:\\.(\\d{1,${r}}))?(?:$|[^\\d])`),u("COERCERTL",i[a.COERCE],!0),u("LONETILDE","(?:~>?)"),u("TILDETRIM",`(\\s*)${i[a.LONETILDE]}\\s+`,!0),e.tildeTrimReplace="$1~",u("TILDE",`^${i[a.LONETILDE]}${i[a.XRANGEPLAIN]}$`),u("TILDELOOSE",`^${i[a.LONETILDE]}${i[a.XRANGEPLAINLOOSE]}$`),u("LONECARET","(?:\\^)"),u("CARETTRIM",`(\\s*)${i[a.LONECARET]}\\s+`,!0),e.caretTrimReplace="$1^",u("CARET",`^${i[a.LONECARET]}${i[a.XRANGEPLAIN]}$`),u("CARETLOOSE",`^${i[a.LONECARET]}${i[a.XRANGEPLAINLOOSE]}$`),u("COMPARATORLOOSE",`^${i[a.GTLT]}\\s*(${i[a.LOOSEPLAIN]})$|^$`),u("COMPARATOR",`^${i[a.GTLT]}\\s*(${i[a.FULLPLAIN]})$|^$`),u("COMPARATORTRIM",`(\\s*)${i[a.GTLT]}\\s*(${i[a.LOOSEPLAIN]}|${i[a.XRANGEPLAIN]})`,!0),e.comparatorTrimReplace="$1$2$3",u("HYPHENRANGE",`^\\s*(${i[a.XRANGEPLAIN]})\\s+-\\s+(${i[a.XRANGEPLAIN]})\\s*$`),u("HYPHENRANGELOOSE",`^\\s*(${i[a.XRANGEPLAINLOOSE]})\\s+-\\s+(${i[a.XRANGEPLAINLOOSE]})\\s*$`),u("STAR","(<|>)?=?\\s*\\*"),u("GTE0","^\\s*>=\\s*0\\.0\\.0\\s*$"),u("GTE0PRE","^\\s*>=\\s*0\\.0\\.0-0\\s*$")})(fe,fe.exports);const Dr=Object.freeze({loose:!0}),wr=Object.freeze({}),Cr=t=>t?typeof t!="object"?Dr:t:wr;var nt=Cr;const pt=/^[0-9]+$/,zt=(t,e)=>{const r=pt.test(t),n=pt.test(e);return r&&n&&(t=+t,e=+e),t===e?0:r&&!n?-1:n&&!r?1:t<e?-1:1},Pr=(t,e)=>zt(e,t);var Wt={compareIdentifiers:zt,rcompareIdentifiers:Pr};const Pe=Xe,{MAX_LENGTH:gt,MAX_SAFE_INTEGER:_e}=je,{safeRe:vt,t:Et}=fe.exports,_r=nt,{compareIdentifiers:ge}=Wt;class H{constructor(e,r){if(r=_r(r),e instanceof H){if(e.loose===!!r.loose&&e.includePrerelease===!!r.includePrerelease)return e;e=e.version}else if(typeof e!="string")throw new TypeError(`Invalid version. Must be a string. Got type "${typeof e}".`);if(e.length>gt)throw new TypeError(`version is longer than ${gt} characters`);Pe("SemVer",e,r),this.options=r,this.loose=!!r.loose,this.includePrerelease=!!r.includePrerelease;const n=e.trim().match(r.loose?vt[Et.LOOSE]:vt[Et.FULL]);if(!n)throw new TypeError(`Invalid Version: ${e}`);if(this.raw=e,this.major=+n[1],this.minor=+n[2],this.patch=+n[3],this.major>_e||this.major<0)throw new TypeError("Invalid major version");if(this.minor>_e||this.minor<0)throw new TypeError("Invalid minor version");if(this.patch>_e||this.patch<0)throw new TypeError("Invalid patch version");n[4]?this.prerelease=n[4].split(".").map(s=>{if(/^[0-9]+$/.test(s)){const o=+s;if(o>=0&&o<_e)return o}return s}):this.prerelease=[],this.build=n[5]?n[5].split("."):[],this.format()}format(){return this.version=`${this.major}.${this.minor}.${this.patch}`,this.prerelease.length&&(this.version+=`-${this.prerelease.join(".")}`),this.version}toString(){return this.version}compare(e){if(Pe("SemVer.compare",this.version,this.options,e),!(e instanceof H)){if(typeof e=="string"&&e===this.version)return 0;e=new H(e,this.options)}return e.version===this.version?0:this.compareMain(e)||this.comparePre(e)}compareMain(e){return e instanceof H||(e=new H(e,this.options)),ge(this.major,e.major)||ge(this.minor,e.minor)||ge(this.patch,e.patch)}comparePre(e){if(e instanceof H||(e=new H(e,this.options)),this.prerelease.length&&!e.prerelease.length)return-1;if(!this.prerelease.length&&e.prerelease.length)return 1;if(!this.prerelease.length&&!e.prerelease.length)return 0;let r=0;do{const n=this.prerelease[r],s=e.prerelease[r];if(Pe("prerelease compare",r,n,s),n===void 0&&s===void 0)return 0;if(s===void 0)return 1;if(n===void 0)return-1;if(n===s)continue;return ge(n,s)}while(++r)}compareBuild(e){e instanceof H||(e=new H(e,this.options));let r=0;do{const n=this.build[r],s=e.build[r];if(Pe("prerelease compare",r,n,s),n===void 0&&s===void 0)return 0;if(s===void 0)return 1;if(n===void 0)return-1;if(n===s)continue;return ge(n,s)}while(++r)}inc(e,r,n){switch(e){case"premajor":this.prerelease.length=0,this.patch=0,this.minor=0,this.major++,this.inc("pre",r,n);break;case"preminor":this.prerelease.length=0,this.patch=0,this.minor++,this.inc("pre",r,n);break;case"prepatch":this.prerelease.length=0,this.inc("patch",r,n),this.inc("pre",r,n);break;case"prerelease":this.prerelease.length===0&&this.inc("patch",r,n),this.inc("pre",r,n);break;case"major":(this.minor!==0||this.patch!==0||this.prerelease.length===0)&&this.major++,this.minor=0,this.patch=0,this.prerelease=[];break;case"minor":(this.patch!==0||this.prerelease.length===0)&&this.minor++,this.patch=0,this.prerelease=[];break;case"patch":this.prerelease.length===0&&this.patch++,this.prerelease=[];break;case"pre":{const s=Number(n)?1:0;if(!r&&n===!1)throw new Error("invalid increment argument: identifier is empty");if(this.prerelease.length===0)this.prerelease=[s];else{let o=this.prerelease.length;for(;--o>=0;)typeof this.prerelease[o]=="number"&&(this.prerelease[o]++,o=-2);if(o===-1){if(r===this.prerelease.join(".")&&n===!1)throw new Error("invalid increment argument: identifier already exists");this.prerelease.push(s)}}if(r){let o=[r,s];n===!1&&(o=[r]),ge(this.prerelease[0],r)===0?isNaN(this.prerelease[1])&&(this.prerelease=o):this.prerelease=o}break}default:throw new Error(`invalid increment argument: ${e}`)}return this.raw=this.format(),this.build.length&&(this.raw+=`+${this.build.join(".")}`),this}}var G=H;const Nt=G,Fr=(t,e,r=!1)=>{if(t instanceof Nt)return t;try{return new Nt(t,e)}catch(n){if(!r)return null;throw n}};var Ie=Fr;const Ur=Ie,Gr=(t,e)=>{const r=Ur(t,e);return r?r.version:null};var Br=Gr;const Mr=Ie,jr=(t,e)=>{const r=Mr(t.trim().replace(/^[=v]+/,""),e);return r?r.version:null};var Xr=jr;const It=G,kr=(t,e,r,n,s)=>{typeof r=="string"&&(s=n,n=r,r=void 0);try{return new It(t instanceof It?t.version:t,r).inc(e,n,s).version}catch{return null}};var Vr=kr;const $t=Ie,Kr=(t,e)=>{const r=$t(t,null,!0),n=$t(e,null,!0),s=r.compare(n);if(s===0)return null;const o=s>0,i=o?r:n,a=o?n:r,d=!!i.prerelease.length;if(!!a.prerelease.length&&!d)return!a.patch&&!a.minor?"major":i.patch?"patch":i.minor?"minor":"major";const c=d?"pre":"";return r.major!==n.major?c+"major":r.minor!==n.minor?c+"minor":r.patch!==n.patch?c+"patch":"prerelease"};var qr=Kr;const Hr=G,zr=(t,e)=>new Hr(t,e).major;var Wr=zr;const Yr=G,Zr=(t,e)=>new Yr(t,e).minor;var Jr=Zr;const Qr=G,en=(t,e)=>new Qr(t,e).patch;var tn=en;const rn=Ie,nn=(t,e)=>{const r=rn(t,e);return r&&r.prerelease.length?r.prerelease:null};var sn=nn;const Tt=G,on=(t,e,r)=>new Tt(t,r).compare(new Tt(e,r));var W=on;const an=W,cn=(t,e,r)=>an(e,t,r);var ln=cn;const un=W,hn=(t,e)=>un(t,e,!0);var dn=hn;const St=G,fn=(t,e,r)=>{const n=new St(t,r),s=new St(e,r);return n.compare(s)||n.compareBuild(s)};var st=fn;const mn=st,pn=(t,e)=>t.sort((r,n)=>mn(r,n,e));var gn=pn;const vn=st,En=(t,e)=>t.sort((r,n)=>vn(n,r,e));var Nn=En;const In=W,$n=(t,e,r)=>In(t,e,r)>0;var ke=$n;const Tn=W,Sn=(t,e,r)=>Tn(t,e,r)<0;var it=Sn;const Rn=W,Ln=(t,e,r)=>Rn(t,e,r)===0;var Yt=Ln;const yn=W,xn=(t,e,r)=>yn(t,e,r)!==0;var Zt=xn;const bn=W,On=(t,e,r)=>bn(t,e,r)>=0;var ot=On;const An=W,Dn=(t,e,r)=>An(t,e,r)<=0;var at=Dn;const wn=Yt,Cn=Zt,Pn=ke,_n=ot,Fn=it,Un=at,Gn=(t,e,r,n)=>{switch(e){case"===":return typeof t=="object"&&(t=t.version),typeof r=="object"&&(r=r.version),t===r;case"!==":return typeof t=="object"&&(t=t.version),typeof r=="object"&&(r=r.version),t!==r;case"":case"=":case"==":return wn(t,r,n);case"!=":return Cn(t,r,n);case">":return Pn(t,r,n);case">=":return _n(t,r,n);case"<":return Fn(t,r,n);case"<=":return Un(t,r,n);default:throw new TypeError(`Invalid operator: ${e}`)}};var Jt=Gn;const Bn=G,Mn=Ie,{safeRe:Fe,t:Ue}=fe.exports,jn=(t,e)=>{if(t instanceof Bn)return t;if(typeof t=="number"&&(t=String(t)),typeof t!="string")return null;e=e||{};let r=null;if(!e.rtl)r=t.match(Fe[Ue.COERCE]);else{let n;for(;(n=Fe[Ue.COERCERTL].exec(t))&&(!r||r.index+r[0].length!==t.length);)(!r||n.index+n[0].length!==r.index+r[0].length)&&(r=n),Fe[Ue.COERCERTL].lastIndex=n.index+n[1].length+n[2].length;Fe[Ue.COERCERTL].lastIndex=-1}return r===null?null:Mn(`${r[2]}.${r[3]||"0"}.${r[4]||"0"}`,e)};var Xn=jn,qe,Rt;function kn(){return Rt||(Rt=1,qe=function(t){t.prototype[Symbol.iterator]=function*(){for(let e=this.head;e;e=e.next)yield e.value}}),qe}var Vn=y;y.Node=me;y.create=y;function y(t){var e=this;if(e instanceof y||(e=new y),e.tail=null,e.head=null,e.length=0,t&&typeof t.forEach=="function")t.forEach(function(s){e.push(s)});else if(arguments.length>0)for(var r=0,n=arguments.length;r<n;r++)e.push(arguments[r]);return e}y.prototype.removeNode=function(t){if(t.list!==this)throw new Error("removing node which does not belong to this list");var e=t.next,r=t.prev;return e&&(e.prev=r),r&&(r.next=e),t===this.head&&(this.head=e),t===this.tail&&(this.tail=r),t.list.length--,t.next=null,t.prev=null,t.list=null,e};y.prototype.unshiftNode=function(t){if(t!==this.head){t.list&&t.list.removeNode(t);var e=this.head;t.list=this,t.next=e,e&&(e.prev=t),this.head=t,this.tail||(this.tail=t),this.length++}};y.prototype.pushNode=function(t){if(t!==this.tail){t.list&&t.list.removeNode(t);var e=this.tail;t.list=this,t.prev=e,e&&(e.next=t),this.tail=t,this.head||(this.head=t),this.length++}};y.prototype.push=function(){for(var t=0,e=arguments.length;t<e;t++)qn(this,arguments[t]);return this.length};y.prototype.unshift=function(){for(var t=0,e=arguments.length;t<e;t++)Hn(this,arguments[t]);return this.length};y.prototype.pop=function(){if(!!this.tail){var t=this.tail.value;return this.tail=this.tail.prev,this.tail?this.tail.next=null:this.head=null,this.length--,t}};y.prototype.shift=function(){if(!!this.head){var t=this.head.value;return this.head=this.head.next,this.head?this.head.prev=null:this.tail=null,this.length--,t}};y.prototype.forEach=function(t,e){e=e||this;for(var r=this.head,n=0;r!==null;n++)t.call(e,r.value,n,this),r=r.next};y.prototype.forEachReverse=function(t,e){e=e||this;for(var r=this.tail,n=this.length-1;r!==null;n--)t.call(e,r.value,n,this),r=r.prev};y.prototype.get=function(t){for(var e=0,r=this.head;r!==null&&e<t;e++)r=r.next;if(e===t&&r!==null)return r.value};y.prototype.getReverse=function(t){for(var e=0,r=this.tail;r!==null&&e<t;e++)r=r.prev;if(e===t&&r!==null)return r.value};y.prototype.map=function(t,e){e=e||this;for(var r=new y,n=this.head;n!==null;)r.push(t.call(e,n.value,this)),n=n.next;return r};y.prototype.mapReverse=function(t,e){e=e||this;for(var r=new y,n=this.tail;n!==null;)r.push(t.call(e,n.value,this)),n=n.prev;return r};y.prototype.reduce=function(t,e){var r,n=this.head;if(arguments.length>1)r=e;else if(this.head)n=this.head.next,r=this.head.value;else throw new TypeError("Reduce of empty list with no initial value");for(var s=0;n!==null;s++)r=t(r,n.value,s),n=n.next;return r};y.prototype.reduceReverse=function(t,e){var r,n=this.tail;if(arguments.length>1)r=e;else if(this.tail)n=this.tail.prev,r=this.tail.value;else throw new TypeError("Reduce of empty list with no initial value");for(var s=this.length-1;n!==null;s--)r=t(r,n.value,s),n=n.prev;return r};y.prototype.toArray=function(){for(var t=new Array(this.length),e=0,r=this.head;r!==null;e++)t[e]=r.value,r=r.next;return t};y.prototype.toArrayReverse=function(){for(var t=new Array(this.length),e=0,r=this.tail;r!==null;e++)t[e]=r.value,r=r.prev;return t};y.prototype.slice=function(t,e){e=e||this.length,e<0&&(e+=this.length),t=t||0,t<0&&(t+=this.length);var r=new y;if(e<t||e<0)return r;t<0&&(t=0),e>this.length&&(e=this.length);for(var n=0,s=this.head;s!==null&&n<t;n++)s=s.next;for(;s!==null&&n<e;n++,s=s.next)r.push(s.value);return r};y.prototype.sliceReverse=function(t,e){e=e||this.length,e<0&&(e+=this.length),t=t||0,t<0&&(t+=this.length);var r=new y;if(e<t||e<0)return r;t<0&&(t=0),e>this.length&&(e=this.length);for(var n=this.length,s=this.tail;s!==null&&n>e;n--)s=s.prev;for(;s!==null&&n>t;n--,s=s.prev)r.push(s.value);return r};y.prototype.splice=function(t,e,...r){t>this.length&&(t=this.length-1),t<0&&(t=this.length+t);for(var n=0,s=this.head;s!==null&&n<t;n++)s=s.next;for(var o=[],n=0;s&&n<e;n++)o.push(s.value),s=this.removeNode(s);s===null&&(s=this.tail),s!==this.head&&s!==this.tail&&(s=s.prev);for(var n=0;n<r.length;n++)s=Kn(this,s,r[n]);return o};y.prototype.reverse=function(){for(var t=this.head,e=this.tail,r=t;r!==null;r=r.prev){var n=r.prev;r.prev=r.next,r.next=n}return this.head=e,this.tail=t,this};function Kn(t,e,r){var n=e===t.head?new me(r,null,e,t):new me(r,e,e.next,t);return n.next===null&&(t.tail=n),n.prev===null&&(t.head=n),t.length++,n}function qn(t,e){t.tail=new me(e,t.tail,null,t),t.head||(t.head=t.tail),t.length++}function Hn(t,e){t.head=new me(e,null,t.head,t),t.tail||(t.tail=t.head),t.length++}function me(t,e,r,n){if(!(this instanceof me))return new me(t,e,r,n);this.list=n,this.value=t,e?(e.next=this,this.prev=e):this.prev=null,r?(r.prev=this,this.next=r):this.next=null}try{kn()(y)}catch{}const zn=Vn,ue=Symbol("max"),ee=Symbol("length"),ve=Symbol("lengthCalculator"),be=Symbol("allowStale"),de=Symbol("maxAge"),Q=Symbol("dispose"),Lt=Symbol("noDisposeOnSet"),w=Symbol("lruList"),z=Symbol("cache"),Qt=Symbol("updateAgeOnGet"),He=()=>1;class Wn{constructor(e){if(typeof e=="number"&&(e={max:e}),e||(e={}),e.max&&(typeof e.max!="number"||e.max<0))throw new TypeError("max must be a non-negative number");this[ue]=e.max||1/0;const r=e.length||He;if(this[ve]=typeof r!="function"?He:r,this[be]=e.stale||!1,e.maxAge&&typeof e.maxAge!="number")throw new TypeError("maxAge must be a number");this[de]=e.maxAge||0,this[Q]=e.dispose,this[Lt]=e.noDisposeOnSet||!1,this[Qt]=e.updateAgeOnGet||!1,this.reset()}set max(e){if(typeof e!="number"||e<0)throw new TypeError("max must be a non-negative number");this[ue]=e||1/0,Re(this)}get max(){return this[ue]}set allowStale(e){this[be]=!!e}get allowStale(){return this[be]}set maxAge(e){if(typeof e!="number")throw new TypeError("maxAge must be a non-negative number");this[de]=e,Re(this)}get maxAge(){return this[de]}set lengthCalculator(e){typeof e!="function"&&(e=He),e!==this[ve]&&(this[ve]=e,this[ee]=0,this[w].forEach(r=>{r.length=this[ve](r.value,r.key),this[ee]+=r.length})),Re(this)}get lengthCalculator(){return this[ve]}get length(){return this[ee]}get itemCount(){return this[w].length}rforEach(e,r){r=r||this;for(let n=this[w].tail;n!==null;){const s=n.prev;yt(this,e,n,r),n=s}}forEach(e,r){r=r||this;for(let n=this[w].head;n!==null;){const s=n.next;yt(this,e,n,r),n=s}}keys(){return this[w].toArray().map(e=>e.key)}values(){return this[w].toArray().map(e=>e.value)}reset(){this[Q]&&this[w]&&this[w].length&&this[w].forEach(e=>this[Q](e.key,e.value)),this[z]=new Map,this[w]=new zn,this[ee]=0}dump(){return this[w].map(e=>Be(this,e)?!1:{k:e.key,v:e.value,e:e.now+(e.maxAge||0)}).toArray().filter(e=>e)}dumpLru(){return this[w]}set(e,r,n){if(n=n||this[de],n&&typeof n!="number")throw new TypeError("maxAge must be a number");const s=n?Date.now():0,o=this[ve](r,e);if(this[z].has(e)){if(o>this[ue])return Ne(this,this[z].get(e)),!1;const d=this[z].get(e).value;return this[Q]&&(this[Lt]||this[Q](e,d.value)),d.now=s,d.maxAge=n,d.value=r,this[ee]+=o-d.length,d.length=o,this.get(e),Re(this),!0}const i=new Yn(e,r,o,s,n);return i.length>this[ue]?(this[Q]&&this[Q](e,r),!1):(this[ee]+=i.length,this[w].unshift(i),this[z].set(e,this[w].head),Re(this),!0)}has(e){if(!this[z].has(e))return!1;const r=this[z].get(e).value;return!Be(this,r)}get(e){return ze(this,e,!0)}peek(e){return ze(this,e,!1)}pop(){const e=this[w].tail;return e?(Ne(this,e),e.value):null}del(e){Ne(this,this[z].get(e))}load(e){this.reset();const r=Date.now();for(let n=e.length-1;n>=0;n--){const s=e[n],o=s.e||0;if(o===0)this.set(s.k,s.v);else{const i=o-r;i>0&&this.set(s.k,s.v,i)}}}prune(){this[z].forEach((e,r)=>ze(this,r,!1))}}const ze=(t,e,r)=>{const n=t[z].get(e);if(n){const s=n.value;if(Be(t,s)){if(Ne(t,n),!t[be])return}else r&&(t[Qt]&&(n.value.now=Date.now()),t[w].unshiftNode(n));return s.value}},Be=(t,e)=>{if(!e||!e.maxAge&&!t[de])return!1;const r=Date.now()-e.now;return e.maxAge?r>e.maxAge:t[de]&&r>t[de]},Re=t=>{if(t[ee]>t[ue])for(let e=t[w].tail;t[ee]>t[ue]&&e!==null;){const r=e.prev;Ne(t,e),e=r}},Ne=(t,e)=>{if(e){const r=e.value;t[Q]&&t[Q](r.key,r.value),t[ee]-=r.length,t[z].delete(r.key),t[w].removeNode(e)}};class Yn{constructor(e,r,n,s,o){this.key=e,this.value=r,this.length=n,this.now=s,this.maxAge=o||0}}const yt=(t,e,r,n)=>{let s=r.value;Be(t,s)&&(Ne(t,r),t[be]||(s=void 0)),s&&e.call(n,s.value,s.key,t)};var Zn=Wn,We,xt;function Y(){if(xt)return We;xt=1;class t{constructor(h,v){if(v=n(v),h instanceof t)return h.loose===!!v.loose&&h.includePrerelease===!!v.includePrerelease?h:new t(h.raw,v);if(h instanceof s)return this.raw=h.value,this.set=[[h]],this.format(),this;if(this.options=v,this.loose=!!v.loose,this.includePrerelease=!!v.includePrerelease,this.raw=h.trim().split(/\s+/).join(" "),this.set=this.raw.split("||").map(E=>this.parseRange(E)).filter(E=>E.length),!this.set.length)throw new TypeError(`Invalid SemVer Range: ${this.raw}`);if(this.set.length>1){const E=this.set[0];if(this.set=this.set.filter(N=>!q(N[0])),this.set.length===0)this.set=[E];else if(this.set.length>1){for(const N of this.set)if(N.length===1&&p(N[0])){this.set=[N];break}}}this.format()}format(){return this.range=this.set.map(h=>h.join(" ").trim()).join("||").trim(),this.range}toString(){return this.range}parseRange(h){const E=((this.options.includePrerelease&&S)|(this.options.loose&&m))+":"+h,N=r.get(E);if(N)return N;const g=this.options.loose,I=g?a[d.HYPHENRANGELOOSE]:a[d.HYPHENRANGE];h=h.replace(I,oe(this.options.includePrerelease)),o("hyphen replace",h),h=h.replace(a[d.COMPARATORTRIM],u),o("comparator trim",h),h=h.replace(a[d.TILDETRIM],c),h=h.replace(a[d.CARETTRIM],l);let x=h.split(" ").map(D=>O(D,this.options)).join(" ").split(/\s+/).map(D=>J(D,this.options));g&&(x=x.filter(D=>(o("loose invalid filter",D,this.options),!!D.match(a[d.COMPARATORLOOSE])))),o("range list",x);const T=new Map,b=x.map(D=>new s(D,this.options));for(const D of b){if(q(D))return[D];T.set(D.value,D)}T.size>1&&T.has("")&&T.delete("");const k=[...T.values()];return r.set(E,k),k}intersects(h,v){if(!(h instanceof t))throw new TypeError("a Range is required");return this.set.some(E=>$(E,v)&&h.set.some(N=>$(N,v)&&E.every(g=>N.every(I=>g.intersects(I,v)))))}test(h){if(!h)return!1;if(typeof h=="string")try{h=new i(h,this.options)}catch{return!1}for(let v=0;v<this.set.length;v++)if(U(this.set[v],h,this.options))return!0;return!1}}We=t;const e=Zn,r=new e({max:1e3}),n=nt,s=Ve(),o=Xe,i=G,{safeRe:a,t:d,comparatorTrimReplace:u,tildeTrimReplace:c,caretTrimReplace:l}=fe.exports,{FLAG_INCLUDE_PRERELEASE:S,FLAG_LOOSE:m}=je,q=f=>f.value==="<0.0.0-0",p=f=>f.value==="",$=(f,h)=>{let v=!0;const E=f.slice();let N=E.pop();for(;v&&E.length;)v=E.every(g=>N.intersects(g,h)),N=E.pop();return v},O=(f,h)=>(o("comp",f,h),f=F(f,h),o("caret",f),f=B(f,h),o("tildes",f),f=A(f,h),o("xrange",f),f=$e(f,h),o("stars",f),f),R=f=>!f||f.toLowerCase()==="x"||f==="*",B=(f,h)=>f.trim().split(/\s+/).map(v=>_(v,h)).join(" "),_=(f,h)=>{const v=h.loose?a[d.TILDELOOSE]:a[d.TILDE];return f.replace(v,(E,N,g,I,x)=>{o("tilde",f,E,N,g,I,x);let T;return R(N)?T="":R(g)?T=`>=${N}.0.0 <${+N+1}.0.0-0`:R(I)?T=`>=${N}.${g}.0 <${N}.${+g+1}.0-0`:x?(o("replaceTilde pr",x),T=`>=${N}.${g}.${I}-${x} <${N}.${+g+1}.0-0`):T=`>=${N}.${g}.${I} <${N}.${+g+1}.0-0`,o("tilde return",T),T})},F=(f,h)=>f.trim().split(/\s+/).map(v=>M(v,h)).join(" "),M=(f,h)=>{o("caret",f,h);const v=h.loose?a[d.CARETLOOSE]:a[d.CARET],E=h.includePrerelease?"-0":"";return f.replace(v,(N,g,I,x,T)=>{o("caret",f,N,g,I,x,T);let b;return R(g)?b="":R(I)?b=`>=${g}.0.0${E} <${+g+1}.0.0-0`:R(x)?g==="0"?b=`>=${g}.${I}.0${E} <${g}.${+I+1}.0-0`:b=`>=${g}.${I}.0${E} <${+g+1}.0.0-0`:T?(o("replaceCaret pr",T),g==="0"?I==="0"?b=`>=${g}.${I}.${x}-${T} <${g}.${I}.${+x+1}-0`:b=`>=${g}.${I}.${x}-${T} <${g}.${+I+1}.0-0`:b=`>=${g}.${I}.${x}-${T} <${+g+1}.0.0-0`):(o("no pr"),g==="0"?I==="0"?b=`>=${g}.${I}.${x}${E} <${g}.${I}.${+x+1}-0`:b=`>=${g}.${I}.${x}${E} <${g}.${+I+1}.0-0`:b=`>=${g}.${I}.${x} <${+g+1}.0.0-0`),o("caret return",b),b})},A=(f,h)=>(o("replaceXRanges",f,h),f.split(/\s+/).map(v=>j(v,h)).join(" ")),j=(f,h)=>{f=f.trim();const v=h.loose?a[d.XRANGELOOSE]:a[d.XRANGE];return f.replace(v,(E,N,g,I,x,T)=>{o("xRange",f,E,N,g,I,x,T);const b=R(g),k=b||R(I),D=k||R(x),Te=D;return N==="="&&Te&&(N=""),T=h.includePrerelease?"-0":"",b?N===">"||N==="<"?E="<0.0.0-0":E="*":N&&Te?(k&&(I=0),x=0,N===">"?(N=">=",k?(g=+g+1,I=0,x=0):(I=+I+1,x=0)):N==="<="&&(N="<",k?g=+g+1:I=+I+1),N==="<"&&(T="-0"),E=`${N+g}.${I}.${x}${T}`):k?E=`>=${g}.0.0${T} <${+g+1}.0.0-0`:D&&(E=`>=${g}.${I}.0${T} <${g}.${+I+1}.0-0`),o("xRange return",E),E})},$e=(f,h)=>(o("replaceStars",f,h),f.trim().replace(a[d.STAR],"")),J=(f,h)=>(o("replaceGTE0",f,h),f.trim().replace(a[h.includePrerelease?d.GTE0PRE:d.GTE0],"")),oe=f=>(h,v,E,N,g,I,x,T,b,k,D,Te,Xi)=>(R(E)?v="":R(N)?v=`>=${E}.0.0${f?"-0":""}`:R(g)?v=`>=${E}.${N}.0${f?"-0":""}`:I?v=`>=${v}`:v=`>=${v}${f?"-0":""}`,R(b)?T="":R(k)?T=`<${+b+1}.0.0-0`:R(D)?T=`<${b}.${+k+1}.0-0`:Te?T=`<=${b}.${k}.${D}-${Te}`:f?T=`<${b}.${k}.${+D+1}-0`:T=`<=${T}`,`${v} ${T}`.trim()),U=(f,h,v)=>{for(let E=0;E<f.length;E++)if(!f[E].test(h))return!1;if(h.prerelease.length&&!v.includePrerelease){for(let E=0;E<f.length;E++)if(o(f[E].semver),f[E].semver!==s.ANY&&f[E].semver.prerelease.length>0){const N=f[E].semver;if(N.major===h.major&&N.minor===h.minor&&N.patch===h.patch)return!0}return!1}return!0};return We}var Ye,bt;function Ve(){if(bt)return Ye;bt=1;const t=Symbol("SemVer ANY");class e{static get ANY(){return t}constructor(c,l){if(l=r(l),c instanceof e){if(c.loose===!!l.loose)return c;c=c.value}c=c.trim().split(/\s+/).join(" "),i("comparator",c,l),this.options=l,this.loose=!!l.loose,this.parse(c),this.semver===t?this.value="":this.value=this.operator+this.semver.version,i("comp",this)}parse(c){const l=this.options.loose?n[s.COMPARATORLOOSE]:n[s.COMPARATOR],S=c.match(l);if(!S)throw new TypeError(`Invalid comparator: ${c}`);this.operator=S[1]!==void 0?S[1]:"",this.operator==="="&&(this.operator=""),S[2]?this.semver=new a(S[2],this.options.loose):this.semver=t}toString(){return this.value}test(c){if(i("Comparator.test",c,this.options.loose),this.semver===t||c===t)return!0;if(typeof c=="string")try{c=new a(c,this.options)}catch{return!1}return o(c,this.operator,this.semver,this.options)}intersects(c,l){if(!(c instanceof e))throw new TypeError("a Comparator is required");return this.operator===""?this.value===""?!0:new d(c.value,l).test(this.value):c.operator===""?c.value===""?!0:new d(this.value,l).test(c.semver):(l=r(l),l.includePrerelease&&(this.value==="<0.0.0-0"||c.value==="<0.0.0-0")||!l.includePrerelease&&(this.value.startsWith("<0.0.0")||c.value.startsWith("<0.0.0"))?!1:!!(this.operator.startsWith(">")&&c.operator.startsWith(">")||this.operator.startsWith("<")&&c.operator.startsWith("<")||this.semver.version===c.semver.version&&this.operator.includes("=")&&c.operator.includes("=")||o(this.semver,"<",c.semver,l)&&this.operator.startsWith(">")&&c.operator.startsWith("<")||o(this.semver,">",c.semver,l)&&this.operator.startsWith("<")&&c.operator.startsWith(">")))}}Ye=e;const r=nt,{safeRe:n,t:s}=fe.exports,o=Jt,i=Xe,a=G,d=Y();return Ye}const Jn=Y(),Qn=(t,e,r)=>{try{e=new Jn(e,r)}catch{return!1}return e.test(t)};var Ke=Qn;const es=Y(),ts=(t,e)=>new es(t,e).set.map(r=>r.map(n=>n.value).join(" ").trim().split(" "));var rs=ts;const ns=G,ss=Y(),is=(t,e,r)=>{let n=null,s=null,o=null;try{o=new ss(e,r)}catch{return null}return t.forEach(i=>{o.test(i)&&(!n||s.compare(i)===-1)&&(n=i,s=new ns(n,r))}),n};var os=is;const as=G,cs=Y(),ls=(t,e,r)=>{let n=null,s=null,o=null;try{o=new cs(e,r)}catch{return null}return t.forEach(i=>{o.test(i)&&(!n||s.compare(i)===1)&&(n=i,s=new as(n,r))}),n};var us=ls;const Ze=G,hs=Y(),Ot=ke,ds=(t,e)=>{t=new hs(t,e);let r=new Ze("0.0.0");if(t.test(r)||(r=new Ze("0.0.0-0"),t.test(r)))return r;r=null;for(let n=0;n<t.set.length;++n){const s=t.set[n];let o=null;s.forEach(i=>{const a=new Ze(i.semver.version);switch(i.operator){case">":a.prerelease.length===0?a.patch++:a.prerelease.push(0),a.raw=a.format();case"":case">=":(!o||Ot(a,o))&&(o=a);break;case"<":case"<=":break;default:throw new Error(`Unexpected operation: ${i.operator}`)}}),o&&(!r||Ot(r,o))&&(r=o)}return r&&t.test(r)?r:null};var fs=ds;const ms=Y(),ps=(t,e)=>{try{return new ms(t,e).range||"*"}catch{return null}};var gs=ps;const vs=G,er=Ve(),{ANY:Es}=er,Ns=Y(),Is=Ke,At=ke,Dt=it,$s=at,Ts=ot,Ss=(t,e,r,n)=>{t=new vs(t,n),e=new Ns(e,n);let s,o,i,a,d;switch(r){case">":s=At,o=$s,i=Dt,a=">",d=">=";break;case"<":s=Dt,o=Ts,i=At,a="<",d="<=";break;default:throw new TypeError('Must provide a hilo val of "<" or ">"')}if(Is(t,e,n))return!1;for(let u=0;u<e.set.length;++u){const c=e.set[u];let l=null,S=null;if(c.forEach(m=>{m.semver===Es&&(m=new er(">=0.0.0")),l=l||m,S=S||m,s(m.semver,l.semver,n)?l=m:i(m.semver,S.semver,n)&&(S=m)}),l.operator===a||l.operator===d||(!S.operator||S.operator===a)&&o(t,S.semver))return!1;if(S.operator===d&&i(t,S.semver))return!1}return!0};var ct=Ss;const Rs=ct,Ls=(t,e,r)=>Rs(t,e,">",r);var ys=Ls;const xs=ct,bs=(t,e,r)=>xs(t,e,"<",r);var Os=bs;const wt=Y(),As=(t,e,r)=>(t=new wt(t,r),e=new wt(e,r),t.intersects(e,r));var Ds=As;const ws=Ke,Cs=W;var Ps=(t,e,r)=>{const n=[];let s=null,o=null;const i=t.sort((c,l)=>Cs(c,l,r));for(const c of i)ws(c,e,r)?(o=c,s||(s=c)):(o&&n.push([s,o]),o=null,s=null);s&&n.push([s,null]);const a=[];for(const[c,l]of n)c===l?a.push(c):!l&&c===i[0]?a.push("*"):l?c===i[0]?a.push(`<=${l}`):a.push(`${c} - ${l}`):a.push(`>=${c}`);const d=a.join(" || "),u=typeof e.raw=="string"?e.raw:String(e);return d.length<u.length?d:e};const Ct=Y(),lt=Ve(),{ANY:Je}=lt,Le=Ke,ut=W,_s=(t,e,r={})=>{if(t===e)return!0;t=new Ct(t,r),e=new Ct(e,r);let n=!1;e:for(const s of t.set){for(const o of e.set){const i=Us(s,o,r);if(n=n||i!==null,i)continue e}if(n)return!1}return!0},Fs=[new lt(">=0.0.0-0")],Pt=[new lt(">=0.0.0")],Us=(t,e,r)=>{if(t===e)return!0;if(t.length===1&&t[0].semver===Je){if(e.length===1&&e[0].semver===Je)return!0;r.includePrerelease?t=Fs:t=Pt}if(e.length===1&&e[0].semver===Je){if(r.includePrerelease)return!0;e=Pt}const n=new Set;let s,o;for(const m of t)m.operator===">"||m.operator===">="?s=_t(s,m,r):m.operator==="<"||m.operator==="<="?o=Ft(o,m,r):n.add(m.semver);if(n.size>1)return null;let i;if(s&&o){if(i=ut(s.semver,o.semver,r),i>0)return null;if(i===0&&(s.operator!==">="||o.operator!=="<="))return null}for(const m of n){if(s&&!Le(m,String(s),r)||o&&!Le(m,String(o),r))return null;for(const q of e)if(!Le(m,String(q),r))return!1;return!0}let a,d,u,c,l=o&&!r.includePrerelease&&o.semver.prerelease.length?o.semver:!1,S=s&&!r.includePrerelease&&s.semver.prerelease.length?s.semver:!1;l&&l.prerelease.length===1&&o.operator==="<"&&l.prerelease[0]===0&&(l=!1);for(const m of e){if(c=c||m.operator===">"||m.operator===">=",u=u||m.operator==="<"||m.operator==="<=",s){if(S&&m.semver.prerelease&&m.semver.prerelease.length&&m.semver.major===S.major&&m.semver.minor===S.minor&&m.semver.patch===S.patch&&(S=!1),m.operator===">"||m.operator===">="){if(a=_t(s,m,r),a===m&&a!==s)return!1}else if(s.operator===">="&&!Le(s.semver,String(m),r))return!1}if(o){if(l&&m.semver.prerelease&&m.semver.prerelease.length&&m.semver.major===l.major&&m.semver.minor===l.minor&&m.semver.patch===l.patch&&(l=!1),m.operator==="<"||m.operator==="<="){if(d=Ft(o,m,r),d===m&&d!==o)return!1}else if(o.operator==="<="&&!Le(o.semver,String(m),r))return!1}if(!m.operator&&(o||s)&&i!==0)return!1}return!(s&&u&&!o&&i!==0||o&&c&&!s&&i!==0||S||l)},_t=(t,e,r)=>{if(!t)return e;const n=ut(t.semver,e.semver,r);return n>0?t:n<0||e.operator===">"&&t.operator===">="?e:t},Ft=(t,e,r)=>{if(!t)return e;const n=ut(t.semver,e.semver,r);return n<0?t:n>0||e.operator==="<"&&t.operator==="<="?e:t};var Gs=_s;const Qe=fe.exports,Ut=je,Bs=G,Gt=Wt,Ms=Ie,js=Br,Xs=Xr,ks=Vr,Vs=qr,Ks=Wr,qs=Jr,Hs=tn,zs=sn,Ws=W,Ys=ln,Zs=dn,Js=st,Qs=gn,ei=Nn,ti=ke,ri=it,ni=Yt,si=Zt,ii=ot,oi=at,ai=Jt,ci=Xn,li=Ve(),ui=Y(),hi=Ke,di=rs,fi=os,mi=us,pi=fs,gi=gs,vi=ct,Ei=ys,Ni=Os,Ii=Ds,$i=Ps,Ti=Gs;var Bt={parse:Ms,valid:js,clean:Xs,inc:ks,diff:Vs,major:Ks,minor:qs,patch:Hs,prerelease:zs,compare:Ws,rcompare:Ys,compareLoose:Zs,compareBuild:Js,sort:Qs,rsort:ei,gt:ti,lt:ri,eq:ni,neq:si,gte:ii,lte:oi,cmp:ai,coerce:ci,Comparator:li,Range:ui,satisfies:hi,toComparators:di,maxSatisfying:fi,minSatisfying:mi,minVersion:pi,validRange:gi,outside:vi,gtr:Ei,ltr:Ni,intersects:Ii,simplifyRange:$i,subset:Ti,SemVer:Bs,re:Qe.re,src:Qe.src,tokens:Qe.t,SEMVER_SPEC_VERSION:Ut.SEMVER_SPEC_VERSION,RELEASE_TYPES:Ut.RELEASE_TYPES,compareIdentifiers:Gt.compareIdentifiers,rcompareIdentifiers:Gt.rcompareIdentifiers},C;(function(t){t.blue="blue",t.nanoS="nanoS",t.nanoSP="nanoSP",t.nanoX="nanoX",t.stax="stax"})(C||(C={}));const tt={[C.blue]:{id:C.blue,productName:"Ledger\xA0Blue",productIdMM:0,legacyUsbProductId:0,usbOnly:!0,memorySize:480*1024,masks:[822083584,822149120],getBlockSize:t=>4*1024},[C.nanoS]:{id:C.nanoS,productName:"Ledger\xA0Nano\xA0S",productIdMM:16,legacyUsbProductId:1,usbOnly:!0,memorySize:320*1024,masks:[823132160],getBlockSize:t=>{var e;return Bt.lt((e=Bt.coerce(t))!==null&&e!==void 0?e:"","2.0.0")?4*1024:2*1024}},[C.nanoSP]:{id:C.nanoSP,productName:"Ledger Nano S Plus",productIdMM:80,legacyUsbProductId:5,usbOnly:!0,memorySize:1536*1024,masks:[856686592],getBlockSize:t=>32},[C.nanoX]:{id:C.nanoX,productName:"Ledger\xA0Nano\xA0X",productIdMM:64,legacyUsbProductId:4,usbOnly:!1,memorySize:2*1024*1024,masks:[855638016],getBlockSize:t=>4*1024,bluetoothSpec:[{serviceUuid:"13d63400-2c97-0004-0000-4c6564676572",notifyUuid:"13d63400-2c97-0004-0001-4c6564676572",writeUuid:"13d63400-2c97-0004-0002-4c6564676572",writeCmdUuid:"13d63400-2c97-0004-0003-4c6564676572"}]},[C.stax]:{id:C.stax,productName:"Ledger\xA0Stax",productIdMM:96,legacyUsbProductId:6,usbOnly:!1,memorySize:1536*1024,masks:[857735168],getBlockSize:t=>32,bluetoothSpec:[{serviceUuid:"13d63400-2c97-6004-0000-4c6564676572",notifyUuid:"13d63400-2c97-6004-0001-4c6564676572",writeUuid:"13d63400-2c97-6004-0002-4c6564676572",writeCmdUuid:"13d63400-2c97-6004-0003-4c6564676572"}]}};C.blue,C.nanoS,C.nanoSP,C.nanoX,C.stax;const Mt=Object.values(tt),tr=11415,rr=t=>{const e=Mt.find(s=>s.legacyUsbProductId===t);if(e)return e;const r=t>>8;return Mt.find(s=>s.productIdMM===r)},Si=[],jt={};for(const t in tt){const e=tt[t],{bluetoothSpec:r}=e;if(r)for(let n=0;n<r.length;n++){const s=r[n];Si.push(s.serviceUuid),jt[s.serviceUuid]=jt[s.serviceUuid.replace(/-/g,"")]=Object.assign({deviceModel:e},s)}}var Ri=0,re=[],Xt=function(t,e,r){var n={type:t,id:String(++Ri),date:new Date};e&&(n.message=e),r&&(n.data=r),yi(n)},Li=function(t){return re.push(t),function(){var e=re.indexOf(t);e!==-1&&(re[e]=re[re.length-1],re.pop())}};function yi(t){for(var e=0;e<re.length;e++)try{re[e](t)}catch(r){console.error(r)}}typeof window<"u"&&(window.__ledgerLogsListen=Li);var te=globalThis&&globalThis.__awaiter||function(t,e,r,n){function s(o){return o instanceof r?o:new r(function(i){i(o)})}return new(r||(r=Promise))(function(o,i){function a(c){try{u(n.next(c))}catch(l){i(l)}}function d(c){try{u(n.throw(c))}catch(l){i(l)}}function u(c){c.done?o(c.value):s(c.value).then(a,d)}u((n=n.apply(t,e||[])).next())})};const xi=[{vendorId:tr}],bi=()=>Promise.resolve(!!(window.navigator&&window.navigator.hid)),Me=()=>{const{hid:t}=navigator;if(!t)throw new se("navigator.hid is not supported","HIDNotSupported");return t};function nr(){return te(this,void 0,void 0,function*(){const t=yield Me().requestDevice({filters:xi});return Array.isArray(t)?t:[t]})}function ht(){return te(this,void 0,void 0,function*(){return(yield Me().getDevices()).filter(e=>e.vendorId===tr)})}function Oi(){return te(this,void 0,void 0,function*(){const t=yield ht();return t.length>0?t[0]:(yield nr())[0]})}class ie extends rt{constructor(e){super(),this.channel=Math.floor(Math.random()*65535),this.packetSize=64,this.inputs=[],this.read=()=>this.inputs.length?Promise.resolve(this.inputs.shift()):new Promise(r=>{this.inputCallback=r}),this.onInputReport=r=>{const n=Buffer.from(r.data.buffer);this.inputCallback?(this.inputCallback(n),this.inputCallback=null):this.inputs.push(n)},this._disconnectEmitted=!1,this._emitDisconnect=r=>{this._disconnectEmitted||(this._disconnectEmitted=!0,this.emit("disconnect",r))},this.exchange=r=>te(this,void 0,void 0,function*(){return yield this.exchangeAtomicImpl(()=>te(this,void 0,void 0,function*(){const{channel:s,packetSize:o}=this;Xt("apdu","=> "+r.toString("hex"));const i=Rr(s,o),a=i.makeBlocks(r);for(let c=0;c<a.length;c++)yield this.device.sendReport(0,a[c]);let d,u;for(;!(d=i.getReducedResult(u));){const c=yield this.read();u=i.reduceResponse(u,c)}return Xt("apdu","<= "+d.toString("hex")),d})).catch(s=>{throw s&&s.message&&s.message.includes("write")?(this._emitDisconnect(s),new Nr(s.message)):s})}),this.device=e,this.deviceModel=typeof e.productId=="number"?rr(e.productId):void 0,e.addEventListener("inputreport",this.onInputReport)}static request(){return te(this,void 0,void 0,function*(){const[e]=yield nr();return ie.open(e)})}static openConnected(){return te(this,void 0,void 0,function*(){const e=yield ht();return e.length===0?null:ie.open(e[0])})}static open(e){return te(this,void 0,void 0,function*(){yield e.open();const r=new ie(e),n=s=>{e===s.device&&(Me().removeEventListener("disconnect",n),r._emitDisconnect(new Er))};return Me().addEventListener("disconnect",n),r})}close(){return te(this,void 0,void 0,function*(){yield this.exchangeBusyPromise,this.device.removeEventListener("inputreport",this.onInputReport),yield this.device.close()})}setScrambleKey(){}}ie.isSupported=bi;ie.list=ht;ie.listen=t=>{let e=!1;Oi().then(n=>{if(!n)t.error(new dt("Access denied to use Ledger device"));else if(!e){const s=typeof n.productId=="number"?rr(n.productId):void 0;t.next({type:"add",descriptor:n,deviceModel:s}),t.complete()}},n=>{t.error(new dt(n.message))});function r(){e=!0}return{unsubscribe:r}};const Ge={aa:"aa",ab:"ab",ac:"ac"},V={FailedToCreateTransport:"FailedToCreateTransport",FailedToListLedgerDevices:"FailedToListLedgerDevices",FailedToExchangeData:"FailedToExchangeData",NoDevicesConnected:"NoDevicesConnected",MultipleLedgerConnected:"MultipleLedgerConnected",DeviceMismatch:"DeviceMismatch",UnlockDevice:"5515",BadIns:"6e01"},K={GetDeviceModel:"11",GetDeviceId:"12",GetPubKeyEd25519:"21",GetPubKeySecp256k1:"31",SignTxEd255519:"41",SignTxEd255519Smart:"42",SignTxSecp256k1:"51",SignTxSecp256k1Smart:"52",SignAuthEd25519:"61",SignAuthSecp256k1:"71"},kt=t=>{const e=t.split("H").join("'").slice(2).split("/"),r=`00${(e.length&255).toString(16)}`.slice(-2),n=e.map(i=>(i.endsWith("'")?2147483648:0)+parseInt(i,10)).map(i=>i.toString(16).padStart(8,"0")).join(""),s=`${r}${n}`;return`${Ht(s)}${s}`},Ai=()=>({onProgressSubject:new ir}),Di={"00":"nanoS","01":"nanoS+","02":"nanoX"},Vt=({curve:t})=>({curve25519:{publicKeyByteCount:32,signatureByteCount:64,signTx:K.SignTxEd255519,signAuth:K.SignAuthEd25519,getPublicKey:K.GetPubKeyEd25519,signTxSmart:K.SignTxEd255519Smart},secp256k1:{publicKeyByteCount:33,signatureByteCount:65,signTx:K.SignTxSecp256k1,signAuth:K.SignAuthSecp256k1,getPublicKey:K.GetPubKeySecp256k1,signTxSmart:K.SignTxSecp256k1Smart}})[t],wi=({transport:t=ie,ledgerSubjects:e=Ai()})=>{let r,n;const s=p=>e.onProgressSubject.next(p),o=()=>r?(s("Finalizing existing ledger communication"),Se.fromPromise(r.close().then(()=>{r=void 0}),p=>(le.error(p),"failedToCloseExistingTransport")).andThen(()=>o())):Se.fromPromise(t.list(),()=>V.FailedToListLedgerDevices).andThen(p=>(le.debug("Found Ledger devices",p.map(({productName:$,productId:O})=>`${O}, ${$}`)),p.length>1?ce(V.MultipleLedgerConnected):(p.length===0&&s("Waiting for Ledger device connection"),ae(void 0)))).andThen(()=>Se.fromPromise(t.create(),()=>V.FailedToCreateTransport).map(p=>(r=p,s("Creating Ledger device connection"),{closeTransport:()=>(s(""),r=void 0,Se.fromPromise(p.close(),()=>"failedClosingTransport")),exchange:(O,R="",{p1:B="00",instructionClass:_=Ge.aa}={})=>{const F=`${_}${O}${B}00${R}`;return le.debug("\u{1F4D2} sending",F),Se.fromPromise(p.exchange(Buffer.from(F,"hex")),()=>V.FailedToExchangeData).andThen(M=>{const A=M.toString("hex");le.debug("\u{1F4D2} received",A);const j=A.slice(-4);return j!=="9000"?ce(j):ae(A.slice(0,-4))})}}))),i=p=>o().andThen(({closeTransport:$,exchange:O})=>p(O).andThen(R=>$().map(()=>R)).mapErr(R=>($(),R))).mapErr($=>(s(""),$)),a=p=>$=>(s("Checking Ledger Device ID"),$===p?ae(void 0):ce(V.DeviceMismatch)),d=p=>()=>ae(p.keysParameters.map($=>{const{getPublicKey:O}=Vt($),R=kt($.derivationPath);return{...$,getPublicKey:O,encodedDerivationPath:R}})),u=(p,$)=>{const{signTx:O,signTxSmart:R,signatureByteCount:B,publicKeyByteCount:_,signAuth:F}=Vt(p),M=($==null?void 0:$.mode)==="summary"?R:O,A=kt(p.derivationPath);return{command:M,signAuthCommand:F,encodedDerivationPath:A,signatureByteCount:B,publicKeyByteCount:_}},c=p=>()=>{const $=mr(Buffer.from(p.compiledTransactionIntent,"hex"),255);if($.isErr())return ce("error chunking data");const O=$.value.map((B,_)=>{const F=B.toString("hex");return{chunk:`${Ht(F)}${F}`,instructionClass:_===$.value.length-1?Ge.ac:Ge.ab}}),R=p.displayHash?"01":"00";return ae({p1:R,apduChunks:O})},l=()=>i(p=>p(K.GetDeviceId).andThen($=>p(K.GetDeviceModel).map(O=>({id:$,model:Di[O]})))),S=p=>i($=>$(K.GetDeviceId).andThen(a(p.ledgerDevice.id)).andThen(d(p)).andThen(O=>(s("Getting public keys..."),O.reduce((R,{getPublicKey:B,encodedDerivationPath:_,curve:F,derivationPath:M})=>R.andThen(A=>$(B,_).map(j=>[...A,{publicKey:j,derivationPath:M,curve:F}])),we([]))))),m=p=>i($=>$(K.GetDeviceId).andThen(a(p.ledgerDevice.id)).map(()=>fr(p)).andThen(({challengeData:O})=>p.signers.reduce((R,B,_)=>R.andThen(F=>{s(`Gathering ${_+1} out of ${p.signers.length} signatures`);const{signAuthCommand:M,signatureByteCount:A,publicKeyByteCount:j,encodedDerivationPath:$e}=u(B);return $(M,$e).andThen(()=>$(M,O,{instructionClass:Ge.ac})).andThen(J=>{const oe=J.slice(A*2,A*2+j*2),U=J.slice(0,A*2);return ae({signature:U,publicKey:oe})}).map(({signature:J,publicKey:oe})=>{const U={derivedPublicKey:{...B,publicKey:oe},signature:J};return[...F,U]})}),we([])))),q=p=>i($=>$(K.GetDeviceId).andThen(a(p.ledgerDevice.id)).andThen(c(p)).andThen(({p1:O,apduChunks:R})=>p.signers.reduce((B,_,F)=>{const{command:M,signatureByteCount:A,publicKeyByteCount:j,encodedDerivationPath:$e}=u(_,p),J=32*2;return B.andThen(oe=>(s(`Gathering ${F+1} out of ${p.signers.length} signatures`),$(M,$e,{p1:O}).andThen(()=>R.reduce((U,{chunk:f,instructionClass:h})=>U.andThen(()=>$(M,f,{instructionClass:h,p1:O})),we(""))).andThen(U=>{if(U.length-J!==(A+j)*2)return le.error(`Result length is ${U.length} whereas it should be (signature) ${A} bytes * 2 + (publicKey) ${j} bytes * 2 + digest length: ${J}`),ce("Result containing signature and PublicKey has incorrect length.");const f=U.slice(0,A*2),h=A*2,v=U.slice(h,h+2*j);return f.length!==A*2?(le.error(`Signature length is ${f.length} whereas it should be ${A} bytes * 2`),ce("Signature has incorrect length.")):v.length!==j*2?(le.error(`Public Key length is ${v.length} whereas it should be ${j} bytes * 2`),ce("PublicKey has incorrect length.")):ae({signature:f,publicKey:v})}).map(U=>[...oe,{signature:U.signature,derivedPublicKey:{publicKey:U.publicKey,derivationPath:_.derivationPath,curve:_.curve}}])))},we([]))));return{signAuth:p=>(n=p.interactionId,m(p)),getPublicKeys:p=>(n=p.interactionId,S(p)),getDeviceInfo:p=>(n=p.interactionId,l()),signTransaction:p=>(n=p.interactionId,q(p)),getLastInteractionId:()=>n,progress$:e.onProgressSubject.asObservable()}},ye=wi({}),Ci="/assets/icon-hardware-ledger.cd101655.svg";var Ee="/home/runner/work/connector-extension/connector-extension/src/ledger/components/ledger-device-box.tsx";const Pi={nanoS:"Nano S","nanoS+":"Nano S+",nanoX:"Nano X"},_i=t=>L(he,{style:{display:"flex",width:"387px",padding:"23px 34px",flexDirection:"column",justifyContent:"center",alignItems:"center",gap:"8px",borderRadius:"12px",background:"#F4F5F9",boxShadow:"0px 6.720985412597656px 16px 0px rgba(0, 0, 0, 0.25)"},children:L(he,{items:"center",justify:"start",full:!0,style:{gap:"30px"},children:[L("img",{src:Ci},void 0,!1,{fileName:Ee,lineNumber:26,columnNumber:7},void 0),L(he,{textAlign:"left",children:[L(ne,{size:"large",bold:!0,color:"radixGrey1",children:t.name},void 0,!1,{fileName:Ee,lineNumber:29,columnNumber:9},void 0),L(ne,{size:"large",color:"radixGrey2",children:Pi[t.model]},void 0,!1,{fileName:Ee,lineNumber:32,columnNumber:9},void 0)]},void 0,!0,{fileName:Ee,lineNumber:28,columnNumber:7},void 0)]},void 0,!0,{fileName:Ee,lineNumber:25,columnNumber:5},void 0)},void 0,!1,{fileName:Ee,lineNumber:11,columnNumber:3},void 0),Fi="/assets/retry.ee49cb8d.svg";var X="/home/runner/work/connector-extension/connector-extension/src/ledger/components/ledger-mask.tsx";const Kt=t=>{const{header:e,onRetry:r,ledgerDevice:n,error:s}=t,o=()=>n?L(he,{style:{margin:"0 auto 28px",display:"inline-block"},children:L(_i,{...n},void 0,!1,{fileName:X,lineNumber:18,columnNumber:9},void 0)},void 0,!1,{fileName:X,lineNumber:17,columnNumber:7},void 0):null,i=()=>s?L(he,{px:"large",py:"large",radius:"small",textAlign:"left",flex:"row",items:"center",style:{border:"1px dashed var(--colors-radixGrey2)",gap:"40px"},children:[L(he,{children:[L(ne,{size:"2xl",bold:!0,mb:"md",children:s},void 0,!1,{fileName:X,lineNumber:36,columnNumber:11},void 0),L("ol",{style:{marginLeft:"0",paddingInlineStart:"20px"},children:[L("li",{children:"Connect one Ledger device to this computer via USB."},void 0,!1,{fileName:X,lineNumber:41,columnNumber:13},void 0),L("li",{children:"Unlock it with your PIN and open the \u201CRadix Babylon\u201D app on it."},void 0,!1,{fileName:X,lineNumber:42,columnNumber:13},void 0),L("li",{children:" Click retry here."},void 0,!1,{fileName:X,lineNumber:45,columnNumber:13},void 0)]},void 0,!0,{fileName:X,lineNumber:40,columnNumber:11},void 0)]},void 0,!0,{fileName:X,lineNumber:35,columnNumber:9},void 0),L(qt,{onClick:r,children:[L("img",{src:Fi},void 0,!1,{fileName:X,lineNumber:49,columnNumber:11},void 0),"Retry"]},void 0,!0,{fileName:X,lineNumber:48,columnNumber:9},void 0)]},void 0,!0,{fileName:X,lineNumber:26,columnNumber:7},void 0):null;return L(pr,{children:[L(ne,{color:"radixGrey1",size:"4xl",mt:"lg",mb:"md",children:e},void 0,!1,{fileName:X,lineNumber:57,columnNumber:7},void 0),L(he,{mb:"lg",children:t.children},void 0,!1,{fileName:X,lineNumber:60,columnNumber:7},void 0),o(),i()]},void 0,!0,{fileName:X,lineNumber:56,columnNumber:5},void 0)};var Z="/home/runner/work/connector-extension/connector-extension/src/ledger/views/ledger.tsx";const sr={[V.MultipleLedgerConnected]:"Multiple Devices Found",[V.UnlockDevice]:"Ledger Device Locked",[V.BadIns]:"Radix Babylon app is not opened",[V.NoDevicesConnected]:"No Device Found",[V.FailedToListLedgerDevices]:"No Device Found",[V.FailedToCreateTransport]:"No Device Found",[V.FailedToExchangeData]:"Restart Babylon app on Ledger device",[V.DeviceMismatch]:"Wrong Device Connected"},Ui=t=>Object.keys(sr).includes(t),Gi=t=>(t==null?void 0:t.discriminator)==="walletToLedger"&&(t==null?void 0:t.source)==="background",Bi={[P.getDeviceInfo]:()=>({header:"Ledger Connection Request",content:P.getDeviceInfo,ledgerDevice:void 0,requestFunction:ye.getDeviceInfo}),[P.derivePublicKeys]:t=>({header:"Ledger Connection Request",content:P.derivePublicKeys,ledgerDevice:t.ledgerDevice,requestFunction:ye.getPublicKeys}),[P.signTransaction]:t=>({header:"Ledger Signing Request",content:P.signTransaction,ledgerDevice:t.ledgerDevice,requestFunction:ye.signTransaction}),[P.signChallenge]:t=>({header:"Ledger Signing Request",content:P.signChallenge,ledgerDevice:t.ledgerDevice,requestFunction:ye.signAuth})},Mi=()=>{const[t,e]=pe.exports.useState(),[r,n]=pe.exports.useState(),[s,o]=pe.exports.useState(),[i,a]=pe.exports.useState(),d=l=>{Ae(De.ledgerResponse(l)).map(()=>window.close())},u=l=>{if(l===P.getDeviceInfo)return L(cr,{children:[L(ne,{children:["Connect the ",L("strong",{children:"Ledger S, S+"},void 0,!1,{fileName:Z,lineNumber:97,columnNumber:25},void 0),", or"," ",L("strong",{children:"Nano X"},void 0,!1,{fileName:Z,lineNumber:98,columnNumber:13},void 0)," hardware wallet device you want to connect to your Radix Wallet."]},void 0,!0,{fileName:Z,lineNumber:96,columnNumber:11},void 0),!r&&L(qt,{mt:"2xl",px:"2xl",onClick:()=>{i==null||i.requestFunction(s==null?void 0:s.data).then(c)},children:"Continue"},void 0,!1,{fileName:Z,lineNumber:103,columnNumber:13},void 0)]},void 0,!0);if(l===P.derivePublicKeys)return L(ne,{children:"Connect the following hardware wallet device to create an account."},void 0,!1,{fileName:Z,lineNumber:121,columnNumber:9},void 0);if([P.signTransaction,P.signChallenge].includes(l))return L(ne,{children:"Connect the following hardware wallet device to sign."},void 0,!1,{fileName:Z,lineNumber:133,columnNumber:14},void 0)},c=async l=>{var S;if(!!(s!=null&&s.data)){if(l.isErr()){if(Ui(l.error)){Ae(De.focusLedgerTab()),n((S=sr[l.error])!=null?S:l.error);return}d(ur(s.data,l.error));return}if(l.isOk()&&s!=null&&s.data){const m=hr(s.data,l.value);d(m)}}};return pe.exports.useEffect(()=>{const l=new or,S=m=>{if(Gi(m)){if(n(void 0),Ae(De.confirmationSuccess("ledger",m.messageId)),m.data.interactionId===(s==null?void 0:s.data.interactionId))return;[P.signChallenge,P.signTransaction,P.getDeviceInfo].includes(m.data.discriminator)&&Ae(De.focusLedgerTab()),o(m),a(Bi[m.data.discriminator](m.data))}};return l.add(ye.progress$.subscribe(m=>e(m))),chrome.runtime.onMessage.addListener(S),()=>{l.unsubscribe(),chrome.runtime.onMessage.removeListener(S)}},[]),pe.exports.useEffect(()=>{i&&s&&s.data.discriminator!==P.getDeviceInfo&&i.requestFunction(s.data).then(c)},[i,s]),L(ar,{content:"start",items:"center",children:t?L(Kt,{header:"Ledger Request Sent",children:L(ne,{children:"Please review the request on your connected Ledger device."},void 0,!1,{fileName:Z,lineNumber:221,columnNumber:11},void 0)},void 0,!1,{fileName:Z,lineNumber:220,columnNumber:9},void 0):L(Kt,{header:i==null?void 0:i.header,error:r||"",onRetry:()=>i==null?void 0:i.requestFunction(s==null?void 0:s.data).then(c),ledgerDevice:i==null?void 0:i.ledgerDevice,children:u(i==null?void 0:i.content)},void 0,!1,{fileName:Z,lineNumber:226,columnNumber:9},void 0)},void 0,!1,{fileName:Z,lineNumber:218,columnNumber:5},void 0)};var ji="/home/runner/work/connector-extension/connector-extension/src/ledger/main.tsx";lr.createRoot(document.getElementById("root")).render(L(Mi,{},void 0,!1,{fileName:ji,lineNumber:6,columnNumber:62},globalThis));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
