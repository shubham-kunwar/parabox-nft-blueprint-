import{d as m,c as D,S as vt,w as v}from"./Subject.c67f7ae3.js";import{R as d,o as P,a as W,b as H,e as wt}from"./index.es.095da3c8.js";import{g as bt}from"./get-connection-password.e42f6d71.js";import{c as Rt}from"./schemas.bc1c5361.js";import{s as xt}from"./send-message.6e0479e0.js";import{c as j,o as kt,s as J,t as M}from"./switchMap.deec5196.js";import{m as S,d as qt,f as Pt,b as Ct}from"./first.9e6ac58d.js";import{c as G}from"./chrome-notifications.9a7bcb9c.js";import{a as Tt,b as Et}from"./index.7642f900.js";import{M as Ft}from"./message-client.0e26c204.js";import"./chrome-local-store.60de0fbe.js";const It=t=>d.fromPromise(chrome.windows.remove(t),e=>e),z=()=>d.fromPromise(chrome.storage.session.get("popupId"),t=>t).map(t=>t.popupId),X=()=>z().andThen(t=>t?It(t):P(!0)),St="/assets/content-script.ts-loader.d1bdbac4.js";let k;async function Nt(){const t=chrome.runtime.getURL(m.offscreen.url),e=await clients.matchAll();for(const n of e)if(n.url===t)return;await chrome.offscreen.hasDocument()||(k?await k:(k=chrome.offscreen.createDocument({url:t,reasons:[chrome.offscreen.Reason.WEB_RTC],justification:"Keep WebRTC connection with mobile wallet"}),await k,k=null))}const At=()=>d.fromPromise(chrome.windows.getCurrent(),t=>t),Dt=(t,{left:e=0,width:n,height:a,top:r=0})=>d.fromPromise(new Promise(i=>{chrome.windows.create({url:chrome.runtime.getURL(t),type:"popup",width:m.popup.width,height:m.popup.height,top:a!==void 0?r+m.popup.offsetTop:void 0,left:n!==void 0?n+e-m.popup.width:void 0},i)}),i=>i),Vt=t=>d.fromPromise(t?chrome.windows.update(t,{focused:!0}):Promise.reject(Error("popupId not provided")),e=>e),F=t=>d.fromPromise(new Promise(e=>{chrome.tabs.query({},n=>{e(n.filter(a=>{var r;return(r=a.url)==null?void 0:r.includes(`${chrome.runtime.id}/${t}`)}))})}),e=>e),Lt=t=>d.fromPromise(chrome.storage.session.set({popupId:t}),e=>e),Y=()=>F(m.popup.pages.pairing).andThen(t=>W(t.length>0)).andThen(t=>At().andThen(({width:e,left:n,height:a,top:r})=>t?z().andThen(Vt):Dt(m.popup.pages.pairing,{width:e,left:n,height:a,top:r}).andThen(i=>Lt(i==null?void 0:i.id)))),q={setItem:t=>d.fromPromise(chrome.storage.session.set(t),e=>e),removeItem:t=>d.fromPromise(chrome.storage.session.remove(t),e=>e),getItem:t=>d.fromPromise(chrome.storage.session.get(t),e=>e),setSingleItem:(t,e)=>d.fromPromise(chrome.storage.session.set({[t]:e}),n=>n),getSingleItem:t=>d.fromPromise(chrome.storage.session.get(t).then(e=>e[t]),e=>e)},Z=()=>({getCurrentlyWatched:()=>q.getSingleItem("watchedTab").mapErr(()=>({reason:"failedToGetWatchedTab"})),setWatchedTab:(t,e)=>q.setSingleItem("watchedTab",{tabId:t,request:e}),triggerTabRemoval:async t=>{const e=await q.getSingleItem("watchedTab");if(e.isErr()||!e.value)return;const{tabId:n,request:a}=e.value;!n||t!==n||(xt(D.ledgerResponse(Rt(a,"tabClosed"))),q.setSingleItem("watchedTab",{}))},restoreInitial:()=>q.setSingleItem("watchedTab",{})}),Q=(t,e={})=>d.fromSafePromise(new Promise(n=>{chrome.tabs.create({url:t,...e},async a=>{const r=(i,o)=>{o.status==="complete"&&i===a.id&&(chrome.tabs.onUpdated.removeListener(r),n(a))};chrome.tabs.onUpdated.addListener(r)})})),Ut=t=>F(t).andThen(e=>e.length>0&&e[0].id?P(e[0]):Q(t,{active:!1})),Ot=t=>F(t).andThen(e=>e.length>0&&e[0].id?jt(e[0].id):H("no tab found")),jt=t=>d.fromPromise(chrome.tabs.update(t,{active:!0}),e=>e);var Mt=Object.defineProperty,Gt=(t,e,n)=>e in t?Mt(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,y=(t,e,n)=>(Gt(t,typeof e!="symbol"?e+"":e,n),n);const Bt="https://rcnet-v2.radixdlt.com".replace(/\/+$/,"");class tt{constructor(e={}){this.configuration=e}set config(e){this.configuration=e}get basePath(){return this.configuration.basePath!=null?this.configuration.basePath:Bt}get fetchApi(){return this.configuration.fetchApi}get middleware(){return this.configuration.middleware||[]}get queryParamsStringify(){return this.configuration.queryParamsStringify||et}get username(){return this.configuration.username}get password(){return this.configuration.password}get apiKey(){const e=this.configuration.apiKey;if(e)return typeof e=="function"?e:()=>e}get accessToken(){const e=this.configuration.accessToken;if(e)return typeof e=="function"?e:async()=>e}get headers(){return this.configuration.headers}get credentials(){return this.configuration.credentials}}const Kt=new tt;class I{constructor(e=Kt){y(this,"middleware"),y(this,"fetchApi",async(n,a)=>{let r={url:n,init:a};for(const o of this.middleware)o.pre&&(r=await o.pre({fetch:this.fetchApi,...r})||r);let i;try{i=await(this.configuration.fetchApi||fetch)(r.url,r.init)}catch(o){for(const l of this.middleware)l.onError&&(i=await l.onError({fetch:this.fetchApi,url:r.url,init:r.init,error:o,response:i?i.clone():void 0})||i);if(i===void 0)throw o}for(const o of this.middleware)o.post&&(i=await o.post({fetch:this.fetchApi,url:r.url,init:r.init,response:i.clone()})||i);return i}),this.configuration=e,this.middleware=e.middleware}withMiddleware(...e){const n=this.clone();return n.middleware=n.middleware.concat(...e),n}withPreMiddleware(...e){const n=e.map(a=>({pre:a}));return this.withMiddleware(...n)}withPostMiddleware(...e){const n=e.map(a=>({post:a}));return this.withMiddleware(...n)}async request(e,n){const{url:a,init:r}=await this.createFetchParams(e,n),i=await this.fetchApi(a,r);if(i&&i.status>=200&&i.status<300)return i;throw await T.from(i)}async createFetchParams(e,n){let a=this.configuration.basePath+e.path;e.query!==void 0&&Object.keys(e.query).length!==0&&(a+="?"+this.configuration.queryParamsStringify(e.query));const r=Object.assign({},this.configuration.headers,e.headers);Object.keys(r).forEach(h=>r[h]===void 0?delete r[h]:{});const i=typeof n=="function"?n:async()=>n,o={method:e.method,headers:r,body:e.body,credentials:this.configuration.credentials},l={...o,...await i({init:o,context:e})},f={...l,body:Wt(l.body)||l.body instanceof URLSearchParams||$t(l.body)?l.body:JSON.stringify(l.body)};return{url:a,init:f}}clone(){const e=this.constructor,n=new e(this.configuration);return n.middleware=this.middleware.slice(),n}}function $t(t){return typeof Blob<"u"&&t instanceof Blob}function Wt(t){return typeof FormData<"u"&&t instanceof FormData}class T extends Error{constructor(e,n,a){super(a?JSON.stringify(a):"Unknown error occurred"),y(this,"name","ResponseError"),this.fetchResponse=e,this.status=n,this.errorResponse=a}static async from(e){const n=e.status;try{const a=await e.json();return new T(e,n,a)}catch{return new T(e,n,void 0)}}}class _ extends Error{constructor(e,n){super(n),y(this,"name","RequiredError"),this.field=e}}function s(t,e){return t[e]!=null}function et(t,e=""){return Object.keys(t).map(n=>nt(n,t[n],e)).filter(n=>n.length>0).join("&")}function nt(t,e,n=""){const a=n+(n.length?`[${t}]`:t);if(e instanceof Array){const r=e.map(i=>encodeURIComponent(String(i))).join(`&${encodeURIComponent(a)}=`);return`${encodeURIComponent(a)}=${r}`}if(e instanceof Set){const r=Array.from(e);return nt(t,r,n)}return e instanceof Date?`${encodeURIComponent(a)}=${encodeURIComponent(e.toISOString())}`:e instanceof Object?et(e,a):`${encodeURIComponent(a)}=${encodeURIComponent(String(e))}`}class c{constructor(e,n=a=>a){this.raw=e,this.transformer=n}async value(){return this.transformer(await this.raw.json())}}function g(t){if(t!==void 0)return t===null?null:{state_version:t.state_version,timestamp:t.timestamp===void 0?void 0:t.timestamp===null?null:t.timestamp.toISOString(),epoch:t.epoch,round:t.round}}function Ht(t){return Jt(t)}function Jt(t,e){return t==null?t:{status:s(t,"status")?t.status:void 0,fee_summary:s(t,"fee_summary")?t.fee_summary:void 0,state_updates:s(t,"state_updates")?t.state_updates:void 0,next_epoch:s(t,"next_epoch")?t.next_epoch:void 0,output:s(t,"output")?t.output:void 0,events:s(t,"events")?t.events:void 0,error_message:s(t,"error_message")?t.error_message:void 0}}function V(t){return zt(t)}function zt(t,e){return t}function at(t){return Xt(t)}function Xt(t,e){return t==null?t:{state_version:t.state_version,epoch:t.epoch,round:t.round,round_timestamp:t.round_timestamp,transaction_status:V(t.transaction_status),payload_hash_hex:s(t,"payload_hash_hex")?t.payload_hash_hex:void 0,intent_hash_hex:s(t,"intent_hash_hex")?t.intent_hash_hex:void 0,fee_paid:s(t,"fee_paid")?t.fee_paid:void 0,affected_global_entities:s(t,"affected_global_entities")?t.affected_global_entities:void 0,confirmed_at:s(t,"confirmed_at")?t.confirmed_at===null?null:new Date(t.confirmed_at):void 0,error_message:s(t,"error_message")?t.error_message:void 0,raw_hex:s(t,"raw_hex")?t.raw_hex:void 0,receipt:s(t,"receipt")?Ht(t.receipt):void 0,message_hex:s(t,"message_hex")?t.message_hex:void 0}}function L(t){return Yt(t)}function Yt(t,e){return t==null?t:{owner:t.owner,entries:t.entries}}function Zt(t,e){return t==null?t:{type:t.type,values:t.values}}function Qt(t,e){return t==null?t:{type:t.type,value:t.value}}function te(t,e){return t==null?t:{type:t.type,values:t.values}}function ee(t,e){return t==null?t:{type:t.type,value:t.value}}function ne(t,e){return t==null?t:{type:t.type,values:t.values}}function ae(t,e){return t==null?t:{type:t.type,value:t.value}}function re(t,e){return t==null?t:{type:t.type,values:t.values}}function se(t,e){return t==null?t:{type:t.type,value:t.value}}function ie(t,e){return t==null?t:{type:t.type,values:t.values}}function oe(t,e){return t==null?t:{type:t.type,value:t.value}}function ue(t,e){return t==null?t:{type:t.type,values:t.values}}function le(t,e){return t==null?t:{type:t.type,value:t.value}}function ce(t){return de(t)}function de(t,e){return t==null?t:{resource_address:t.resource_address,non_fungible_id:t.non_fungible_id}}function _e(t,e){return t==null?t:{type:t.type,values:t.values.map(ce)}}function pe(t,e){return t==null?t:{type:t.type,resource_address:t.resource_address,non_fungible_id:t.non_fungible_id}}function ge(t,e){return t==null?t:{type:t.type,values:t.values}}function fe(t,e){return t==null?t:{type:t.type,value:t.value}}function me(t,e){return t==null?t:{type:t.type,values:t.values}}function he(t,e){return t==null?t:{type:t.type,value:t.value}}function ye(t,e){return t==null?t:{key_type:t.key_type,key_hex:t.key_hex}}function ve(t){if(t!==void 0)return t===null?null:{key_type:t.key_type,key_hex:t.key_hex}}function we(t,e){return t==null?t:{key_type:t.key_type,key_hex:t.key_hex}}function be(t){if(t!==void 0)return t===null?null:{key_type:t.key_type,key_hex:t.key_hex}}function U(t){return Re(t)}function Re(t,e){if(t==null)return t;switch(t.key_type){case"EcdsaSecp256k1":return{...ye(t),key_type:"EcdsaSecp256k1"};case"EddsaEd25519":return{...we(t),key_type:"EddsaEd25519"};default:throw new Error(`No variant of PublicKey exists with 'key_type=${t.key_type}'`)}}function B(t){if(t!==void 0){if(t===null)return null;switch(t.key_type){case"EcdsaSecp256k1":return ve(t);case"EddsaEd25519":return be(t);default:throw new Error(`No variant of PublicKey exists with 'key_type=${t.key_type}'`)}}}function xe(t,e){return t==null?t:{type:t.type,values:t.values.map(U)}}function ke(t,e){return t==null?t:{key_hash_type:t.key_hash_type,hash_hex:t.hash_hex}}function qe(t,e){return t==null?t:{key_hash_type:t.key_hash_type,hash_hex:t.hash_hex}}function rt(t){return Pe(t)}function Pe(t,e){if(t==null)return t;switch(t.key_hash_type){case"EcdsaSecp256k1":return{...ke(t),key_hash_type:"EcdsaSecp256k1"};case"EddsaEd25519":return{...qe(t),key_hash_type:"EddsaEd25519"};default:throw new Error(`No variant of PublicKeyHash exists with 'key_hash_type=${t.key_hash_type}'`)}}function Ce(t,e){return t==null?t:{type:t.type,values:t.values.map(rt)}}function Te(t,e){return t==null?t:{type:t.type,value:rt(t.value)}}function Ee(t,e){return t==null?t:{type:t.type,value:U(t.value)}}function Fe(t,e){return t==null?t:{type:t.type,values:t.values}}function Ie(t,e){return t==null?t:{type:t.type,value:t.value}}function Se(t,e){return t==null?t:{type:t.type,values:t.values}}function Ne(t,e){return t==null?t:{type:t.type,value:t.value}}function Ae(t,e){return t==null?t:{type:t.type,values:t.values}}function De(t,e){return t==null?t:{type:t.type,value:t.value}}function Ve(t,e){return t==null?t:{type:t.type,value_hex:t.value_hex}}function Le(t,e){return t==null?t:{type:t.type,value:t.value}}function Ue(t,e){return t==null?t:{type:t.type,values:t.values}}function Oe(t,e){return t==null?t:{type:t.type,value:t.value}}function je(t){return Me(t)}function Me(t,e){if(t==null)return t;switch(t.type){case"Bool":return{...Qt(t),type:"Bool"};case"BoolArray":return{...Zt(t),type:"BoolArray"};case"Decimal":return{...ee(t),type:"Decimal"};case"DecimalArray":return{...te(t),type:"DecimalArray"};case"GlobalAddress":return{...ae(t),type:"GlobalAddress"};case"GlobalAddressArray":return{...ne(t),type:"GlobalAddressArray"};case"I32":return{...se(t),type:"I32"};case"I32Array":return{...re(t),type:"I32Array"};case"I64":return{...oe(t),type:"I64"};case"I64Array":return{...ie(t),type:"I64Array"};case"Instant":return{...le(t),type:"Instant"};case"InstantArray":return{...ue(t),type:"InstantArray"};case"NonFungibleGlobalId":return{...pe(t),type:"NonFungibleGlobalId"};case"NonFungibleGlobalIdArray":return{..._e(t),type:"NonFungibleGlobalIdArray"};case"NonFungibleLocalId":return{...fe(t),type:"NonFungibleLocalId"};case"NonFungibleLocalIdArray":return{...ge(t),type:"NonFungibleLocalIdArray"};case"Origin":return{...he(t),type:"Origin"};case"OriginArray":return{...me(t),type:"OriginArray"};case"PublicKey":return{...Ee(t),type:"PublicKey"};case"PublicKeyArray":return{...xe(t),type:"PublicKeyArray"};case"PublicKeyHash":return{...Te(t),type:"PublicKeyHash"};case"PublicKeyHashArray":return{...Ce(t),type:"PublicKeyHashArray"};case"String":return{...Ie(t),type:"String"};case"StringArray":return{...Fe(t),type:"StringArray"};case"U32":return{...Ne(t),type:"U32"};case"U32Array":return{...Se(t),type:"U32Array"};case"U64":return{...De(t),type:"U64"};case"U64Array":return{...Ae(t),type:"U64Array"};case"U8":return{...Le(t),type:"U8"};case"U8Array":return{...Ve(t),type:"U8Array"};case"Url":return{...Oe(t),type:"Url"};case"UrlArray":return{...Ue(t),type:"UrlArray"};default:throw new Error(`No variant of MetadataTypedValue exists with 'type=${t.type}'`)}}function Ge(t){return Be(t)}function Be(t,e){return t==null?t:{raw_hex:t.raw_hex,raw_json:t.raw_json,typed:s(t,"typed")?je(t.typed):void 0}}function st(t){return Ke(t)}function Ke(t,e){return t==null?t:{key:t.key,value:Ge(t.value),is_locked:t.is_locked,last_updated_at_state_version:t.last_updated_at_state_version}}function b(t){return $e(t)}function $e(t,e){return t==null?t:{total_count:s(t,"total_count")?t.total_count:void 0,previous_cursor:s(t,"previous_cursor")?t.previous_cursor:void 0,next_cursor:s(t,"next_cursor")?t.next_cursor:void 0,items:t.items.map(st)}}function We(t,e){return t==null?t:{aggregation_level:t.aggregation_level,resource_address:t.resource_address,explicit_metadata:s(t,"explicit_metadata")?b(t.explicit_metadata):void 0,amount:t.amount,last_updated_at_state_version:t.last_updated_at_state_version}}function it(t){return He(t)}function He(t,e){return t==null?t:{vault_address:t.vault_address,amount:t.amount,last_updated_at_state_version:t.last_updated_at_state_version}}function Je(t){return ze(t)}function ze(t,e){return t==null?t:{total_count:s(t,"total_count")?t.total_count:void 0,previous_cursor:s(t,"previous_cursor")?t.previous_cursor:void 0,next_cursor:s(t,"next_cursor")?t.next_cursor:void 0,items:t.items.map(it)}}function Xe(t,e){return t==null?t:{aggregation_level:t.aggregation_level,resource_address:t.resource_address,explicit_metadata:s(t,"explicit_metadata")?b(t.explicit_metadata):void 0,vaults:Je(t.vaults)}}function ot(t){return Ye(t)}function Ye(t,e){if(t==null)return t;switch(t.aggregation_level){case"Global":return{...We(t),aggregation_level:"Global"};case"Vault":return{...Xe(t),aggregation_level:"Vault"};default:throw new Error(`No variant of FungibleResourcesCollectionItem exists with 'aggregation_level=${t.aggregation_level}'`)}}function Ze(t){return Qe(t)}function Qe(t,e){return t==null?t:{total_count:s(t,"total_count")?t.total_count:void 0,previous_cursor:s(t,"previous_cursor")?t.previous_cursor:void 0,next_cursor:s(t,"next_cursor")?t.next_cursor:void 0,items:t.items.map(ot)}}const tn={Global:"Global",Vault:"Vault"};function en(t){return nn(t)}function nn(t,e){return t==null?t:{release_version:t.release_version,open_api_schema_version:t.open_api_schema_version,image_tag:t.image_tag}}function p(t){return an(t)}function an(t,e){return t==null?t:{network:t.network,state_version:t.state_version,proposer_round_timestamp:t.proposer_round_timestamp,epoch:t.epoch,round:t.round}}function rn(t){return sn(t)}function sn(t,e){return t==null?t:{ledger_state:p(t.ledger_state),release_info:en(t.release_info)}}function on(t){return un(t)}function un(t,e){return t==null?t:{xrd:t.xrd,secp256k1_signature_virtual_badge:t.secp256k1_signature_virtual_badge,ed25519_signature_virtual_badge:t.ed25519_signature_virtual_badge,package_of_direct_caller_virtual_badge:t.package_of_direct_caller_virtual_badge,global_caller_virtual_badge:t.global_caller_virtual_badge,system_transaction_badge:t.system_transaction_badge,package_owner_badge:t.package_owner_badge,validator_owner_badge:t.validator_owner_badge,account_owner_badge:t.account_owner_badge,identity_owner_badge:t.identity_owner_badge,package_package:t.package_package,resource_package:t.resource_package,account_package:t.account_package,identity_package:t.identity_package,consensus_manager_package:t.consensus_manager_package,access_controller_package:t.access_controller_package,transaction_processor_package:t.transaction_processor_package,metadata_module_package:t.metadata_module_package,royalty_module_package:t.royalty_module_package,access_rules_package:t.access_rules_package,genesis_helper_package:t.genesis_helper_package,faucet_package:t.faucet_package,consensus_manager:t.consensus_manager,genesis_helper:t.genesis_helper,faucet:t.faucet}}function ln(t){return cn(t)}function cn(t,e){return t==null?t:{network_id:t.network_id,network_name:t.network_name,well_known_addresses:on(t.well_known_addresses)}}function ut(t){return dn(t)}function dn(t,e){return t}function _n(t){return pn(t)}function pn(t,e){return t==null?t:{total_count:s(t,"total_count")?t.total_count:void 0,previous_cursor:s(t,"previous_cursor")?t.previous_cursor:void 0,next_cursor:s(t,"next_cursor")?t.next_cursor:void 0,items:t.items}}function gn(t,e){return t==null?t:{aggregation_level:t.aggregation_level,resource_address:t.resource_address,explicit_metadata:s(t,"explicit_metadata")?b(t.explicit_metadata):void 0,amount:t.amount,last_updated_at_state_version:t.last_updated_at_state_version}}function lt(t){return fn(t)}function fn(t,e){return t==null?t:{total_count:t.total_count,previous_cursor:s(t,"previous_cursor")?t.previous_cursor:void 0,next_cursor:s(t,"next_cursor")?t.next_cursor:void 0,items:s(t,"items")?t.items:void 0,vault_address:t.vault_address,last_updated_at_state_version:t.last_updated_at_state_version}}function mn(t){return hn(t)}function hn(t,e){return t==null?t:{total_count:s(t,"total_count")?t.total_count:void 0,previous_cursor:s(t,"previous_cursor")?t.previous_cursor:void 0,next_cursor:s(t,"next_cursor")?t.next_cursor:void 0,items:t.items.map(lt)}}function yn(t,e){return t==null?t:{aggregation_level:t.aggregation_level,resource_address:t.resource_address,explicit_metadata:s(t,"explicit_metadata")?b(t.explicit_metadata):void 0,vaults:mn(t.vaults)}}function ct(t){return vn(t)}function vn(t,e){if(t==null)return t;switch(t.aggregation_level){case"Global":return{...gn(t),aggregation_level:"Global"};case"Vault":return{...yn(t),aggregation_level:"Vault"};default:throw new Error(`No variant of NonFungibleResourcesCollectionItem exists with 'aggregation_level=${t.aggregation_level}'`)}}function wn(t){return bn(t)}function bn(t,e){return t==null?t:{total_count:s(t,"total_count")?t.total_count:void 0,previous_cursor:s(t,"previous_cursor")?t.previous_cursor:void 0,next_cursor:s(t,"next_cursor")?t.next_cursor:void 0,items:t.items.map(ct)}}function Rn(t){return xn(t)}function xn(t,e){return t}function kn(t){return qn(t)}function qn(t,e){return t==null?t:{raw_hex:t.raw_hex,raw_json:t.raw_json}}function Pn(t){if(t!==void 0)return t===null?null:{ancestor_identities:t.ancestor_identities,component_royalty_vault_balance:t.component_royalty_vault_balance,package_royalty_vault_balance:t.package_royalty_vault_balance,non_fungible_include_nfids:t.non_fungible_include_nfids,explicit_metadata:t.explicit_metadata}}function Cn(t){if(t!==void 0)return t===null?null:{at_ledger_state:g(t.at_ledger_state),opt_ins:Pn(t.opt_ins),addresses:t.addresses,aggregation_level:t.aggregation_level}}function Tn(t){return En(t)}function En(t,e){return t==null?t:{parent_address:s(t,"parent_address")?t.parent_address:void 0,owner_address:s(t,"owner_address")?t.owner_address:void 0,global_address:s(t,"global_address")?t.global_address:void 0}}function Fn(t,e){return t==null?t:{type:t.type,package_address:s(t,"package_address")?t.package_address:void 0,blueprint_name:t.blueprint_name,state:s(t,"state")?t.state:void 0,access_rules:L(t.access_rules),royalty_vault_balance:s(t,"royalty_vault_balance")?t.royalty_vault_balance:void 0}}function In(t,e){return t==null?t:{type:t.type,access_rules:L(t.access_rules),divisibility:t.divisibility,total_supply:t.total_supply,total_minted:t.total_minted,total_burned:t.total_burned}}function Sn(t,e){return t==null?t:{type:t.type}}function Nn(t,e){return t==null?t:{type:t.type,access_rules:L(t.access_rules),non_fungible_id_type:ut(t.non_fungible_id_type),total_supply:t.total_supply,total_minted:t.total_minted,total_burned:t.total_burned}}function An(t,e){return t==null?t:{type:t.type}}function Dn(t){return Vn(t)}function Vn(t,e){return t==null?t:{name:t.name,version:t.version,definition:t.definition,dependant_entities:s(t,"dependant_entities")?t.dependant_entities:void 0,auth_template:s(t,"auth_template")?t.auth_template:void 0,auth_template_is_locked:s(t,"auth_template_is_locked")?t.auth_template_is_locked:void 0,royalty_config:s(t,"royalty_config")?t.royalty_config:void 0,royalty_config_is_locked:s(t,"royalty_config_is_locked")?t.royalty_config_is_locked:void 0}}function Ln(t){return Un(t)}function Un(t,e){return t==null?t:{total_count:s(t,"total_count")?t.total_count:void 0,previous_cursor:s(t,"previous_cursor")?t.previous_cursor:void 0,next_cursor:s(t,"next_cursor")?t.next_cursor:void 0,items:t.items.map(Dn)}}function On(t,e){return t==null?t:{type:t.type,vm_type:Rn(t.vm_type),code_hash_hex:t.code_hash_hex,code_hex:s(t,"code_hex")?t.code_hex:void 0,schema_hash_hex:t.schema_hash_hex,schema:s(t,"schema")?t.schema:void 0,royalty_vault_balance:s(t,"royalty_vault_balance")?t.royalty_vault_balance:void 0,blueprints:s(t,"blueprints")?Ln(t.blueprints):void 0}}function jn(t){return Mn(t)}function Mn(t,e){if(t==null)return t;switch(t.type){case"Component":return{...Fn(t),type:"Component"};case"FungibleResource":return{...In(t),type:"FungibleResource"};case"FungibleVault":return{...Sn(t),type:"FungibleVault"};case"NonFungibleResource":return{...Nn(t),type:"NonFungibleResource"};case"NonFungibleVault":return{...An(t),type:"NonFungibleVault"};case"Package":return{...On(t),type:"Package"};default:throw new Error(`No variant of StateEntityDetailsResponseItemDetails exists with 'type=${t.type}'`)}}function Gn(t){return Bn(t)}function Bn(t,e){return t==null?t:{address:t.address,fungible_resources:s(t,"fungible_resources")?Ze(t.fungible_resources):void 0,non_fungible_resources:s(t,"non_fungible_resources")?wn(t.non_fungible_resources):void 0,ancestor_identities:s(t,"ancestor_identities")?Tn(t.ancestor_identities):void 0,metadata:b(t.metadata),explicit_metadata:s(t,"explicit_metadata")?b(t.explicit_metadata):void 0,details:s(t,"details")?jn(t.details):void 0}}function Kn(t){return $n(t)}function $n(t,e){return t==null?t:{ledger_state:p(t.ledger_state),items:t.items.map(Gn)}}function Wn(t){if(t!==void 0)return t===null?null:{at_ledger_state:g(t.at_ledger_state),cursor:t.cursor,limit_per_page:t.limit_per_page,address:t.address,resource_address:t.resource_address}}function Hn(t){return Jn(t)}function Jn(t,e){return t==null?t:{ledger_state:p(t.ledger_state),total_count:s(t,"total_count")?t.total_count:void 0,previous_cursor:s(t,"previous_cursor")?t.previous_cursor:void 0,next_cursor:s(t,"next_cursor")?t.next_cursor:void 0,items:t.items.map(it),address:t.address,resource_address:t.resource_address}}function zn(t){if(t!==void 0)return t===null?null:{explicit_metadata:t.explicit_metadata}}function Xn(t){if(t!==void 0)return t===null?null:{at_ledger_state:g(t.at_ledger_state),cursor:t.cursor,limit_per_page:t.limit_per_page,address:t.address,aggregation_level:t.aggregation_level,opt_ins:zn(t.opt_ins)}}function Yn(t){return Zn(t)}function Zn(t,e){return t==null?t:{ledger_state:p(t.ledger_state),total_count:s(t,"total_count")?t.total_count:void 0,previous_cursor:s(t,"previous_cursor")?t.previous_cursor:void 0,next_cursor:s(t,"next_cursor")?t.next_cursor:void 0,items:t.items.map(ot),address:t.address}}function Qn(t){if(t!==void 0)return t===null?null:{at_ledger_state:g(t.at_ledger_state),cursor:t.cursor,limit_per_page:t.limit_per_page,address:t.address}}function ta(t){return ea(t)}function ea(t,e){return t==null?t:{ledger_state:p(t.ledger_state),total_count:s(t,"total_count")?t.total_count:void 0,previous_cursor:s(t,"previous_cursor")?t.previous_cursor:void 0,next_cursor:s(t,"next_cursor")?t.next_cursor:void 0,items:t.items.map(st),address:t.address}}function na(t){if(t!==void 0)return t===null?null:{at_ledger_state:g(t.at_ledger_state),cursor:t.cursor,limit_per_page:t.limit_per_page,address:t.address,vault_address:t.vault_address,resource_address:t.resource_address}}function aa(t){return ra(t)}function ra(t,e){return t==null?t:{ledger_state:p(t.ledger_state),total_count:s(t,"total_count")?t.total_count:void 0,previous_cursor:s(t,"previous_cursor")?t.previous_cursor:void 0,next_cursor:s(t,"next_cursor")?t.next_cursor:void 0,items:t.items,address:t.address,resource_address:t.resource_address}}function sa(t){if(t!==void 0)return t===null?null:{non_fungible_include_nfids:t.non_fungible_include_nfids}}function ia(t){if(t!==void 0)return t===null?null:{at_ledger_state:g(t.at_ledger_state),cursor:t.cursor,limit_per_page:t.limit_per_page,address:t.address,resource_address:t.resource_address,opt_ins:sa(t.opt_ins)}}function oa(t){return ua(t)}function ua(t,e){return t==null?t:{ledger_state:p(t.ledger_state),total_count:s(t,"total_count")?t.total_count:void 0,previous_cursor:s(t,"previous_cursor")?t.previous_cursor:void 0,next_cursor:s(t,"next_cursor")?t.next_cursor:void 0,items:t.items.map(lt),address:t.address,resource_address:t.resource_address}}function la(t){if(t!==void 0)return t===null?null:{non_fungible_include_nfids:t.non_fungible_include_nfids,explicit_metadata:t.explicit_metadata}}function ca(t){if(t!==void 0)return t===null?null:{at_ledger_state:g(t.at_ledger_state),cursor:t.cursor,limit_per_page:t.limit_per_page,address:t.address,aggregation_level:t.aggregation_level,opt_ins:la(t.opt_ins)}}function da(t){return _a(t)}function _a(t,e){return t==null?t:{ledger_state:p(t.ledger_state),total_count:s(t,"total_count")?t.total_count:void 0,previous_cursor:s(t,"previous_cursor")?t.previous_cursor:void 0,next_cursor:s(t,"next_cursor")?t.next_cursor:void 0,items:t.items.map(ct),address:t.address}}function pa(t){if(t!==void 0)return t===null?null:{at_ledger_state:g(t.at_ledger_state),resource_address:t.resource_address,non_fungible_ids:t.non_fungible_ids}}function ga(t){return fa(t)}function fa(t,e){return t==null?t:{non_fungible_id:t.non_fungible_id,data:kn(t.data),last_updated_at_state_version:t.last_updated_at_state_version}}function ma(t){return ha(t)}function ha(t,e){return t==null?t:{ledger_state:p(t.ledger_state),resource_address:t.resource_address,non_fungible_id_type:ut(t.non_fungible_id_type),non_fungible_ids:t.non_fungible_ids.map(ga)}}function ya(t){if(t!==void 0)return t===null?null:{at_ledger_state:g(t.at_ledger_state),cursor:t.cursor,limit_per_page:t.limit_per_page,resource_address:t.resource_address}}function va(t){return wa(t)}function wa(t,e){return t==null?t:{ledger_state:p(t.ledger_state),resource_address:t.resource_address,non_fungible_ids:_n(t.non_fungible_ids)}}function ba(t){if(t!==void 0)return t===null?null:{at_ledger_state:g(t.at_ledger_state),cursor:t.cursor}}function Ra(t){return xa(t)}function xa(t,e){return t==null?t:{stake:t.stake,stake_percentage:t.stake_percentage,key:U(t.key)}}function C(t){return ka(t)}function ka(t,e){return t==null?t:{balance:t.balance,last_changed_at_state_version:t.last_changed_at_state_version,address:t.address}}function qa(t){return Pa(t)}function Pa(t,e){return t==null?t:{address:t.address,stake_vault:C(t.stake_vault),pending_xrd_withdraw_vault:C(t.pending_xrd_withdraw_vault),locked_owner_stake_unit_vault:C(t.locked_owner_stake_unit_vault),pending_owner_stake_unit_unlock_vault:C(t.pending_owner_stake_unit_unlock_vault),state:s(t,"state")?t.state:void 0,active_in_epoch:s(t,"active_in_epoch")?Ra(t.active_in_epoch):void 0,metadata:b(t.metadata)}}function Ca(t){return Ta(t)}function Ta(t,e){return t==null?t:{total_count:s(t,"total_count")?t.total_count:void 0,previous_cursor:s(t,"previous_cursor")?t.previous_cursor:void 0,next_cursor:s(t,"next_cursor")?t.next_cursor:void 0,items:t.items.map(qa)}}function Ea(t){return Fa(t)}function Fa(t,e){return t==null?t:{ledger_state:p(t.ledger_state),validators:Ca(t.validators)}}function Ia(t){if(t!==void 0)return t===null?null:{event:t.event,emitter_address:t.emitter_address,resource_address:t.resource_address,quantity:t.quantity}}function dt(t){if(t!==void 0)return t===null?null:{raw_hex:t.raw_hex,receipt_state_changes:t.receipt_state_changes,receipt_fee_summary:t.receipt_fee_summary,receipt_events:t.receipt_events,affected_global_entities:t.affected_global_entities}}function Sa(t){if(t!==void 0)return t===null?null:{at_ledger_state:g(t.at_ledger_state),cursor:t.cursor,limit_per_page:t.limit_per_page,from_ledger_state:g(t.from_ledger_state),kind_filter:t.kind_filter,manifest_accounts_withdrawn_from_filter:t.manifest_accounts_withdrawn_from_filter,manifest_accounts_deposited_into_filter:t.manifest_accounts_deposited_into_filter,manifest_resources_filter:t.manifest_resources_filter,affected_global_entities_filter:t.affected_global_entities_filter,events_filter:t.events_filter===void 0?void 0:t.events_filter.map(Ia),order:t.order,opt_ins:dt(t.opt_ins)}}function Na(t){return Aa(t)}function Aa(t,e){return t==null?t:{ledger_state:p(t.ledger_state),total_count:s(t,"total_count")?t.total_count:void 0,previous_cursor:s(t,"previous_cursor")?t.previous_cursor:void 0,next_cursor:s(t,"next_cursor")?t.next_cursor:void 0,items:t.items.map(at)}}function Da(t){if(t!==void 0)return t===null?null:{at_ledger_state:g(t.at_ledger_state),intent_hash_hex:t.intent_hash_hex,opt_ins:dt(t.opt_ins)}}function Va(t){return La(t)}function La(t,e){return t==null?t:{ledger_state:p(t.ledger_state),transaction:at(t.transaction)}}function Ua(t){return Oa(t)}function Oa(t,e){return t==null?t:{ledger_state:p(t.ledger_state)}}function ja(t){if(t!==void 0)return t===null?null:{use_free_credit:t.use_free_credit,assume_all_signature_proofs:t.assume_all_signature_proofs,skip_epoch_check:t.skip_epoch_check}}function Ma(t){if(t!==void 0)return t===null?null:{manifest:t.manifest,blobs_hex:t.blobs_hex,start_epoch_inclusive:t.start_epoch_inclusive,end_epoch_exclusive:t.end_epoch_exclusive,notary_public_key:B(t.notary_public_key),notary_is_signatory:t.notary_is_signatory,tip_percentage:t.tip_percentage,nonce:t.nonce,signer_public_keys:t.signer_public_keys.map(B),flags:ja(t.flags)}}function Ga(t){return Ba(t)}function Ba(t,e){return t==null?t:{level:t.level,message:t.message}}function Ka(t){return $a(t)}function $a(t,e){return t==null?t:{encoded_receipt:t.encoded_receipt,receipt:t.receipt,resource_changes:t.resource_changes,logs:t.logs.map(Ga)}}function Wa(t){if(t!==void 0)return t===null?null:{intent_hash_hex:t.intent_hash_hex}}function Ha(t){return Ja(t)}function Ja(t,e){return t==null?t:{payload_hash_hex:t.payload_hash_hex,status:V(t.status),error_message:s(t,"error_message")?t.error_message:void 0}}function za(t){return Xa(t)}function Xa(t,e){return t==null?t:{ledger_state:p(t.ledger_state),status:V(t.status),known_payloads:t.known_payloads.map(Ha),error_message:s(t,"error_message")?t.error_message:void 0}}function Ya(t){if(t!==void 0)return t===null?null:{notarized_transaction_hex:t.notarized_transaction_hex}}function Za(t){return Qa(t)}function Qa(t,e){return t==null?t:{duplicate:t.duplicate}}class tr extends I{async streamTransactionsRaw(e,n){if(e.streamTransactionsRequest===null||e.streamTransactionsRequest===void 0)throw new _("streamTransactionsRequest","Required parameter requestParameters.streamTransactionsRequest was null or undefined when calling streamTransactions.");const a={},r={};r["Content-Type"]="application/json";const i=await this.request({path:"/stream/transactions",method:"POST",headers:r,query:a,body:Sa(e.streamTransactionsRequest)},n);return new c(i,o=>Na(o))}async streamTransactions(e,n){return await(await this.streamTransactionsRaw(e,n)).value()}}class er extends I{async entityFungibleResourceVaultPageRaw(e,n){if(e.stateEntityFungibleResourceVaultsPageRequest===null||e.stateEntityFungibleResourceVaultsPageRequest===void 0)throw new _("stateEntityFungibleResourceVaultsPageRequest","Required parameter requestParameters.stateEntityFungibleResourceVaultsPageRequest was null or undefined when calling entityFungibleResourceVaultPage.");const a={},r={};r["Content-Type"]="application/json";const i=await this.request({path:"/state/entity/page/fungible-vaults/",method:"POST",headers:r,query:a,body:Wn(e.stateEntityFungibleResourceVaultsPageRequest)},n);return new c(i,o=>Hn(o))}async entityFungibleResourceVaultPage(e,n){return await(await this.entityFungibleResourceVaultPageRaw(e,n)).value()}async entityFungiblesPageRaw(e,n){if(e.stateEntityFungiblesPageRequest===null||e.stateEntityFungiblesPageRequest===void 0)throw new _("stateEntityFungiblesPageRequest","Required parameter requestParameters.stateEntityFungiblesPageRequest was null or undefined when calling entityFungiblesPage.");const a={},r={};r["Content-Type"]="application/json";const i=await this.request({path:"/state/entity/page/fungibles/",method:"POST",headers:r,query:a,body:Xn(e.stateEntityFungiblesPageRequest)},n);return new c(i,o=>Yn(o))}async entityFungiblesPage(e,n){return await(await this.entityFungiblesPageRaw(e,n)).value()}async entityMetadataPageRaw(e,n){if(e.stateEntityMetadataPageRequest===null||e.stateEntityMetadataPageRequest===void 0)throw new _("stateEntityMetadataPageRequest","Required parameter requestParameters.stateEntityMetadataPageRequest was null or undefined when calling entityMetadataPage.");const a={},r={};r["Content-Type"]="application/json";const i=await this.request({path:"/state/entity/page/metadata",method:"POST",headers:r,query:a,body:Qn(e.stateEntityMetadataPageRequest)},n);return new c(i,o=>ta(o))}async entityMetadataPage(e,n){return await(await this.entityMetadataPageRaw(e,n)).value()}async entityNonFungibleIdsPageRaw(e,n){if(e.stateEntityNonFungibleIdsPageRequest===null||e.stateEntityNonFungibleIdsPageRequest===void 0)throw new _("stateEntityNonFungibleIdsPageRequest","Required parameter requestParameters.stateEntityNonFungibleIdsPageRequest was null or undefined when calling entityNonFungibleIdsPage.");const a={},r={};r["Content-Type"]="application/json";const i=await this.request({path:"/state/entity/page/non-fungible-vault/ids",method:"POST",headers:r,query:a,body:na(e.stateEntityNonFungibleIdsPageRequest)},n);return new c(i,o=>aa(o))}async entityNonFungibleIdsPage(e,n){return await(await this.entityNonFungibleIdsPageRaw(e,n)).value()}async entityNonFungibleResourceVaultPageRaw(e,n){if(e.stateEntityNonFungibleResourceVaultsPageRequest===null||e.stateEntityNonFungibleResourceVaultsPageRequest===void 0)throw new _("stateEntityNonFungibleResourceVaultsPageRequest","Required parameter requestParameters.stateEntityNonFungibleResourceVaultsPageRequest was null or undefined when calling entityNonFungibleResourceVaultPage.");const a={},r={};r["Content-Type"]="application/json";const i=await this.request({path:"/state/entity/page/non-fungible-vaults/",method:"POST",headers:r,query:a,body:ia(e.stateEntityNonFungibleResourceVaultsPageRequest)},n);return new c(i,o=>oa(o))}async entityNonFungibleResourceVaultPage(e,n){return await(await this.entityNonFungibleResourceVaultPageRaw(e,n)).value()}async entityNonFungiblesPageRaw(e,n){if(e.stateEntityNonFungiblesPageRequest===null||e.stateEntityNonFungiblesPageRequest===void 0)throw new _("stateEntityNonFungiblesPageRequest","Required parameter requestParameters.stateEntityNonFungiblesPageRequest was null or undefined when calling entityNonFungiblesPage.");const a={},r={};r["Content-Type"]="application/json";const i=await this.request({path:"/state/entity/page/non-fungibles/",method:"POST",headers:r,query:a,body:ca(e.stateEntityNonFungiblesPageRequest)},n);return new c(i,o=>da(o))}async entityNonFungiblesPage(e,n){return await(await this.entityNonFungiblesPageRaw(e,n)).value()}async nonFungibleDataRaw(e,n){if(e.stateNonFungibleDataRequest===null||e.stateNonFungibleDataRequest===void 0)throw new _("stateNonFungibleDataRequest","Required parameter requestParameters.stateNonFungibleDataRequest was null or undefined when calling nonFungibleData.");const a={},r={};r["Content-Type"]="application/json";const i=await this.request({path:"/state/non-fungible/data",method:"POST",headers:r,query:a,body:pa(e.stateNonFungibleDataRequest)},n);return new c(i,o=>ma(o))}async nonFungibleData(e,n){return await(await this.nonFungibleDataRaw(e,n)).value()}async nonFungibleIdsRaw(e,n){if(e.stateNonFungibleIdsRequest===null||e.stateNonFungibleIdsRequest===void 0)throw new _("stateNonFungibleIdsRequest","Required parameter requestParameters.stateNonFungibleIdsRequest was null or undefined when calling nonFungibleIds.");const a={},r={};r["Content-Type"]="application/json";const i=await this.request({path:"/state/non-fungible/ids",method:"POST",headers:r,query:a,body:ya(e.stateNonFungibleIdsRequest)},n);return new c(i,o=>va(o))}async nonFungibleIds(e,n){return await(await this.nonFungibleIdsRaw(e,n)).value()}async stateEntityDetailsRaw(e,n){if(e.stateEntityDetailsRequest===null||e.stateEntityDetailsRequest===void 0)throw new _("stateEntityDetailsRequest","Required parameter requestParameters.stateEntityDetailsRequest was null or undefined when calling stateEntityDetails.");const a={},r={};r["Content-Type"]="application/json";const i=await this.request({path:"/state/entity/details",method:"POST",headers:r,query:a,body:Cn(e.stateEntityDetailsRequest)},n);return new c(i,o=>Kn(o))}async stateEntityDetails(e,n){return await(await this.stateEntityDetailsRaw(e,n)).value()}async stateValidatorsListRaw(e,n){if(e.stateValidatorsListRequest===null||e.stateValidatorsListRequest===void 0)throw new _("stateValidatorsListRequest","Required parameter requestParameters.stateValidatorsListRequest was null or undefined when calling stateValidatorsList.");const a={},r={};r["Content-Type"]="application/json";const i=await this.request({path:"/state/validators/list",method:"POST",headers:r,query:a,body:ba(e.stateValidatorsListRequest)},n);return new c(i,o=>Ea(o))}async stateValidatorsList(e,n){return await(await this.stateValidatorsListRaw(e,n)).value()}}class nr extends I{async gatewayStatusRaw(e){const n={},a={},r=await this.request({path:"/status/gateway-status",method:"POST",headers:a,query:n},e);return new c(r,i=>rn(i))}async gatewayStatus(e){return await(await this.gatewayStatusRaw(e)).value()}async networkConfigurationRaw(e){const n={},a={},r=await this.request({path:"/status/network-configuration",method:"POST",headers:a,query:n},e);return new c(r,i=>ln(i))}async networkConfiguration(e){return await(await this.networkConfigurationRaw(e)).value()}}class ar extends I{async transactionCommittedDetailsRaw(e,n){if(e.transactionCommittedDetailsRequest===null||e.transactionCommittedDetailsRequest===void 0)throw new _("transactionCommittedDetailsRequest","Required parameter requestParameters.transactionCommittedDetailsRequest was null or undefined when calling transactionCommittedDetails.");const a={},r={};r["Content-Type"]="application/json";const i=await this.request({path:"/transaction/committed-details",method:"POST",headers:r,query:a,body:Da(e.transactionCommittedDetailsRequest)},n);return new c(i,o=>Va(o))}async transactionCommittedDetails(e,n){return await(await this.transactionCommittedDetailsRaw(e,n)).value()}async transactionConstructionRaw(e){const n={},a={},r=await this.request({path:"/transaction/construction",method:"POST",headers:a,query:n},e);return new c(r,i=>Ua(i))}async transactionConstruction(e){return await(await this.transactionConstructionRaw(e)).value()}async transactionPreviewRaw(e,n){if(e.transactionPreviewRequest===null||e.transactionPreviewRequest===void 0)throw new _("transactionPreviewRequest","Required parameter requestParameters.transactionPreviewRequest was null or undefined when calling transactionPreview.");const a={},r={};r["Content-Type"]="application/json";const i=await this.request({path:"/transaction/preview",method:"POST",headers:r,query:a,body:Ma(e.transactionPreviewRequest)},n);return new c(i,o=>Ka(o))}async transactionPreview(e,n){return await(await this.transactionPreviewRaw(e,n)).value()}async transactionStatusRaw(e,n){if(e.transactionStatusRequest===null||e.transactionStatusRequest===void 0)throw new _("transactionStatusRequest","Required parameter requestParameters.transactionStatusRequest was null or undefined when calling transactionStatus.");const a={},r={};r["Content-Type"]="application/json";const i=await this.request({path:"/transaction/status",method:"POST",headers:r,query:a,body:Wa(e.transactionStatusRequest)},n);return new c(i,o=>za(o))}async transactionStatus(e,n){return await(await this.transactionStatusRaw(e,n)).value()}async transactionSubmitRaw(e,n){if(e.transactionSubmitRequest===null||e.transactionSubmitRequest===void 0)throw new _("transactionSubmitRequest","Required parameter requestParameters.transactionSubmitRequest was null or undefined when calling transactionSubmit.");const a={},r={};r["Content-Type"]="application/json";const i=await this.request({path:"/transaction/submit",method:"POST",headers:r,query:a,body:Ya(e.transactionSubmitRequest)},n);return new c(i,o=>Za(o))}async transactionSubmit(e,n){return await(await this.transactionSubmitRaw(e,n)).value()}}const K=(t,e)=>{const n=[];for(let a=0,r=t.length;a<r;a+=e)n.push(t.slice(a,a+e));return n},N=async(t,e)=>{let n=e;const a=[];do{const r=await t(n);a.push(...r.items),n=r.next_cursor}while(n);return a};class rr{constructor(e,n){this.innerClient=e,this.configuration=n}async getEntityDetailsVaultAggregated(e,n){var a,r,i,o,l;const f=Array.isArray(e);if(f&&e.length===0)return Promise.resolve([]);if(f&&e.length>this.configuration.maxAddressesCount){const R=K(e,this.configuration.maxAddressesCount);return Promise.all(R.map(u=>this.getEntityDetailsVaultAggregated(u))).then(u=>u.flat())}const{items:h}=await this.innerClient.stateEntityDetails({stateEntityDetailsRequest:{addresses:f?e:[e],aggregation_level:tn.Vault,opt_ins:{ancestor_identities:(a=n==null?void 0:n.ancestorIdentities)!=null?a:!1,component_royalty_vault_balance:(r=n==null?void 0:n.componentRoyaltyVaultBalance)!=null?r:!1,package_royalty_vault_balance:(i=n==null?void 0:n.packageRoyaltyVaultBalance)!=null?i:!1,non_fungible_include_nfids:(o=n==null?void 0:n.nonFungibleIncludeNfids)!=null?o:!0,explicit_metadata:(l=n==null?void 0:n.explicitMetadata)!=null?l:[]}}});return f?h:h[0]}async getEntityMetadata(e,n){return this.innerClient.entityMetadataPage({stateEntityMetadataPageRequest:{address:e,cursor:n}})}async getAllEntityMetadata(e,n){return N(this.getEntityMetadata.bind(this,e),n)}async getValidators(e){return this.innerClient.stateValidatorsList({stateValidatorsListRequest:{cursor:e||null}}).then(({validators:n})=>n)}async getAllValidators(e){return N(this.getValidators.bind(this),e)}async getNonFungibleIds(e,n){return this.innerClient.nonFungibleIds({stateNonFungibleIdsRequest:{resource_address:e,cursor:n}}).then(({non_fungible_ids:a})=>a)}async getAllNonFungibleIds(e,n){return N(this.getNonFungibleIds.bind(this,e),n)}async getNonFungibleData(e,n){const a=Array.isArray(n);if(a&&n.length===0)return Promise.resolve([]);if(a&&n.length>this.configuration.maxNftIdsCount){const i=K(n,this.configuration.maxNftIdsCount);return Promise.all(i.map(o=>this.getNonFungibleData(e,o))).then(o=>o.flat())}const{non_fungible_ids:r}=await this.innerClient.nonFungibleData({stateNonFungibleDataRequest:{resource_address:e,non_fungible_ids:a?n:[n]}});return a?r:r[0]}}class sr{constructor(e){this.innerClient=e}getCurrent(){return this.innerClient.gatewayStatus()}getNetworkConfiguration(){return this.innerClient.networkConfiguration()}}class ir{constructor(e){this.innerClient=e}getTransactionsList(e,n){return this.innerClient.streamTransactions({streamTransactionsRequest:{cursor:n,affected_global_entities_filter:e}})}}class or{constructor(e){this.innerClient=e}getStatus(e){return this.innerClient.transactionStatus({transactionStatusRequest:{intent_hash_hex:e}})}getCommittedDetails(e,n){var a,r,i,o,l;return this.innerClient.transactionCommittedDetails({transactionCommittedDetailsRequest:{intent_hash_hex:e,opt_ins:{raw_hex:(a=n==null?void 0:n.rawHex)!=null?a:!0,receipt_events:(r=n==null?void 0:n.receiptEvents)!=null?r:!0,receipt_fee_summary:(i=n==null?void 0:n.receiptFeeSummary)!=null?i:!0,receipt_state_changes:(o=n==null?void 0:n.receiptStateChanges)!=null?o:!0,affected_global_entities:(l=n==null?void 0:n.affectedGlobalEntities)!=null?l:!0}}})}}const ur=20,lr=29;class cr extends tt{constructor(e){super(e),y(this,"extendedConfiguration"),this.extendedConfiguration=e}get maxAddressesCount(){return this.extendedConfiguration.maxAddressesCount||ur}get maxNftIdsCount(){return this.extendedConfiguration.maxNftIdsCount||lr}}const dr=t=>t?t.endsWith("/")?t==null?void 0:t.slice(0,-1):t:"",w={Mainnet:1,Stokenet:2,Alphanet:10,Betanet:11,Kisharnet:12,Ansharnet:13,Gilganet:32,Enkinet:33,Hammunet:34,Nergalnet:35,Mardunet:36,LocalNet:240,InternalTestNet:241,Simulator:242,RCnetV1:12,RCnetV2:13},_r={Kisharnet:{networkName:"Kisharnet",networkId:w.Kisharnet,gatewayUrl:"https://kisharnet-gateway.radixdlt.com",dashboardUrl:"https://kisharnet-dashboard.radixdlt.com"},Ansharnet:{networkName:"Ansharnet",networkId:w.Ansharnet,gatewayUrl:"https://ansharnet-gateway.radixdlt.com",dashboardUrl:"https://ansharnet-dashboard.radixdlt.com"},Gilganet:{networkName:"Gilganet",networkId:w.Gilganet,gatewayUrl:"https://gilganet-gateway.radixdlt.com",dashboardUrl:""},Enkinet:{networkName:"Enkinet",networkId:w.Enkinet,gatewayUrl:"https://enkinet-gateway.radixdlt.com",dashboardUrl:"https://enkinet-dashboard.rdx-works-main.extratools.works"},Hammunet:{networkName:"Hammunet",networkId:w.Hammunet,gatewayUrl:"https://hammunet-gateway.radixdlt.com:443",dashboardUrl:"https://hammunet-dashboard.rdx-works-main.extratools.works"},RCnetV1:{networkName:"RCnetV1",networkId:w.RCnetV1,gatewayUrl:"https://rcnet.radixdlt.com",dashboardUrl:"https://rcnet-dashboard.radixdlt.com"},RCnetV2:{networkName:"RCNetV2",networkId:w.RCnetV2,gatewayUrl:"https://ansharnet-gateway.radixdlt.com",dashboardUrl:"https://rcnet-v2-dashboard.radixdlt.com"}},_t=Object.values(_r).reduce((t,e)=>(t[e.networkId]=e,t),{});class E{constructor(e){y(this,"state"),y(this,"stream"),y(this,"status"),y(this,"transaction"),y(this,"lowLevel"),this.lowLevel={state:new er(e),stream:new tr(e),status:new nr(e),transaction:new ar(e)},this.state=new rr(this.lowLevel.state,e),this.stream=new ir(this.lowLevel.stream),this.status=new sr(this.lowLevel.status),this.transaction=new or(this.lowLevel.transaction)}static initialize(e){const n=E.constructConfiguration(e);return new E(n)}static constructConfiguration(e){var n;const a=dr(e==null?void 0:e.basePath);return new cr({...e,basePath:a,headers:{...(n=e==null?void 0:e.headers)!=null?n:{},...e!=null&&e.dAppDefinitionAddress?{"dapp-definition-address":e.dAppDefinitionAddress}:{}}})}}const pr=({maxDelayTime:t=1e4,multiplier:e=3,timeout:n,interval:a=1e3}={})=>{const r=new vt;let i=0;const o=j(kt(0),r.pipe(S(()=>(i=i+1,i)))).pipe(J(f=>{const h=f*a*e,R=h>t?t:h;return M(R).pipe(S(()=>W(f)))})),l=n?j(o,M(n).pipe(S(()=>wt(Error("failedToPollSubmittedTransaction"))))):o;return{trigger:r,withBackoff$:l}},gr=({gatewayApi:t,retryConfig:e})=>({pollTransactionStatus:a=>{const r=pr(e),i=new Set(["CommittedSuccess","CommittedFailure","Rejected"]);return d.fromPromise(qt(r.withBackoff$.pipe(J(o=>o.isErr()?[o]:d.fromPromise(t.transaction.getStatus(a).then(l=>{if(i.has(l.status))return l;r.trigger.next()}),l=>l).mapErr(l=>Error("failedToPollSubmittedTransaction"))),Pt(o=>o.isOk()&&!!o.value||o.isErr()),Ct())),o=>o).andThen(o=>o)},gatewayApi:t}),fr=t=>gr({gatewayApi:E.initialize({basePath:_t[t].gatewayUrl})}),pt="transaction",gt="___",$={request:({items:t})=>{Tt().map(e=>{if(!e||t.discriminator==="cancelRequest")return;const n=t.discriminator==="transaction"?"transaction":t.discriminator==="unauthorizedRequest"||t.discriminator==="authorizedRequest"&&t.auth.discriminator==="usePersona"?"dataRequest":"loginRequest",a={loginRequest:{title:"Login Request Pending",message:"Open your Radix Wallet app to login"},dataRequest:{title:"Data Request Pending",message:"Open your Radix Wallet app to review the request"},transaction:{title:"Transaction Request Pending",message:"Open your Radix Wallet app to review the transaction"}};G(void 0,a[n].title,a[n].message)})},transaction:(t,e,n)=>{Et().map(a=>{if(!a)return;const r=n==="CommittedSuccess"?"Transaction Successful":"Transaction Failed";G([pt,t,e].join(gt),r,"View more info on the Radix Dashboard",[{title:"View"}])})}},mr=({logger:t,ledgerTabWatcher:e=Z(),getConnectionPassword:n=bt,closePopup:a=X,openParingPopup:r=Y})=>(i,o)=>{var l,f,h,R;switch(i.discriminator){case v.getConnectionPassword:return n().mapErr(u=>({reason:"failedToGetConnectionPassword",jsError:u})).map(u=>({sendConfirmation:!0,data:{connectionPassword:u}}));case v.detectWalletLink:return n().andThen(u=>u?a().map(()=>!!u):r().map(()=>!!u)).map(u=>({sendConfirmation:!0,data:{isLinked:u}})).mapErr(u=>({reason:"failedToDetectWalletLink",jsError:u}));case v.sendMessageToTab:return o({...i.data,source:"background"},i.tabId).map(()=>({sendConfirmation:!0}));case v.closeLedgerTab:return e.getCurrentlyWatched().andThen(u=>{if(!u||!u.tabId)return P({sendConfirmation:!0});const{tabId:x}=u;return e.restoreInitial().andThen(()=>d.fromPromise(chrome.tabs.remove(x),()=>({reason:"failedToCloseLedgerTab"})).map(()=>({sendConfirmation:!1})))}).mapErr(()=>({reason:"failedToCloseLedgerTab"}));case v.focusLedgerTab:return Ot(m.popup.pages.ledger).map(()=>({sendConfirmation:!1})).mapErr(()=>({reason:"failedToFocusLedgerTab"}));case v.walletResponse:{if(((f=(l=i.data)==null?void 0:l.items)==null?void 0:f.discriminator)==="transaction"){const u=i.data.items.send.transactionIntentHash,x=((R=(h=i.data)==null?void 0:h.metadata)==null?void 0:R.networkId)||w.Ansharnet;t==null||t.debug("\u{1F501} Polling",{txIntentHash:u,networkId:x}),fr(x).pollTransactionStatus(u).map(yt=>{$.transaction(x,u,yt.status)})}return P({sendConfirmation:!1})}case v.dAppRequest:return n().map(u=>{u&&$.request(i.data)}),P({sendConfirmation:!1});case v.walletToLedger:return e.restoreInitial().andThen(()=>Ut(m.popup.pages.ledger).andThen(u=>e.setWatchedTab(u.id,i.data).map(()=>u)).andThen(u=>o({...i,source:"background"},u.id)).map(()=>({sendConfirmation:!1})).mapErr(()=>({reason:"failedToOpenLedgerTab"}))).mapErr(()=>({reason:"failedRestoringTabWatcher"}));default:return H({reason:"unhandledMessageDiscriminator"})}},hr=t=>Q(t).map(e=>chrome.tabs.update(e.id,{active:!0})),A={debug:(...t)=>console.log(JSON.stringify(t,null,2))},yr=async()=>{for(const t of await chrome.tabs.query({}))try{t.id&&await chrome.scripting.executeScript({target:{tabId:t.id},files:[St]})}catch{}},vr=t=>{var e;if(t.connectionPassword)return wr((e=t.connectionPassword)==null?void 0:e.newValue)},ft=Z(),O=Ft(mr({logger:A,ledgerTabWatcher:ft}),"background",{logger:A}),wr=t=>O.sendMessageAndWaitForConfirmation(D.setConnectionPassword("background",t)).map(()=>{setTimeout(()=>{X()},m.popup.closeDelayTime)}),mt=t=>{if(t.startsWith(pt)){const[,e,n]=t.split(gt);hr(`${_t[Number(e)].dashboardUrl}/transaction/${n}`)}},ht=t=>{ft.triggerTabRemoval(t),O.sendMessageAndWaitForConfirmation(D.closeDappTab("background",t))};chrome.tabs.onUpdated.addListener((t,e)=>{e.status==="loading"&&!e.url&&ht(t)});chrome.runtime.onMessage.addListener((t,e)=>{var n;O.onMessage(t,(n=e.tab)==null?void 0:n.id)});chrome.tabs.onRemoved.addListener(ht);chrome.notifications.onClicked.addListener(mt);chrome.notifications.onButtonClicked.addListener(mt);chrome.storage.onChanged.addListener(vr);chrome.action.onClicked.addListener(Y);chrome.runtime.onInstalled.addListener(yr);chrome.runtime.onStartup.addListener(()=>{A.debug("onStartup")});Nt();const br=async()=>{const t=chrome.runtime.getURL(m.devTools.url),e=await F(m.devTools.url);if(e.isErr())return;const[n]=e.value;n!=null&&n.id?await chrome.tabs.update(n.id,{active:!0}):await chrome.tabs.create({url:t})};chrome.contextMenus.removeAll(()=>{chrome.contextMenus.create({id:"radix-dev-tools",title:"Radix Dev Tools",contexts:["all"]}),chrome.contextMenus.onClicked.addListener(async()=>br())});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
