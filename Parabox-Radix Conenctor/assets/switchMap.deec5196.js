import{_ as d,a as C,e as A,f as w,v as L,g as v,O as l,i as R}from"./Subject.c67f7ae3.js";import{g as q,o as p,c as h,e as u,i as s,h as D,r as M,j as N,k as F,l as j,n as G,p as V,q as Y,s as $,a as z,E as B}from"./first.9e6ac58d.js";var H=function(e){d(t,e);function t(n,r){return e.call(this)||this}return t.prototype.schedule=function(n,r){return this},t}(C),f={setInterval:function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i=f.delegate;return i!=null&&i.setInterval?i.setInterval.apply(i,A([e,t],w(n))):setInterval.apply(void 0,A([e,t],w(n)))},clearInterval:function(e){var t=f.delegate;return((t==null?void 0:t.clearInterval)||clearInterval)(e)},delegate:void 0},J=function(e){d(t,e);function t(n,r){var i=e.call(this,n,r)||this;return i.scheduler=n,i.work=r,i.pending=!1,i}return t.prototype.schedule=function(n,r){var i;if(r===void 0&&(r=0),this.closed)return this;this.state=n;var o=this.id,a=this.scheduler;return o!=null&&(this.id=this.recycleAsyncId(a,o,r)),this.pending=!0,this.delay=r,this.id=(i=this.id)!==null&&i!==void 0?i:this.requestAsyncId(a,this.id,r),this},t.prototype.requestAsyncId=function(n,r,i){return i===void 0&&(i=0),f.setInterval(n.flush.bind(n,this),i)},t.prototype.recycleAsyncId=function(n,r,i){if(i===void 0&&(i=0),i!=null&&this.delay===i&&this.pending===!1)return r;r!=null&&f.clearInterval(r)},t.prototype.execute=function(n,r){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var i=this._execute(n,r);if(i)return i;this.pending===!1&&this.id!=null&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},t.prototype._execute=function(n,r){var i=!1,o;try{this.work(n)}catch(a){i=!0,o=a||new Error("Scheduled action threw falsy error")}if(i)return this.unsubscribe(),o},t.prototype.unsubscribe=function(){if(!this.closed){var n=this,r=n.id,i=n.scheduler,o=i.actions;this.work=this.state=this.scheduler=null,this.pending=!1,L(o,this),r!=null&&(this.id=this.recycleAsyncId(i,r,null)),this.delay=null,e.prototype.unsubscribe.call(this)}},t}(H),x=function(){function e(t,n){n===void 0&&(n=e.now),this.schedulerActionCtor=t,this.now=n}return e.prototype.schedule=function(t,n,r){return n===void 0&&(n=0),new this.schedulerActionCtor(this,t).schedule(r,n)},e.now=q.now,e}(),K=function(e){d(t,e);function t(n,r){r===void 0&&(r=x.now);var i=e.call(this,n,r)||this;return i.actions=[],i._active=!1,i}return t.prototype.flush=function(n){var r=this.actions;if(this._active){r.push(n);return}var i;this._active=!0;do if(i=n.execute(n.state,n.delay))break;while(n=r.shift());if(this._active=!1,i){for(;n=r.shift();)n.unsubscribe();throw i}},t}(x),Q=new K(J),T=Q;function S(e){return e&&v(e.schedule)}function y(e){return e[e.length-1]}function ue(e){return v(y(e))?e.pop():void 0}function k(e){return S(y(e))?e.pop():void 0}function U(e,t){return typeof y(e)=="number"?e.pop():t}function b(e,t){return t===void 0&&(t=0),p(function(n,r){n.subscribe(h(r,function(i){return u(r,e,function(){return r.next(i)},t)},function(){return u(r,e,function(){return r.complete()},t)},function(i){return u(r,e,function(){return r.error(i)},t)}))})}function E(e,t){return t===void 0&&(t=0),p(function(n,r){r.add(e.schedule(function(){return n.subscribe(r)},t))})}function W(e,t){return s(e).pipe(E(t),b(t))}function X(e,t){return s(e).pipe(E(t),b(t))}function Z(e,t){return new l(function(n){var r=0;return t.schedule(function(){r===e.length?n.complete():(n.next(e[r++]),n.closed||this.schedule())})})}function ee(e,t){return new l(function(n){var r;return u(n,t,function(){r=e[D](),u(n,t,function(){var i,o,a;try{i=r.next(),o=i.value,a=i.done}catch(c){n.error(c);return}a?n.complete():n.next(o)},0,!0)}),function(){return v(r==null?void 0:r.return)&&r.return()}})}function _(e,t){if(!e)throw new Error("Iterable cannot be null");return new l(function(n){u(n,t,function(){var r=e[Symbol.asyncIterator]();u(n,t,function(){r.next().then(function(i){i.done?n.complete():n.next(i.value)})},0,!0)})})}function te(e,t){return _(M(e),t)}function ne(e,t){if(e!=null){if(N(e))return W(e,t);if(F(e))return Z(e,t);if(j(e))return X(e,t);if(G(e))return _(e,t);if(V(e))return ee(e,t);if(Y(e))return te(e,t)}throw $(e)}function O(e,t){return t?ne(e,t):s(e)}function se(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=k(e);return O(e,n)}function re(e){return e instanceof Date&&!isNaN(e)}function ie(e){return e===void 0&&(e=1/0),z(R,e)}function ce(e,t,n){e===void 0&&(e=0),n===void 0&&(n=T);var r=-1;return t!=null&&(S(t)?n=t:r=t),new l(function(i){var o=re(e)?+e-n.now():e;o<0&&(o=0);var a=0;return n.schedule(function(){i.closed||(i.next(a++),0<=r?this.schedule(void 0,r):i.complete())},o)})}function fe(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=k(e),r=U(e,1/0),i=e;return i.length?i.length===1?s(i[0]):ie(r)(O(i,n)):B}function le(e,t){return p(function(n,r){var i=null,o=0,a=!1,c=function(){return a&&!i&&r.complete()};n.subscribe(h(r,function(m){i==null||i.unsubscribe();var P=0,g=o++;s(e(m,g)).subscribe(i=h(r,function(I){return r.next(t?t(m,I,g,P++):I)},function(){i=null,c()}))},function(){a=!0,c()}))})}export{ue as a,Q as b,fe as c,O as f,ie as m,se as o,k as p,le as s,ce as t};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
