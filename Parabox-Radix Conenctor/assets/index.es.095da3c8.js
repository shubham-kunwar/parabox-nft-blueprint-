function _(n,r,t,o){function i(e){return e instanceof t?e:new t(function(a){a(e)})}return new(t||(t=Promise))(function(e,a){function f(s){try{u(o.next(s))}catch(d){a(d)}}function m(s){try{u(o.throw(s))}catch(d){a(d)}}function u(s){s.done?e(s.value):i(s.value).then(f,m)}u((o=o.apply(n,r||[])).next())})}function b(n,r){var t={label:0,sent:function(){if(e[0]&1)throw e[1];return e[1]},trys:[],ops:[]},o,i,e,a;return a={next:f(0),throw:f(1),return:f(2)},typeof Symbol=="function"&&(a[Symbol.iterator]=function(){return this}),a;function f(u){return function(s){return m([u,s])}}function m(u){if(o)throw new TypeError("Generator is already executing.");for(;t;)try{if(o=1,i&&(e=u[0]&2?i.return:u[0]?i.throw||((e=i.return)&&e.call(i),0):i.next)&&!(e=e.call(i,u[1])).done)return e;switch(i=0,e&&(u=[u[0]&2,e.value]),u[0]){case 0:case 1:e=u;break;case 4:return t.label++,{value:u[1],done:!1};case 5:t.label++,i=u[1],u=[0];continue;case 7:u=t.ops.pop(),t.trys.pop();continue;default:if(e=t.trys,!(e=e.length>0&&e[e.length-1])&&(u[0]===6||u[0]===2)){t=0;continue}if(u[0]===3&&(!e||u[1]>e[0]&&u[1]<e[3])){t.label=u[1];break}if(u[0]===6&&t.label<e[1]){t.label=e[1],e=u;break}if(e&&t.label<e[2]){t.label=e[2],t.ops.push(u);break}e[2]&&t.ops.pop(),t.trys.pop();continue}u=r.call(n,t)}catch(s){u=[6,s],i=0}finally{o=e=0}if(u[0]&5)throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}}function w(n,r){var t=typeof Symbol=="function"&&n[Symbol.iterator];if(!t)return n;var o=t.call(n),i,e=[],a;try{for(;(r===void 0||r-- >0)&&!(i=o.next()).done;)e.push(i.value)}catch(f){a={error:f}}finally{try{i&&!i.done&&(t=o.return)&&t.call(o)}finally{if(a)throw a.error}}return e}function p(n,r,t){if(t||arguments.length===2)for(var o=0,i=r.length,e;o<i;o++)(e||!(o in r))&&(e||(e=Array.prototype.slice.call(r,0,o)),e[o]=r[o]);return n.concat(e||Array.prototype.slice.call(r))}var S={withStackTrace:!1},A=function(n,r,t){t===void 0&&(t=S);var o=r.isOk()?{type:"Ok",value:r.value}:{type:"Err",value:r.error},i=t.withStackTrace?new Error().stack:void 0;return{data:o,message:n,stack:i}},v=function(){function n(r){this._promise=r}return n.fromSafePromise=function(r){var t=r.then(function(o){return new c(o)});return new n(t)},n.fromPromise=function(r,t){var o=r.then(function(i){return new c(i)}).catch(function(i){return new l(t(i))});return new n(o)},n.combine=function(r){return g(r)},n.combineWithAllErrors=function(r){return x(r)},n.prototype.map=function(r){var t=this;return new n(this._promise.then(function(o){return _(t,void 0,void 0,function(){var i;return b(this,function(e){switch(e.label){case 0:return o.isErr()?[2,new l(o.error)]:(i=c.bind,[4,r(o.value)]);case 1:return[2,new(i.apply(c,[void 0,e.sent()]))]}})})}))},n.prototype.mapErr=function(r){var t=this;return new n(this._promise.then(function(o){return _(t,void 0,void 0,function(){var i;return b(this,function(e){switch(e.label){case 0:return o.isOk()?[2,new c(o.value)]:(i=l.bind,[4,r(o.error)]);case 1:return[2,new(i.apply(l,[void 0,e.sent()]))]}})})}))},n.prototype.andThen=function(r){return new n(this._promise.then(function(t){if(t.isErr())return new l(t.error);var o=r(t.value);return o instanceof n?o._promise:o}))},n.prototype.orElse=function(r){var t=this;return new n(this._promise.then(function(o){return _(t,void 0,void 0,function(){return b(this,function(i){return o.isErr()?[2,r(o.error)]:[2,new c(o.value)]})})}))},n.prototype.match=function(r,t){return this._promise.then(function(o){return o.match(r,t)})},n.prototype.unwrapOr=function(r){return this._promise.then(function(t){return t.unwrapOr(r)})},n.prototype.then=function(r,t){return this._promise.then(r,t)},n}(),R=function(n){return new v(Promise.resolve(new c(n)))},k=function(n){return new v(Promise.resolve(new l(n)))};v.fromPromise;v.fromSafePromise;var P=function(n){return function(r){return p(p([],w(r),!1),[n],!1)}},O=function(n){return n.reduce(function(r,t){return r.isOk()?t.isErr()?y(t.error):r.map(P(t.value)):r},h([]))},g=function(n){return v.fromSafePromise(Promise.all(n)).andThen(O)},T=function(n){return n.reduce(function(r,t){return t.isErr()?r.isErr()?y(p(p([],w(r.error),!1),[t.error],!1)):y([t.error]):r.isErr()?r:h(p(p([],w(r.value),!1),[t.value],!1))},h([]))},x=function(n){return v.fromSafePromise(Promise.all(n)).andThen(T)},E;(function(n){function r(i,e){return function(){for(var a=[],f=0;f<arguments.length;f++)a[f]=arguments[f];try{var m=i.apply(void 0,p([],w(a),!1));return h(m)}catch(u){return y(e?e(u):u)}}}n.fromThrowable=r;function t(i){return O(i)}n.combine=t;function o(i){return T(i)}n.combineWithAllErrors=o})(E||(E={}));var h=function(n){return new c(n)},y=function(n){return new l(n)},c=function(){function n(r){this.value=r}return n.prototype.isOk=function(){return!0},n.prototype.isErr=function(){return!this.isOk()},n.prototype.map=function(r){return h(r(this.value))},n.prototype.mapErr=function(r){return h(this.value)},n.prototype.andThen=function(r){return r(this.value)},n.prototype.orElse=function(r){return h(this.value)},n.prototype.asyncAndThen=function(r){return r(this.value)},n.prototype.asyncMap=function(r){return v.fromSafePromise(r(this.value))},n.prototype.unwrapOr=function(r){return this.value},n.prototype.match=function(r,t){return r(this.value)},n.prototype._unsafeUnwrap=function(r){return this.value},n.prototype._unsafeUnwrapErr=function(r){throw A("Called `_unsafeUnwrapErr` on an Ok",this,r)},n}(),l=function(){function n(r){this.error=r}return n.prototype.isOk=function(){return!1},n.prototype.isErr=function(){return!this.isOk()},n.prototype.map=function(r){return y(this.error)},n.prototype.mapErr=function(r){return y(r(this.error))},n.prototype.andThen=function(r){return y(this.error)},n.prototype.orElse=function(r){return r(this.error)},n.prototype.asyncAndThen=function(r){return k(this.error)},n.prototype.asyncMap=function(r){return k(this.error)},n.prototype.unwrapOr=function(r){return r},n.prototype.match=function(r,t){return t(this.error)},n.prototype._unsafeUnwrap=function(r){throw A("Called `_unsafeUnwrap` on an Err",this,r)},n.prototype._unsafeUnwrapErr=function(r){return this.error},n}();E.fromThrowable;export{v as R,h as a,k as b,E as c,y as e,R as o};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
