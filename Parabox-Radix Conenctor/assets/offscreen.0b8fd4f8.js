import"./modulepreload-polyfill.c7c6310f.js";import{S as Q,a as se,w as E,c as S,s as de,d as k}from"./Subject.c67f7ae3.js";import{p as ie,c as L,t as G,w as z,C as ce}from"./connector-client.74f05fda.js";import{l as g}from"./logger.8aad6c34.js";import{R as x,a as y,b as M,e as _,o as b}from"./index.es.095da3c8.js";import{R as ue,f as N,d as pe}from"./first.9e6ac58d.js";import{c as H,o as V,s as K,t as le}from"./switchMap.deec5196.js";import{g as me}from"./schemas.bc1c5361.js";import{M as fe}from"./message-client.0e26c204.js";import"./blake2b.e5109153.js";import"./send-message.6e0479e0.js";const w={pending:"pending",processing:"processing",completed:"completed",failed:"failed"},A={addJob:"addJob",removeJob:"removeJob",updateJobStatus:"updateJobStatus",retryJob:"retryJob",cancelJob:"cancelJob"},D={UnknownInteractionError:"UnknownInteractionError",SaveStateError:"SaveStateError",GetStateError:"GetStateError",AddJobToQueueError:"AddJobToQueueError",UpdateJobStatusError:"UpdateJobStatusError",JobAlreadyExistsError:"JobAlreadyExistsError",JobNotFoundError:"JobNotFoundError",FailedToCancelJobError:"FailedToCancelJobError"},be=()=>({paused:new ue(1),queueInteraction:new Q,queueInteractionResult:new Q,processNextJob:new Q}),Ie=()=>{const n=new Map,r=s=>new Promise((a,m)=>{try{const u=n.get(s);a(u!=null?u:void 0)}catch(u){m(u)}}),l=(s,a)=>new Promise((m,u)=>{try{n.set(s,JSON.stringify(a)),m(void 0)}catch(d){u(d)}});return{getData:s=>x.fromPromise(r(s),a=>a).andThen(a=>a?ie(a):y(void 0)),setData:(s,a)=>x.fromPromise(l(s,a),m=>m)}},P=({storage:n=Ie(),key:r,worker:l,logger:s,subjects:a=be(),paused:m=!1})=>{a.paused.next(m);const u=new se,d=e=>y({items:new Map(Object.entries(e.items)),ids:{[w.pending]:new Set(e.ids.pending),[w.processing]:new Set(e.ids.processing),[w.completed]:new Set(e.ids.completed),[w.failed]:new Set(e.ids.failed)}}),p=e=>y({items:[...e.items.entries()].reduce((t,[c,f])=>({...t,[c]:f}),{}),ids:{[w.pending]:[...e.ids.pending.values()],[w.processing]:[...e.ids.processing.values()],[w.completed]:[...e.ids.completed.values()],[w.failed]:[...e.ids.failed.values()]}}),i={items:{},ids:{pending:[],processing:[],completed:[],failed:[]}},o=()=>n.getData(r).map(e=>e!=null?e:i).andThen(d).mapErr(()=>({reason:"GetStateError"})),T=e=>p(e).asyncAndThen(t=>(s==null||s.trace(`[${r}] saveState`,t.ids),n.setData(r,t))).mapErr(()=>({reason:"SaveStateError"})),I=(e,t)=>(s==null||s.debug(`[${r}] addJob`,{job:e}),t.items.set(e.id,{...e,updatedAt:Date.now()}),t.ids.pending.add(e.id),b(t)),v=({job:e,status:t,state:c,numberOfRetries:f})=>{const F=e.id;s==null||s.debug(`[${r}] updateJobStatus`,{jobId:e.id,fromStatus:e.status,toStatus:t});const B={...e,updatedAt:Date.now(),status:t};return f&&(B.numberOfRetries=f),c.items.set(F,B),c.ids[e.status].delete(F),c.ids[t].add(F),b(c)},X=(e,t)=>(s==null||s.debug(`[${r}] removeJob`,{jobId:e}),t.items.delete(e),t.ids.pending.delete(e),t.ids.completed.delete(e),t.ids.failed.delete(e),t.ids.processing.delete(e),b(t)),Y=e=>t=>{switch(e.interaction){case A.addJob:return I(e.job,t);case A.removeJob:return X(e.jobId,t);case A.updateJobStatus:return C(e.jobId).andThen(c=>v({...e,state:t,job:c}));case A.retryJob:return C(e.jobId).andThen(c=>v({...e,state:t,job:c,status:"pending",numberOfRetries:c.numberOfRetries+1}));case A.cancelJob:return C(e.jobId).andThen(c=>c.status==="pending"?v({job:{...c,canceled:!0},state:t,status:"completed"}):M({reason:D.FailedToCancelJobError}))}},Z=e=>o().map(t=>t.items.has(e)),j=(e,t)=>Z(t).andThen(c=>c?M({reason:D.JobAlreadyExistsError}):R({interaction:"addJob",job:{id:t,data:e,status:w.pending,numberOfRetries:0,createdAt:Date.now(),updatedAt:Date.now(),canceled:!1},jobId:t,interactionId:crypto.randomUUID()}).mapErr(f=>f.error)),R=e=>{const t=a.queueInteractionResult.pipe(N(f=>f.isErr()?f.error.interaction.interactionId===e.interactionId:f.value.interactionId===e.interactionId)),c=V(!0).pipe(G(()=>{a.queueInteraction.next(e)}),N(f=>!1));return x.fromPromise(pe(H(t,c)),f=>f).andThen(f=>f)},C=e=>o().map(t=>t.items.get(e)).andThen(t=>t?y(t):_({reason:D.JobNotFoundError}));u.add(a.queueInteraction.pipe(L(e=>o().andThen(Y(e)).andThen(T).map(()=>e).mapErr(t=>({error:t,interaction:e}))),G(e=>a.queueInteractionResult.next(e))).subscribe());const ee=()=>o().andThen(e=>{const t=e.ids.pending.values().next().value;return t?y(t):_({reason:D.JobNotFoundError})}).andThen(C),U=(e,t)=>{const c=crypto.randomUUID();return R({interaction:"updateJobStatus",jobId:e,status:t,interactionId:c})},te=e=>{const t=crypto.randomUUID();return R({interaction:"retryJob",jobId:e,interactionId:t})},ne=e=>R({jobId:e,interaction:"removeJob",interactionId:crypto.randomUUID()}),re=e=>U(e.id,"processing").andThen(()=>l.run(e).mapErr(({shouldRetry:t})=>t?te(e.id):U(e.id,"failed"))).andThen(()=>U(e.id,"completed")).map(()=>{a.processNextJob.next()}).mapErr(()=>{a.processNextJob.next()}),oe=a.queueInteractionResult.pipe(N(e=>e.isOk())),ae=a.paused.pipe(N(e=>!e));return u.add(H(oe,a.paused,a.processNextJob).pipe(L(()=>V(!0).pipe(z(ae),K(()=>ee().andThen(re))))).subscribe()),{add:j,start:()=>{a.paused.next(!1)},stop:()=>{a.paused.next(!0)},remove:ne,getState:o,destroy:()=>u.unsubscribe(),subjects:a,cancel:e=>C(e).andThen(()=>R({interaction:"cancelJob",jobId:e,interactionId:crypto.randomUUID()}).mapErr(t=>t.error)).map(()=>{})}},$=n=>({run:l=>n(l)}),we=({logger:n})=>{const r=new Map,l=(p,i,o)=>{const{origin:T,networkId:I}=o;return r.set(i,{tabId:p,origin:T,networkId:I}),y(void 0)},s=p=>{const i=r.get(p);return i?b(i.tabId):M(new Error("No tab found"))},a=p=>{const i=r.get(p);return i?b(i.networkId):M(new Error("No tab found"))},m=p=>{const i=[...r.entries()].filter(([,o])=>o.tabId===p).map(([o])=>o);return i.length?b(i):M(new Error("No interactionId found"))};return{add:l,getTabId:s,store:r,getNetworkId:a,getInteractionIdsByTabId:m,removeByTabId:p=>m(p).map(i=>i.forEach(o=>r.delete(o))),getAndRemoveByTabId:p=>m(p).map(i=>(i.forEach(o=>r.delete(o)),i))}},Se=n=>{const r=n.connectorClient,l=n.dAppRequestQueue,s=n.ledgerToWalletQueue,a=n.incomingWalletMessageQueue,m=n.messageRouter,u=n.logger||g;return(d,p,i)=>{switch(d.discriminator){case E.walletMessage:return me(d.data)?(u.debug("\u{1FAAA} -> \u{1F4D2}: walletToLedgerSubject",d.data.interactionId,d.data.discriminator),p(S.walletToLedger("offScreen",d.data)).map(()=>({sendConfirmation:!1}))):(a.add(d.data,d.data.interactionId),b({sendConfirmation:!1}));case E.setConnectionPassword:{const{connectionPassword:o}=d;return o?(r.setConnectionPassword(Buffer.from(o,"hex")),r.connect()):r.disconnect(),b({sendConfirmation:!0})}case E.dAppRequest:{const{interactionId:o,metadata:T}=d.data;return m.add(i,o,T).asyncAndThen(()=>{var I,v;return o?((v=(I=d.data)==null?void 0:I.items)==null?void 0:v.discriminator)==="cancelRequest"?l.cancel(o).andThen(()=>p(S.sendMessageEventToDapp("offScreen","requestCancelSuccess",o),i)):l.add(d.data,o):b(null)}).map(()=>({sendConfirmation:!0}))}case E.offscreenLog:{const o=d.log._meta.logLevelName.toLowerCase()||"debug";return delete d.log._meta,u==null||u[o](...Object.values(d.log)),b({sendConfirmation:!1})}case E.incomingWalletMessage:return m.getTabId(d.data.interactionId).mapErr(()=>({reason:"tabIdNotFound"})).andThen(o=>p(S.walletResponse("offScreen",d.data),o)).andThen(()=>m.getNetworkId(d.data.interactionId)).mapErr(()=>({reason:"networkIdNotFound"})).map(o=>de(S.walletResponse("offScreen",{...d.data,metadata:{networkId:o}}))).map(()=>({sendConfirmation:!0}));case E.ledgerResponse:return s.add(d.data,d.data.interactionId).map(()=>({sendConfirmation:!1}));case E.closeDappTab:{const{tabId:o}=d;return m.getAndRemoveByTabId(o).mapErr(()=>({reason:"tabIdNotFound"})).map(T=>{for(const I of T)x.combine([l.cancel(I),a.cancel(I)])}).map(()=>({sendConfirmation:!1}))}default:return M({reason:"unhandledMessageDiscriminator"})}}},O=we({logger:g}),J=ce({source:"extension",target:"wallet",signalingServerBaseUrl:k.signalingServer.baseUrl,isInitiator:!0,logger:g});J.connect();const q=P({key:"dAppRequestQueue",logger:g,paused:!0,worker:$(n=>J.sendMessage(n.data,{timeout:k.webRTC.confirmationTimeout}).map(()=>O.getTabId(n.data.interactionId).andThen(r=>h.sendMessageAndWaitForConfirmation(S.sendMessageEventToDapp("offScreen","receivedByWallet",n.data.interactionId),r))).mapErr(r=>{const l=r.reason==="notConnected",s=n.numberOfRetries<3;return{...r,shouldRetry:l||s}}))}),W=P({key:"ledgerToWallet",logger:g,worker:$(n=>J.sendMessage(n.data,{timeout:k.webRTC.confirmationTimeout}))}),ge=P({key:"incomingWalletMessageQueue",logger:g,paused:!1,worker:$(n=>h.handleMessage(S.incomingWalletMessage("wallet",n.data)).mapErr(r=>({...r,shouldRetry:!1})))});J.connected$.subscribe(n=>{n?(W.start(),q.start()):(W.stop(),q.stop())});const h=fe(Se({connectorClient:J,dAppRequestQueue:q,ledgerToWalletQueue:W,incomingWalletMessageQueue:ge,messageRouter:O,logger:g}),"offScreen",{logger:g});J.onMessage$.subscribe(n=>{h.onMessage(S.walletMessage("wallet",n))});chrome.runtime.onMessage.addListener((n,r)=>{var l;h.onMessage(n,(l=r.tab)==null?void 0:l.id)});const Je=12e4,Te=le(0,Je);Te.pipe(z(J.connected$,J.shouldConnect$),N(([,n,r])=>!n&&r),K(()=>h.sendMessageAndWaitForConfirmation(S.getConnectionPassword("offScreen")).map(({connectionPassword:n})=>n).andThen(n=>h.handleMessage(S.setConnectionPassword("offScreen",n))))).subscribe();window.radix={messageClient:h,messageRouter:O};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
