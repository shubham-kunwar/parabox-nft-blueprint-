import{R as tt}from"./index.es.095da3c8.js";var Sr={},V={};V.byteLength=it;V.toByteArray=st;V.fromByteArray=at;var R=[],T=[],et=typeof Uint8Array<"u"?Uint8Array:Array,Q="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";for(var O=0,nt=Q.length;O<nt;++O)R[O]=Q[O],T[Q.charCodeAt(O)]=O;T["-".charCodeAt(0)]=62;T["_".charCodeAt(0)]=63;function Ar(s){var o=s.length;if(o%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var i=s.indexOf("=");i===-1&&(i=o);var a=i===o?0:4-i%4;return[i,a]}function it(s){var o=Ar(s),i=o[0],a=o[1];return(i+a)*3/4-a}function ot(s,o,i){return(o+i)*3/4-i}function st(s){var o,i=Ar(s),a=i[0],p=i[1],f=new et(ot(s,a,p)),d=0,u=p>0?a-4:a,m;for(m=0;m<u;m+=4)o=T[s.charCodeAt(m)]<<18|T[s.charCodeAt(m+1)]<<12|T[s.charCodeAt(m+2)]<<6|T[s.charCodeAt(m+3)],f[d++]=o>>16&255,f[d++]=o>>8&255,f[d++]=o&255;return p===2&&(o=T[s.charCodeAt(m)]<<2|T[s.charCodeAt(m+1)]>>4,f[d++]=o&255),p===1&&(o=T[s.charCodeAt(m)]<<10|T[s.charCodeAt(m+1)]<<4|T[s.charCodeAt(m+2)]>>2,f[d++]=o>>8&255,f[d++]=o&255),f}function ut(s){return R[s>>18&63]+R[s>>12&63]+R[s>>6&63]+R[s&63]}function ct(s,o,i){for(var a,p=[],f=o;f<i;f+=3)a=(s[f]<<16&16711680)+(s[f+1]<<8&65280)+(s[f+2]&255),p.push(ut(a));return p.join("")}function at(s){for(var o,i=s.length,a=i%3,p=[],f=16383,d=0,u=i-a;d<u;d+=f)p.push(ct(s,d,d+f>u?u:d+f));return a===1?(o=s[i-1],p.push(R[o>>2]+R[o<<4&63]+"==")):a===2&&(o=(s[i-2]<<8)+s[i-1],p.push(R[o>>10]+R[o>>4&63]+R[o<<2&63]+"=")),p.join("")}var cr={};/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */cr.read=function(s,o,i,a,p){var f,d,u=p*8-a-1,m=(1<<u)-1,y=m>>1,g=-7,b=i?p-1:0,x=i?-1:1,E=s[o+b];for(b+=x,f=E&(1<<-g)-1,E>>=-g,g+=u;g>0;f=f*256+s[o+b],b+=x,g-=8);for(d=f&(1<<-g)-1,f>>=-g,g+=a;g>0;d=d*256+s[o+b],b+=x,g-=8);if(f===0)f=1-y;else{if(f===m)return d?NaN:(E?-1:1)*(1/0);d=d+Math.pow(2,a),f=f-y}return(E?-1:1)*d*Math.pow(2,f-a)};cr.write=function(s,o,i,a,p,f){var d,u,m,y=f*8-p-1,g=(1<<y)-1,b=g>>1,x=p===23?Math.pow(2,-24)-Math.pow(2,-77):0,E=a?0:f-1,_=a?1:-1,F=o<0||o===0&&1/o<0?1:0;for(o=Math.abs(o),isNaN(o)||o===1/0?(u=isNaN(o)?1:0,d=g):(d=Math.floor(Math.log(o)/Math.LN2),o*(m=Math.pow(2,-d))<1&&(d--,m*=2),d+b>=1?o+=x/m:o+=x*Math.pow(2,1-b),o*m>=2&&(d++,m/=2),d+b>=g?(u=0,d=g):d+b>=1?(u=(o*m-1)*Math.pow(2,p),d=d+b):(u=o*Math.pow(2,b-1)*Math.pow(2,p),d=0));p>=8;s[i+E]=u&255,E+=_,u/=256,p-=8);for(d=d<<p|u,y+=p;y>0;s[i+E]=d&255,E+=_,d/=256,y-=8);s[i+E-_]|=F*128};/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */(function(s){const o=V,i=cr,a=typeof Symbol=="function"&&typeof Symbol.for=="function"?Symbol.for("nodejs.util.inspect.custom"):null;s.Buffer=u,s.SlowBuffer=Lr,s.INSPECT_MAX_BYTES=50;const p=2147483647;s.kMaxLength=p,u.TYPED_ARRAY_SUPPORT=f(),!u.TYPED_ARRAY_SUPPORT&&typeof console<"u"&&typeof console.error=="function"&&console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");function f(){try{const e=new Uint8Array(1),r={foo:function(){return 42}};return Object.setPrototypeOf(r,Uint8Array.prototype),Object.setPrototypeOf(e,r),e.foo()===42}catch{return!1}}Object.defineProperty(u.prototype,"parent",{enumerable:!0,get:function(){if(!!u.isBuffer(this))return this.buffer}}),Object.defineProperty(u.prototype,"offset",{enumerable:!0,get:function(){if(!!u.isBuffer(this))return this.byteOffset}});function d(e){if(e>p)throw new RangeError('The value "'+e+'" is invalid for option "size"');const r=new Uint8Array(e);return Object.setPrototypeOf(r,u.prototype),r}function u(e,r,t){if(typeof e=="number"){if(typeof r=="string")throw new TypeError('The "string" argument must be of type string. Received type number');return b(e)}return m(e,r,t)}u.poolSize=8192;function m(e,r,t){if(typeof e=="string")return x(e,r);if(ArrayBuffer.isView(e))return _(e);if(e==null)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(C(e,ArrayBuffer)||e&&C(e.buffer,ArrayBuffer)||typeof SharedArrayBuffer<"u"&&(C(e,SharedArrayBuffer)||e&&C(e.buffer,SharedArrayBuffer)))return F(e,r,t);if(typeof e=="number")throw new TypeError('The "value" argument must not be of type number. Received type number');const n=e.valueOf&&e.valueOf();if(n!=null&&n!==e)return u.from(n,r,t);const c=kr(e);if(c)return c;if(typeof Symbol<"u"&&Symbol.toPrimitive!=null&&typeof e[Symbol.toPrimitive]=="function")return u.from(e[Symbol.toPrimitive]("string"),r,t);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}u.from=function(e,r,t){return m(e,r,t)},Object.setPrototypeOf(u.prototype,Uint8Array.prototype),Object.setPrototypeOf(u,Uint8Array);function y(e){if(typeof e!="number")throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function g(e,r,t){return y(e),e<=0?d(e):r!==void 0?typeof t=="string"?d(e).fill(r,t):d(e).fill(r):d(e)}u.alloc=function(e,r,t){return g(e,r,t)};function b(e){return y(e),d(e<0?0:J(e)|0)}u.allocUnsafe=function(e){return b(e)},u.allocUnsafeSlow=function(e){return b(e)};function x(e,r){if((typeof r!="string"||r==="")&&(r="utf8"),!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r);const t=ar(e,r)|0;let n=d(t);const c=n.write(e,r);return c!==t&&(n=n.slice(0,c)),n}function E(e){const r=e.length<0?0:J(e.length)|0,t=d(r);for(let n=0;n<r;n+=1)t[n]=e[n]&255;return t}function _(e){if(C(e,Uint8Array)){const r=new Uint8Array(e);return F(r.buffer,r.byteOffset,r.byteLength)}return E(e)}function F(e,r,t){if(r<0||e.byteLength<r)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<r+(t||0))throw new RangeError('"length" is outside of buffer bounds');let n;return r===void 0&&t===void 0?n=new Uint8Array(e):t===void 0?n=new Uint8Array(e,r):n=new Uint8Array(e,r,t),Object.setPrototypeOf(n,u.prototype),n}function kr(e){if(u.isBuffer(e)){const r=J(e.length)|0,t=d(r);return t.length===0||e.copy(t,0,0,r),t}if(e.length!==void 0)return typeof e.length!="number"||Z(e.length)?d(0):E(e);if(e.type==="Buffer"&&Array.isArray(e.data))return E(e.data)}function J(e){if(e>=p)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+p.toString(16)+" bytes");return e|0}function Lr(e){return+e!=e&&(e=0),u.alloc(+e)}u.isBuffer=function(r){return r!=null&&r._isBuffer===!0&&r!==u.prototype},u.compare=function(r,t){if(C(r,Uint8Array)&&(r=u.from(r,r.offset,r.byteLength)),C(t,Uint8Array)&&(t=u.from(t,t.offset,t.byteLength)),!u.isBuffer(r)||!u.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(r===t)return 0;let n=r.length,c=t.length;for(let l=0,h=Math.min(n,c);l<h;++l)if(r[l]!==t[l]){n=r[l],c=t[l];break}return n<c?-1:c<n?1:0},u.isEncoding=function(r){switch(String(r).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(r,t){if(!Array.isArray(r))throw new TypeError('"list" argument must be an Array of Buffers');if(r.length===0)return u.alloc(0);let n;if(t===void 0)for(t=0,n=0;n<r.length;++n)t+=r[n].length;const c=u.allocUnsafe(t);let l=0;for(n=0;n<r.length;++n){let h=r[n];if(C(h,Uint8Array))l+h.length>c.length?(u.isBuffer(h)||(h=u.from(h)),h.copy(c,l)):Uint8Array.prototype.set.call(c,h,l);else if(u.isBuffer(h))h.copy(c,l);else throw new TypeError('"list" argument must be an Array of Buffers');l+=h.length}return c};function ar(e,r){if(u.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||C(e,ArrayBuffer))return e.byteLength;if(typeof e!="string")throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const t=e.length,n=arguments.length>2&&arguments[2]===!0;if(!n&&t===0)return 0;let c=!1;for(;;)switch(r){case"ascii":case"latin1":case"binary":return t;case"utf8":case"utf-8":return K(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return t*2;case"hex":return t>>>1;case"base64":return Er(e).length;default:if(c)return n?-1:K(e).length;r=(""+r).toLowerCase(),c=!0}}u.byteLength=ar;function Mr(e,r,t){let n=!1;if((r===void 0||r<0)&&(r=0),r>this.length||((t===void 0||t>this.length)&&(t=this.length),t<=0)||(t>>>=0,r>>>=0,t<=r))return"";for(e||(e="utf8");;)switch(e){case"hex":return Vr(this,r,t);case"utf8":case"utf-8":return pr(this,r,t);case"ascii":return Yr(this,r,t);case"latin1":case"binary":return Gr(this,r,t);case"base64":return Wr(this,r,t);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return Hr(this,r,t);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}u.prototype._isBuffer=!0;function L(e,r,t){const n=e[r];e[r]=e[t],e[t]=n}u.prototype.swap16=function(){const r=this.length;if(r%2!==0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<r;t+=2)L(this,t,t+1);return this},u.prototype.swap32=function(){const r=this.length;if(r%4!==0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<r;t+=4)L(this,t,t+3),L(this,t+1,t+2);return this},u.prototype.swap64=function(){const r=this.length;if(r%8!==0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<r;t+=8)L(this,t,t+7),L(this,t+1,t+6),L(this,t+2,t+5),L(this,t+3,t+4);return this},u.prototype.toString=function(){const r=this.length;return r===0?"":arguments.length===0?pr(this,0,r):Mr.apply(this,arguments)},u.prototype.toLocaleString=u.prototype.toString,u.prototype.equals=function(r){if(!u.isBuffer(r))throw new TypeError("Argument must be a Buffer");return this===r?!0:u.compare(this,r)===0},u.prototype.inspect=function(){let r="";const t=s.INSPECT_MAX_BYTES;return r=this.toString("hex",0,t).replace(/(.{2})/g,"$1 ").trim(),this.length>t&&(r+=" ... "),"<Buffer "+r+">"},a&&(u.prototype[a]=u.prototype.inspect),u.prototype.compare=function(r,t,n,c,l){if(C(r,Uint8Array)&&(r=u.from(r,r.offset,r.byteLength)),!u.isBuffer(r))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof r);if(t===void 0&&(t=0),n===void 0&&(n=r?r.length:0),c===void 0&&(c=0),l===void 0&&(l=this.length),t<0||n>r.length||c<0||l>this.length)throw new RangeError("out of range index");if(c>=l&&t>=n)return 0;if(c>=l)return-1;if(t>=n)return 1;if(t>>>=0,n>>>=0,c>>>=0,l>>>=0,this===r)return 0;let h=l-c,w=n-t;const v=Math.min(h,w),I=this.slice(c,l),U=r.slice(t,n);for(let B=0;B<v;++B)if(I[B]!==U[B]){h=I[B],w=U[B];break}return h<w?-1:w<h?1:0};function lr(e,r,t,n,c){if(e.length===0)return-1;if(typeof t=="string"?(n=t,t=0):t>2147483647?t=2147483647:t<-2147483648&&(t=-2147483648),t=+t,Z(t)&&(t=c?0:e.length-1),t<0&&(t=e.length+t),t>=e.length){if(c)return-1;t=e.length-1}else if(t<0)if(c)t=0;else return-1;if(typeof r=="string"&&(r=u.from(r,n)),u.isBuffer(r))return r.length===0?-1:fr(e,r,t,n,c);if(typeof r=="number")return r=r&255,typeof Uint8Array.prototype.indexOf=="function"?c?Uint8Array.prototype.indexOf.call(e,r,t):Uint8Array.prototype.lastIndexOf.call(e,r,t):fr(e,[r],t,n,c);throw new TypeError("val must be string, number or Buffer")}function fr(e,r,t,n,c){let l=1,h=e.length,w=r.length;if(n!==void 0&&(n=String(n).toLowerCase(),n==="ucs2"||n==="ucs-2"||n==="utf16le"||n==="utf-16le")){if(e.length<2||r.length<2)return-1;l=2,h/=2,w/=2,t/=2}function v(U,B){return l===1?U[B]:U.readUInt16BE(B*l)}let I;if(c){let U=-1;for(I=t;I<h;I++)if(v(e,I)===v(r,U===-1?0:I-U)){if(U===-1&&(U=I),I-U+1===w)return U*l}else U!==-1&&(I-=I-U),U=-1}else for(t+w>h&&(t=h-w),I=t;I>=0;I--){let U=!0;for(let B=0;B<w;B++)if(v(e,I+B)!==v(r,B)){U=!1;break}if(U)return I}return-1}u.prototype.includes=function(r,t,n){return this.indexOf(r,t,n)!==-1},u.prototype.indexOf=function(r,t,n){return lr(this,r,t,n,!0)},u.prototype.lastIndexOf=function(r,t,n){return lr(this,r,t,n,!1)};function Pr(e,r,t,n){t=Number(t)||0;const c=e.length-t;n?(n=Number(n),n>c&&(n=c)):n=c;const l=r.length;n>l/2&&(n=l/2);let h;for(h=0;h<n;++h){const w=parseInt(r.substr(h*2,2),16);if(Z(w))return h;e[t+h]=w}return h}function Or(e,r,t,n){return N(K(r,e.length-t),e,t,n)}function jr(e,r,t,n){return N(Kr(r),e,t,n)}function $r(e,r,t,n){return N(Er(r),e,t,n)}function Nr(e,r,t,n){return N(Zr(r,e.length-t),e,t,n)}u.prototype.write=function(r,t,n,c){if(t===void 0)c="utf8",n=this.length,t=0;else if(n===void 0&&typeof t=="string")c=t,n=this.length,t=0;else if(isFinite(t))t=t>>>0,isFinite(n)?(n=n>>>0,c===void 0&&(c="utf8")):(c=n,n=void 0);else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");const l=this.length-t;if((n===void 0||n>l)&&(n=l),r.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");c||(c="utf8");let h=!1;for(;;)switch(c){case"hex":return Pr(this,r,t,n);case"utf8":case"utf-8":return Or(this,r,t,n);case"ascii":case"latin1":case"binary":return jr(this,r,t,n);case"base64":return $r(this,r,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return Nr(this,r,t,n);default:if(h)throw new TypeError("Unknown encoding: "+c);c=(""+c).toLowerCase(),h=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function Wr(e,r,t){return r===0&&t===e.length?o.fromByteArray(e):o.fromByteArray(e.slice(r,t))}function pr(e,r,t){t=Math.min(e.length,t);const n=[];let c=r;for(;c<t;){const l=e[c];let h=null,w=l>239?4:l>223?3:l>191?2:1;if(c+w<=t){let v,I,U,B;switch(w){case 1:l<128&&(h=l);break;case 2:v=e[c+1],(v&192)===128&&(B=(l&31)<<6|v&63,B>127&&(h=B));break;case 3:v=e[c+1],I=e[c+2],(v&192)===128&&(I&192)===128&&(B=(l&15)<<12|(v&63)<<6|I&63,B>2047&&(B<55296||B>57343)&&(h=B));break;case 4:v=e[c+1],I=e[c+2],U=e[c+3],(v&192)===128&&(I&192)===128&&(U&192)===128&&(B=(l&15)<<18|(v&63)<<12|(I&63)<<6|U&63,B>65535&&B<1114112&&(h=B))}}h===null?(h=65533,w=1):h>65535&&(h-=65536,n.push(h>>>10&1023|55296),h=56320|h&1023),n.push(h),c+=w}return qr(n)}const hr=4096;function qr(e){const r=e.length;if(r<=hr)return String.fromCharCode.apply(String,e);let t="",n=0;for(;n<r;)t+=String.fromCharCode.apply(String,e.slice(n,n+=hr));return t}function Yr(e,r,t){let n="";t=Math.min(e.length,t);for(let c=r;c<t;++c)n+=String.fromCharCode(e[c]&127);return n}function Gr(e,r,t){let n="";t=Math.min(e.length,t);for(let c=r;c<t;++c)n+=String.fromCharCode(e[c]);return n}function Vr(e,r,t){const n=e.length;(!r||r<0)&&(r=0),(!t||t<0||t>n)&&(t=n);let c="";for(let l=r;l<t;++l)c+=Qr[e[l]];return c}function Hr(e,r,t){const n=e.slice(r,t);let c="";for(let l=0;l<n.length-1;l+=2)c+=String.fromCharCode(n[l]+n[l+1]*256);return c}u.prototype.slice=function(r,t){const n=this.length;r=~~r,t=t===void 0?n:~~t,r<0?(r+=n,r<0&&(r=0)):r>n&&(r=n),t<0?(t+=n,t<0&&(t=0)):t>n&&(t=n),t<r&&(t=r);const c=this.subarray(r,t);return Object.setPrototypeOf(c,u.prototype),c};function S(e,r,t){if(e%1!==0||e<0)throw new RangeError("offset is not uint");if(e+r>t)throw new RangeError("Trying to access beyond buffer length")}u.prototype.readUintLE=u.prototype.readUIntLE=function(r,t,n){r=r>>>0,t=t>>>0,n||S(r,t,this.length);let c=this[r],l=1,h=0;for(;++h<t&&(l*=256);)c+=this[r+h]*l;return c},u.prototype.readUintBE=u.prototype.readUIntBE=function(r,t,n){r=r>>>0,t=t>>>0,n||S(r,t,this.length);let c=this[r+--t],l=1;for(;t>0&&(l*=256);)c+=this[r+--t]*l;return c},u.prototype.readUint8=u.prototype.readUInt8=function(r,t){return r=r>>>0,t||S(r,1,this.length),this[r]},u.prototype.readUint16LE=u.prototype.readUInt16LE=function(r,t){return r=r>>>0,t||S(r,2,this.length),this[r]|this[r+1]<<8},u.prototype.readUint16BE=u.prototype.readUInt16BE=function(r,t){return r=r>>>0,t||S(r,2,this.length),this[r]<<8|this[r+1]},u.prototype.readUint32LE=u.prototype.readUInt32LE=function(r,t){return r=r>>>0,t||S(r,4,this.length),(this[r]|this[r+1]<<8|this[r+2]<<16)+this[r+3]*16777216},u.prototype.readUint32BE=u.prototype.readUInt32BE=function(r,t){return r=r>>>0,t||S(r,4,this.length),this[r]*16777216+(this[r+1]<<16|this[r+2]<<8|this[r+3])},u.prototype.readBigUInt64LE=k(function(r){r=r>>>0,P(r,"offset");const t=this[r],n=this[r+7];(t===void 0||n===void 0)&&j(r,this.length-8);const c=t+this[++r]*2**8+this[++r]*2**16+this[++r]*2**24,l=this[++r]+this[++r]*2**8+this[++r]*2**16+n*2**24;return BigInt(c)+(BigInt(l)<<BigInt(32))}),u.prototype.readBigUInt64BE=k(function(r){r=r>>>0,P(r,"offset");const t=this[r],n=this[r+7];(t===void 0||n===void 0)&&j(r,this.length-8);const c=t*2**24+this[++r]*2**16+this[++r]*2**8+this[++r],l=this[++r]*2**24+this[++r]*2**16+this[++r]*2**8+n;return(BigInt(c)<<BigInt(32))+BigInt(l)}),u.prototype.readIntLE=function(r,t,n){r=r>>>0,t=t>>>0,n||S(r,t,this.length);let c=this[r],l=1,h=0;for(;++h<t&&(l*=256);)c+=this[r+h]*l;return l*=128,c>=l&&(c-=Math.pow(2,8*t)),c},u.prototype.readIntBE=function(r,t,n){r=r>>>0,t=t>>>0,n||S(r,t,this.length);let c=t,l=1,h=this[r+--c];for(;c>0&&(l*=256);)h+=this[r+--c]*l;return l*=128,h>=l&&(h-=Math.pow(2,8*t)),h},u.prototype.readInt8=function(r,t){return r=r>>>0,t||S(r,1,this.length),this[r]&128?(255-this[r]+1)*-1:this[r]},u.prototype.readInt16LE=function(r,t){r=r>>>0,t||S(r,2,this.length);const n=this[r]|this[r+1]<<8;return n&32768?n|4294901760:n},u.prototype.readInt16BE=function(r,t){r=r>>>0,t||S(r,2,this.length);const n=this[r+1]|this[r]<<8;return n&32768?n|4294901760:n},u.prototype.readInt32LE=function(r,t){return r=r>>>0,t||S(r,4,this.length),this[r]|this[r+1]<<8|this[r+2]<<16|this[r+3]<<24},u.prototype.readInt32BE=function(r,t){return r=r>>>0,t||S(r,4,this.length),this[r]<<24|this[r+1]<<16|this[r+2]<<8|this[r+3]},u.prototype.readBigInt64LE=k(function(r){r=r>>>0,P(r,"offset");const t=this[r],n=this[r+7];(t===void 0||n===void 0)&&j(r,this.length-8);const c=this[r+4]+this[r+5]*2**8+this[r+6]*2**16+(n<<24);return(BigInt(c)<<BigInt(32))+BigInt(t+this[++r]*2**8+this[++r]*2**16+this[++r]*2**24)}),u.prototype.readBigInt64BE=k(function(r){r=r>>>0,P(r,"offset");const t=this[r],n=this[r+7];(t===void 0||n===void 0)&&j(r,this.length-8);const c=(t<<24)+this[++r]*2**16+this[++r]*2**8+this[++r];return(BigInt(c)<<BigInt(32))+BigInt(this[++r]*2**24+this[++r]*2**16+this[++r]*2**8+n)}),u.prototype.readFloatLE=function(r,t){return r=r>>>0,t||S(r,4,this.length),i.read(this,r,!0,23,4)},u.prototype.readFloatBE=function(r,t){return r=r>>>0,t||S(r,4,this.length),i.read(this,r,!1,23,4)},u.prototype.readDoubleLE=function(r,t){return r=r>>>0,t||S(r,8,this.length),i.read(this,r,!0,52,8)},u.prototype.readDoubleBE=function(r,t){return r=r>>>0,t||S(r,8,this.length),i.read(this,r,!1,52,8)};function A(e,r,t,n,c,l){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(r>c||r<l)throw new RangeError('"value" argument is out of bounds');if(t+n>e.length)throw new RangeError("Index out of range")}u.prototype.writeUintLE=u.prototype.writeUIntLE=function(r,t,n,c){if(r=+r,t=t>>>0,n=n>>>0,!c){const w=Math.pow(2,8*n)-1;A(this,r,t,n,w,0)}let l=1,h=0;for(this[t]=r&255;++h<n&&(l*=256);)this[t+h]=r/l&255;return t+n},u.prototype.writeUintBE=u.prototype.writeUIntBE=function(r,t,n,c){if(r=+r,t=t>>>0,n=n>>>0,!c){const w=Math.pow(2,8*n)-1;A(this,r,t,n,w,0)}let l=n-1,h=1;for(this[t+l]=r&255;--l>=0&&(h*=256);)this[t+l]=r/h&255;return t+n},u.prototype.writeUint8=u.prototype.writeUInt8=function(r,t,n){return r=+r,t=t>>>0,n||A(this,r,t,1,255,0),this[t]=r&255,t+1},u.prototype.writeUint16LE=u.prototype.writeUInt16LE=function(r,t,n){return r=+r,t=t>>>0,n||A(this,r,t,2,65535,0),this[t]=r&255,this[t+1]=r>>>8,t+2},u.prototype.writeUint16BE=u.prototype.writeUInt16BE=function(r,t,n){return r=+r,t=t>>>0,n||A(this,r,t,2,65535,0),this[t]=r>>>8,this[t+1]=r&255,t+2},u.prototype.writeUint32LE=u.prototype.writeUInt32LE=function(r,t,n){return r=+r,t=t>>>0,n||A(this,r,t,4,4294967295,0),this[t+3]=r>>>24,this[t+2]=r>>>16,this[t+1]=r>>>8,this[t]=r&255,t+4},u.prototype.writeUint32BE=u.prototype.writeUInt32BE=function(r,t,n){return r=+r,t=t>>>0,n||A(this,r,t,4,4294967295,0),this[t]=r>>>24,this[t+1]=r>>>16,this[t+2]=r>>>8,this[t+3]=r&255,t+4};function dr(e,r,t,n,c){br(r,n,c,e,t,7);let l=Number(r&BigInt(4294967295));e[t++]=l,l=l>>8,e[t++]=l,l=l>>8,e[t++]=l,l=l>>8,e[t++]=l;let h=Number(r>>BigInt(32)&BigInt(4294967295));return e[t++]=h,h=h>>8,e[t++]=h,h=h>>8,e[t++]=h,h=h>>8,e[t++]=h,t}function yr(e,r,t,n,c){br(r,n,c,e,t,7);let l=Number(r&BigInt(4294967295));e[t+7]=l,l=l>>8,e[t+6]=l,l=l>>8,e[t+5]=l,l=l>>8,e[t+4]=l;let h=Number(r>>BigInt(32)&BigInt(4294967295));return e[t+3]=h,h=h>>8,e[t+2]=h,h=h>>8,e[t+1]=h,h=h>>8,e[t]=h,t+8}u.prototype.writeBigUInt64LE=k(function(r,t=0){return dr(this,r,t,BigInt(0),BigInt("0xffffffffffffffff"))}),u.prototype.writeBigUInt64BE=k(function(r,t=0){return yr(this,r,t,BigInt(0),BigInt("0xffffffffffffffff"))}),u.prototype.writeIntLE=function(r,t,n,c){if(r=+r,t=t>>>0,!c){const v=Math.pow(2,8*n-1);A(this,r,t,n,v-1,-v)}let l=0,h=1,w=0;for(this[t]=r&255;++l<n&&(h*=256);)r<0&&w===0&&this[t+l-1]!==0&&(w=1),this[t+l]=(r/h>>0)-w&255;return t+n},u.prototype.writeIntBE=function(r,t,n,c){if(r=+r,t=t>>>0,!c){const v=Math.pow(2,8*n-1);A(this,r,t,n,v-1,-v)}let l=n-1,h=1,w=0;for(this[t+l]=r&255;--l>=0&&(h*=256);)r<0&&w===0&&this[t+l+1]!==0&&(w=1),this[t+l]=(r/h>>0)-w&255;return t+n},u.prototype.writeInt8=function(r,t,n){return r=+r,t=t>>>0,n||A(this,r,t,1,127,-128),r<0&&(r=255+r+1),this[t]=r&255,t+1},u.prototype.writeInt16LE=function(r,t,n){return r=+r,t=t>>>0,n||A(this,r,t,2,32767,-32768),this[t]=r&255,this[t+1]=r>>>8,t+2},u.prototype.writeInt16BE=function(r,t,n){return r=+r,t=t>>>0,n||A(this,r,t,2,32767,-32768),this[t]=r>>>8,this[t+1]=r&255,t+2},u.prototype.writeInt32LE=function(r,t,n){return r=+r,t=t>>>0,n||A(this,r,t,4,2147483647,-2147483648),this[t]=r&255,this[t+1]=r>>>8,this[t+2]=r>>>16,this[t+3]=r>>>24,t+4},u.prototype.writeInt32BE=function(r,t,n){return r=+r,t=t>>>0,n||A(this,r,t,4,2147483647,-2147483648),r<0&&(r=4294967295+r+1),this[t]=r>>>24,this[t+1]=r>>>16,this[t+2]=r>>>8,this[t+3]=r&255,t+4},u.prototype.writeBigInt64LE=k(function(r,t=0){return dr(this,r,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))}),u.prototype.writeBigInt64BE=k(function(r,t=0){return yr(this,r,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))});function mr(e,r,t,n,c,l){if(t+n>e.length)throw new RangeError("Index out of range");if(t<0)throw new RangeError("Index out of range")}function wr(e,r,t,n,c){return r=+r,t=t>>>0,c||mr(e,r,t,4),i.write(e,r,t,n,23,4),t+4}u.prototype.writeFloatLE=function(r,t,n){return wr(this,r,t,!0,n)},u.prototype.writeFloatBE=function(r,t,n){return wr(this,r,t,!1,n)};function gr(e,r,t,n,c){return r=+r,t=t>>>0,c||mr(e,r,t,8),i.write(e,r,t,n,52,8),t+8}u.prototype.writeDoubleLE=function(r,t,n){return gr(this,r,t,!0,n)},u.prototype.writeDoubleBE=function(r,t,n){return gr(this,r,t,!1,n)},u.prototype.copy=function(r,t,n,c){if(!u.isBuffer(r))throw new TypeError("argument should be a Buffer");if(n||(n=0),!c&&c!==0&&(c=this.length),t>=r.length&&(t=r.length),t||(t=0),c>0&&c<n&&(c=n),c===n||r.length===0||this.length===0)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("Index out of range");if(c<0)throw new RangeError("sourceEnd out of bounds");c>this.length&&(c=this.length),r.length-t<c-n&&(c=r.length-t+n);const l=c-n;return this===r&&typeof Uint8Array.prototype.copyWithin=="function"?this.copyWithin(t,n,c):Uint8Array.prototype.set.call(r,this.subarray(n,c),t),l},u.prototype.fill=function(r,t,n,c){if(typeof r=="string"){if(typeof t=="string"?(c=t,t=0,n=this.length):typeof n=="string"&&(c=n,n=this.length),c!==void 0&&typeof c!="string")throw new TypeError("encoding must be a string");if(typeof c=="string"&&!u.isEncoding(c))throw new TypeError("Unknown encoding: "+c);if(r.length===1){const h=r.charCodeAt(0);(c==="utf8"&&h<128||c==="latin1")&&(r=h)}}else typeof r=="number"?r=r&255:typeof r=="boolean"&&(r=Number(r));if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;t=t>>>0,n=n===void 0?this.length:n>>>0,r||(r=0);let l;if(typeof r=="number")for(l=t;l<n;++l)this[l]=r;else{const h=u.isBuffer(r)?r:u.from(r,c),w=h.length;if(w===0)throw new TypeError('The value "'+r+'" is invalid for argument "value"');for(l=0;l<n-t;++l)this[l+t]=h[l%w]}return this};const M={};function X(e,r,t){M[e]=class extends t{constructor(){super(),Object.defineProperty(this,"message",{value:r.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(c){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:c,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}X("ERR_BUFFER_OUT_OF_BOUNDS",function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"},RangeError),X("ERR_INVALID_ARG_TYPE",function(e,r){return`The "${e}" argument must be of type number. Received type ${typeof r}`},TypeError),X("ERR_OUT_OF_RANGE",function(e,r,t){let n=`The value of "${e}" is out of range.`,c=t;return Number.isInteger(t)&&Math.abs(t)>2**32?c=xr(String(t)):typeof t=="bigint"&&(c=String(t),(t>BigInt(2)**BigInt(32)||t<-(BigInt(2)**BigInt(32)))&&(c=xr(c)),c+="n"),n+=` It must be ${r}. Received ${c}`,n},RangeError);function xr(e){let r="",t=e.length;const n=e[0]==="-"?1:0;for(;t>=n+4;t-=3)r=`_${e.slice(t-3,t)}${r}`;return`${e.slice(0,t)}${r}`}function zr(e,r,t){P(r,"offset"),(e[r]===void 0||e[r+t]===void 0)&&j(r,e.length-(t+1))}function br(e,r,t,n,c,l){if(e>t||e<r){const h=typeof r=="bigint"?"n":"";let w;throw l>3?r===0||r===BigInt(0)?w=`>= 0${h} and < 2${h} ** ${(l+1)*8}${h}`:w=`>= -(2${h} ** ${(l+1)*8-1}${h}) and < 2 ** ${(l+1)*8-1}${h}`:w=`>= ${r}${h} and <= ${t}${h}`,new M.ERR_OUT_OF_RANGE("value",w,e)}zr(n,c,l)}function P(e,r){if(typeof e!="number")throw new M.ERR_INVALID_ARG_TYPE(r,"number",e)}function j(e,r,t){throw Math.floor(e)!==e?(P(e,t),new M.ERR_OUT_OF_RANGE(t||"offset","an integer",e)):r<0?new M.ERR_BUFFER_OUT_OF_BOUNDS:new M.ERR_OUT_OF_RANGE(t||"offset",`>= ${t?1:0} and <= ${r}`,e)}const Jr=/[^+/0-9A-Za-z-_]/g;function Xr(e){if(e=e.split("=")[0],e=e.trim().replace(Jr,""),e.length<2)return"";for(;e.length%4!==0;)e=e+"=";return e}function K(e,r){r=r||1/0;let t;const n=e.length;let c=null;const l=[];for(let h=0;h<n;++h){if(t=e.charCodeAt(h),t>55295&&t<57344){if(!c){if(t>56319){(r-=3)>-1&&l.push(239,191,189);continue}else if(h+1===n){(r-=3)>-1&&l.push(239,191,189);continue}c=t;continue}if(t<56320){(r-=3)>-1&&l.push(239,191,189),c=t;continue}t=(c-55296<<10|t-56320)+65536}else c&&(r-=3)>-1&&l.push(239,191,189);if(c=null,t<128){if((r-=1)<0)break;l.push(t)}else if(t<2048){if((r-=2)<0)break;l.push(t>>6|192,t&63|128)}else if(t<65536){if((r-=3)<0)break;l.push(t>>12|224,t>>6&63|128,t&63|128)}else if(t<1114112){if((r-=4)<0)break;l.push(t>>18|240,t>>12&63|128,t>>6&63|128,t&63|128)}else throw new Error("Invalid code point")}return l}function Kr(e){const r=[];for(let t=0;t<e.length;++t)r.push(e.charCodeAt(t)&255);return r}function Zr(e,r){let t,n,c;const l=[];for(let h=0;h<e.length&&!((r-=2)<0);++h)t=e.charCodeAt(h),n=t>>8,c=t%256,l.push(c),l.push(n);return l}function Er(e){return o.toByteArray(Xr(e))}function N(e,r,t,n){let c;for(c=0;c<n&&!(c+t>=r.length||c>=e.length);++c)r[c+t]=e[c];return c}function C(e,r){return e instanceof r||e!=null&&e.constructor!=null&&e.constructor.name!=null&&e.constructor.name===r.name}function Z(e){return e!==e}const Qr=function(){const e="0123456789abcdef",r=new Array(256);for(let t=0;t<16;++t){const n=t*16;for(let c=0;c<16;++c)r[n+c]=e[t]+e[c]}return r}();function k(e){return typeof BigInt>"u"?rt:e}function rt(){throw new Error("BigInt not supported")}})(Sr);globalThis.Buffer=Sr.Buffer;const rr={getConnectionPassword:"getConnectionPassword",setConnectionPassword:"setConnectionPassword",dAppRequest:"dAppRequest",closeLedgerTab:"closeLedgerTab",focusLedgerTab:"focusLedgerTab",closeDappTab:"closeDappTab",extensionStatus:"extensionStatus",ledgerResponse:"ledgerResponse",walletToLedger:"walletToLedger",walletResponse:"walletResponse",toContentScript:"toContentScript",walletMessage:"walletMessage",sendMessageToTab:"sendMessageToTab",detectWalletLink:"detectWalletLink",confirmation:"confirmation",offscreenLog:"offscreenLog",incomingDappMessage:"incomingDappMessage",incomingWalletMessage:"incomingWalletMessage",sendMessageEventToDapp:"sendMessageEventToDapp"},$t={extensionStatus:s=>({eventType:"extensionStatus",isExtensionAvailable:!0,isWalletLinked:s}),offscreenLog:s=>({source:"any",discriminator:"offscreenLog",messageId:crypto.randomUUID(),log:s}),setConnectionPassword:(s,o)=>({discriminator:"setConnectionPassword",messageId:crypto.randomUUID(),connectionPassword:o,source:s}),getConnectionPassword:s=>({discriminator:"getConnectionPassword",messageId:crypto.randomUUID(),source:s}),focusLedgerTab:()=>({source:"ledger",discriminator:rr.focusLedgerTab,messageId:crypto.randomUUID()}),detectWalletLink:s=>({source:s,discriminator:"detectWalletLink",messageId:crypto.randomUUID()}),dAppRequest:(s,o)=>({source:s,discriminator:"dAppRequest",messageId:crypto.randomUUID(),data:o}),walletMessage:(s,o)=>({source:s,discriminator:"walletMessage",messageId:crypto.randomUUID(),data:o}),closeLedgerTab:()=>({source:"any",discriminator:"closeLedgerTab",messageId:crypto.randomUUID()}),closeDappTab:(s,o)=>({source:s,tabId:o,discriminator:"closeDappTab",messageId:crypto.randomUUID()}),walletToLedger:(s,o)=>({source:s,discriminator:rr.walletToLedger,messageId:crypto.randomUUID(),data:o}),ledgerResponse:s=>({source:"ledger",discriminator:rr.ledgerResponse,messageId:crypto.randomUUID(),data:s}),sendMessageToTab:(s,o,i)=>({source:s,discriminator:"sendMessageToTab",messageId:crypto.randomUUID(),data:i,tabId:o}),confirmationSuccess:(s,o,i)=>({source:s,success:!0,discriminator:"confirmation",messageId:o,data:i}),confirmationError:(s,o,i)=>({source:s,success:!1,discriminator:"confirmation",messageId:o,error:i}),walletResponse:(s,o)=>({source:s,discriminator:"walletResponse",messageId:crypto.randomUUID(),data:o}),incomingDappMessage:(s,o)=>({source:s,discriminator:"incomingDappMessage",messageId:crypto.randomUUID(),data:o}),incomingWalletMessage:(s,o)=>({source:s,discriminator:"incomingWalletMessage",messageId:crypto.randomUUID(),data:o}),sendMessageEventToDapp:(s,o,i)=>({source:s,discriminator:"sendMessageEventToDapp",messageId:crypto.randomUUID(),messageEvent:o,interactionId:i})},Nt=s=>tt.fromPromise(chrome.runtime.sendMessage(s),o=>o),lt="@radixdlt/connector-extension",ft="0.4.0",pt="module",ht={node:">=18"},dt=["Alex Stelea <alex.stelea@rdx.works>","Dawid Sowa <dawid.sowa@rdx.works>"],yt="https://github.com/radixdlt/connector-extension/issues",mt="Apache-2.0",wt={start:"DEV_TOOLS=true vite --mode rcnet","start:local":"DEV_TOOLS=true vite --mode localhost","start:development":"DEV_TOOLS=true vite --mode development","build:development":"tsc && vite build --mode development","build:rcnet":"tsc && vite build --mode rcnet","build:cd":"./build.sh development && ./build.sh rcnet",preview:"vite preview",prettier:"prettier --write src",testrtc:"NODE_ENV=test karma start",lint:"eslint & npm run prettier & tsc",ladle:"ladle serve",test:"jest --forceExit --coverage","test:watch":"jest --watch"},gt={"@emotion/react":"^11.11.1","@emotion/styled":"^11.11.0","@ledgerhq/hw-transport-webhid":"^6.27.12","@mui/material":"^5.14.0","@radixdlt/babylon-gateway-api-sdk":"^1.0.0-rc.2.5","@stitches/react":"^1.2.8","@types/blake2b":"^2.1.0",bech32:"^2.0.0",bip32:"^2.0.0",bip39:"^3.1.0",blake2b:"^2.1.4",buffer:"^6.0.3","ed25519-hd-key":"^1.3.0",elliptic:"^6.5.4","lodash.chunk":"^4.2.0",loglevel:"^1.8.0",neverthrow:"^6.0.0",react:"^18.2.0","react-dom":"^18.2.0","react-qr-code":"^2.0.8","react-use":"^17.4.0",rxjs:"^7.8.1",tslog:"^4.7.1",zod:"^3.19.1"},xt={"@babel/preset-env":"^7.22.7","@babel/preset-typescript":"^7.18.6","@commitlint/cli":"^17.3.0","@commitlint/config-conventional":"^17.3.0","@crxjs/vite-plugin":"^2.0.0-beta.18","@esbuild-plugins/node-globals-polyfill":"^0.2.3","@esbuild-plugins/node-modules-polyfill":"^0.2.2","@hirez_io/observer-spy":"^2.2.0","@koush/wrtc":"^0.5.3","@ladle/react":"^2.4.3","@semantic-release/exec":"^6.0.3","@testing-library/jest-dom":"^5.16.5","@testing-library/react":"^14.0.0","@testing-library/user-event":"^14.4.3","@types/blake2b":"^2.1.0","@types/chai":"^4.3.3","@types/chrome":"^0.0.241","@types/elliptic":"^6.4.14","@types/jest":"^29.1.2","@types/lodash.chunk":"^4.2.7","@types/react":"^18.0.21","@types/react-dom":"^18.0.6","@types/w3c-web-hid":"^1.0.3","@typescript-eslint/eslint-plugin":"^5.40.0","@typescript-eslint/parser":"^5.40.0","@vitejs/plugin-react":"^2.2.0","babel-jest":"^29.1.2","babel-preset-vite":"^1.0.4",dotenv:"^16.0.3","dotenv-cli":"^7.2.1",eslint:"^8.25.0","eslint-config-alloy":"^4.7.0","eslint-plugin-react":"^7.31.10","eslint-plugin-react-hooks":"^4.6.0","eslint-plugin-unused-imports":"^2.0.0",husky:"^8.0.1",jest:"^29.1.2","jest-chrome":"^0.8.0","jest-environment-jsdom":"^29.1.2","jest-sonar-reporter":"^2.0.0","jest-websocket-mock":"^2.4.0",prettier:"^3.0.0","semantic-release":"^21.0.7","semantic-release-chrome":"^3.2.0","ts-jest":"^29.0.3","ts-node":"^10.9.1",typescript:"^4.8.4",vite:"^3.2.3","vite-compatible-readable-stream":"^3.6.1","vite-tsconfig-paths":"^4.0.7"},bt={type:"git",url:"https://github.com/radixdlt/connector-extension.git"},Et={"jest-chrome":{jest:"$jest"}},Bt={name:lt,private:!0,version:ft,type:pt,engines:ht,authors:dt,bugs:yt,license:mt,scripts:wt,dependencies:gt,devDependencies:xt,repository:bt,overrides:Et},{version:It}=Bt,vt={test:[{urls:"turn:turn-dev-udp.rdx-works-main.extratools.works:80?transport=udp",username:"username",credential:"password"},{urls:"turn:turn-dev-tcp.rdx-works-main.extratools.works:80?transport=tcp",username:"username",credential:"password"}],rcnet:[{urls:"turn:turn-rcnet-udp.radixdlt.com:80?transport=udp",username:"username",credential:"password"},{urls:"turn:turn-rcnet-tcp.radixdlt.com:80?transport=tcp",username:"username",credential:"password"}],development:[{urls:"turn:turn-dev-udp.rdx-works-main.extratools.works:80?transport=udp",username:"username",credential:"password"},{urls:"turn:turn-dev-tcp.rdx-works-main.extratools.works:80?transport=tcp",username:"username",credential:"password"}]},Ut="rcnet",Wt={environment:"rcnet",logLevel:"0",version:It,secrets:{connectionPasswordByteLength:32},storage:{key:"radix"},signalingServer:{baseUrl:"wss://signaling-server-rcnet.radixdlt.com",reconnect:{interval:1e3},useBatchedIceCandidates:!1,iceCandidatesBatchTime:2e3,useTargetClientId:!0},offscreen:{url:"src/chrome/offscreen/index.html"},webRTC:{isInitiator:!0,disconnectOnVisibilityChange:!1,peerConnectionConfig:{iceServers:[{urls:"stun:stun.l.google.com:19302"},{urls:"stun:stun1.l.google.com:19302"},{urls:"stun:stun2.l.google.com:19302"},{urls:"stun:stun3.l.google.com:19302"},{urls:"stun:stun4.l.google.com:19302"},...vt[Ut]||[]]},dataChannelConfig:{negotiated:!0,id:0,ordered:!0},chunkSize:11500,confirmationTimeout:1e4},devTools:{url:"src/chrome/dev-tools/dev-tools.html"},popup:{width:400,height:600,offsetTop:0,pages:{pairing:"src/pairing/index.html",ledger:"src/ledger/index.html"},closeDelayTime:700,showOnInstall:!1}};var nr=function(s,o){return nr=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(i,a){i.__proto__=a}||function(i,a){for(var p in a)Object.prototype.hasOwnProperty.call(a,p)&&(i[p]=a[p])},nr(s,o)};function H(s,o){if(typeof o!="function"&&o!==null)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");nr(s,o);function i(){this.constructor=s}s.prototype=o===null?Object.create(o):(i.prototype=o.prototype,new i)}function qt(s,o,i,a){function p(f){return f instanceof i?f:new i(function(d){d(f)})}return new(i||(i=Promise))(function(f,d){function u(g){try{y(a.next(g))}catch(b){d(b)}}function m(g){try{y(a.throw(g))}catch(b){d(b)}}function y(g){g.done?f(g.value):p(g.value).then(u,m)}y((a=a.apply(s,o||[])).next())})}function Yt(s,o){var i={label:0,sent:function(){if(f[0]&1)throw f[1];return f[1]},trys:[],ops:[]},a,p,f,d;return d={next:u(0),throw:u(1),return:u(2)},typeof Symbol=="function"&&(d[Symbol.iterator]=function(){return this}),d;function u(y){return function(g){return m([y,g])}}function m(y){if(a)throw new TypeError("Generator is already executing.");for(;d&&(d=0,y[0]&&(i=0)),i;)try{if(a=1,p&&(f=y[0]&2?p.return:y[0]?p.throw||((f=p.return)&&f.call(p),0):p.next)&&!(f=f.call(p,y[1])).done)return f;switch(p=0,f&&(y=[y[0]&2,f.value]),y[0]){case 0:case 1:f=y;break;case 4:return i.label++,{value:y[1],done:!1};case 5:i.label++,p=y[1],y=[0];continue;case 7:y=i.ops.pop(),i.trys.pop();continue;default:if(f=i.trys,!(f=f.length>0&&f[f.length-1])&&(y[0]===6||y[0]===2)){i=0;continue}if(y[0]===3&&(!f||y[1]>f[0]&&y[1]<f[3])){i.label=y[1];break}if(y[0]===6&&i.label<f[1]){i.label=f[1],f=y;break}if(f&&i.label<f[2]){i.label=f[2],i.ops.push(y);break}f[2]&&i.ops.pop(),i.trys.pop();continue}y=o.call(s,i)}catch(g){y=[6,g],p=0}finally{a=f=0}if(y[0]&5)throw y[1];return{value:y[0]?y[1]:void 0,done:!0}}}function $(s){var o=typeof Symbol=="function"&&Symbol.iterator,i=o&&s[o],a=0;if(i)return i.call(s);if(s&&typeof s.length=="number")return{next:function(){return s&&a>=s.length&&(s=void 0),{value:s&&s[a++],done:!s}}};throw new TypeError(o?"Object is not iterable.":"Symbol.iterator is not defined.")}function Y(s,o){var i=typeof Symbol=="function"&&s[Symbol.iterator];if(!i)return s;var a=i.call(s),p,f=[],d;try{for(;(o===void 0||o-- >0)&&!(p=a.next()).done;)f.push(p.value)}catch(u){d={error:u}}finally{try{p&&!p.done&&(i=a.return)&&i.call(a)}finally{if(d)throw d.error}}return f}function G(s,o,i){if(i||arguments.length===2)for(var a=0,p=o.length,f;a<p;a++)(f||!(a in o))&&(f||(f=Array.prototype.slice.call(o,0,a)),f[a]=o[a]);return s.concat(f||Array.prototype.slice.call(o))}function ir(s){return this instanceof ir?(this.v=s,this):new ir(s)}function Gt(s,o,i){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var a=i.apply(s,o||[]),p,f=[];return p={},d("next"),d("throw"),d("return"),p[Symbol.asyncIterator]=function(){return this},p;function d(x){a[x]&&(p[x]=function(E){return new Promise(function(_,F){f.push([x,E,_,F])>1||u(x,E)})})}function u(x,E){try{m(a[x](E))}catch(_){b(f[0][3],_)}}function m(x){x.value instanceof ir?Promise.resolve(x.value.v).then(y,g):b(f[0][2],x)}function y(x){u("next",x)}function g(x){u("throw",x)}function b(x,E){x(E),f.shift(),f.length&&u(f[0][0],f[0][1])}}function Vt(s){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var o=s[Symbol.asyncIterator],i;return o?o.call(s):(s=typeof $=="function"?$(s):s[Symbol.iterator](),i={},a("next"),a("throw"),a("return"),i[Symbol.asyncIterator]=function(){return this},i);function a(f){i[f]=s[f]&&function(d){return new Promise(function(u,m){d=s[f](d),p(u,m,d.done,d.value)})}}function p(f,d,u,m){Promise.resolve(m).then(function(y){f({value:y,done:u})},d)}}function D(s){return typeof s=="function"}function Tr(s){var o=function(a){Error.call(a),a.stack=new Error().stack},i=s(o);return i.prototype=Object.create(Error.prototype),i.prototype.constructor=i,i}var tr=Tr(function(s){return function(i){s(this),this.message=i?i.length+` errors occurred during unsubscription:
`+i.map(function(a,p){return p+1+") "+a.toString()}).join(`
  `):"",this.name="UnsubscriptionError",this.errors=i}});function or(s,o){if(s){var i=s.indexOf(o);0<=i&&s.splice(i,1)}}var z=function(){function s(o){this.initialTeardown=o,this.closed=!1,this._parentage=null,this._finalizers=null}return s.prototype.unsubscribe=function(){var o,i,a,p,f;if(!this.closed){this.closed=!0;var d=this._parentage;if(d)if(this._parentage=null,Array.isArray(d))try{for(var u=$(d),m=u.next();!m.done;m=u.next()){var y=m.value;y.remove(this)}}catch(F){o={error:F}}finally{try{m&&!m.done&&(i=u.return)&&i.call(u)}finally{if(o)throw o.error}}else d.remove(this);var g=this.initialTeardown;if(D(g))try{g()}catch(F){f=F instanceof tr?F.errors:[F]}var b=this._finalizers;if(b){this._finalizers=null;try{for(var x=$(b),E=x.next();!E.done;E=x.next()){var _=E.value;try{Br(_)}catch(F){f=f!=null?f:[],F instanceof tr?f=G(G([],Y(f)),Y(F.errors)):f.push(F)}}}catch(F){a={error:F}}finally{try{E&&!E.done&&(p=x.return)&&p.call(x)}finally{if(a)throw a.error}}}if(f)throw new tr(f)}},s.prototype.add=function(o){var i;if(o&&o!==this)if(this.closed)Br(o);else{if(o instanceof s){if(o.closed||o._hasParent(this))return;o._addParent(this)}(this._finalizers=(i=this._finalizers)!==null&&i!==void 0?i:[]).push(o)}},s.prototype._hasParent=function(o){var i=this._parentage;return i===o||Array.isArray(i)&&i.includes(o)},s.prototype._addParent=function(o){var i=this._parentage;this._parentage=Array.isArray(i)?(i.push(o),i):i?[i,o]:o},s.prototype._removeParent=function(o){var i=this._parentage;i===o?this._parentage=null:Array.isArray(i)&&or(i,o)},s.prototype.remove=function(o){var i=this._finalizers;i&&or(i,o),o instanceof s&&o._removeParent(this)},s.EMPTY=function(){var o=new s;return o.closed=!0,o}(),s}(),_r=z.EMPTY;function Cr(s){return s instanceof z||s&&"closed"in s&&D(s.remove)&&D(s.add)&&D(s.unsubscribe)}function Br(s){D(s)?s():s.unsubscribe()}var Rr={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},sr={setTimeout:function(s,o){for(var i=[],a=2;a<arguments.length;a++)i[a-2]=arguments[a];var p=sr.delegate;return p!=null&&p.setTimeout?p.setTimeout.apply(p,G([s,o],Y(i))):setTimeout.apply(void 0,G([s,o],Y(i)))},clearTimeout:function(s){var o=sr.delegate;return((o==null?void 0:o.clearTimeout)||clearTimeout)(s)},delegate:void 0};function Ft(s){sr.setTimeout(function(){throw s})}function Ir(){}function q(s){s()}var Dr=function(s){H(o,s);function o(i){var a=s.call(this)||this;return a.isStopped=!1,i?(a.destination=i,Cr(i)&&i.add(a)):a.destination=_t,a}return o.create=function(i,a,p){return new ur(i,a,p)},o.prototype.next=function(i){this.isStopped||this._next(i)},o.prototype.error=function(i){this.isStopped||(this.isStopped=!0,this._error(i))},o.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},o.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,s.prototype.unsubscribe.call(this),this.destination=null)},o.prototype._next=function(i){this.destination.next(i)},o.prototype._error=function(i){try{this.destination.error(i)}finally{this.unsubscribe()}},o.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},o}(z),St=Function.prototype.bind;function er(s,o){return St.call(s,o)}var At=function(){function s(o){this.partialObserver=o}return s.prototype.next=function(o){var i=this.partialObserver;if(i.next)try{i.next(o)}catch(a){W(a)}},s.prototype.error=function(o){var i=this.partialObserver;if(i.error)try{i.error(o)}catch(a){W(a)}else W(o)},s.prototype.complete=function(){var o=this.partialObserver;if(o.complete)try{o.complete()}catch(i){W(i)}},s}(),ur=function(s){H(o,s);function o(i,a,p){var f=s.call(this)||this,d;if(D(i)||!i)d={next:i!=null?i:void 0,error:a!=null?a:void 0,complete:p!=null?p:void 0};else{var u;f&&Rr.useDeprecatedNextContext?(u=Object.create(i),u.unsubscribe=function(){return f.unsubscribe()},d={next:i.next&&er(i.next,u),error:i.error&&er(i.error,u),complete:i.complete&&er(i.complete,u)}):d=i}return f.destination=new At(d),f}return o}(Dr);function W(s){Ft(s)}function Tt(s){throw s}var _t={closed:!0,next:Ir,error:Tt,complete:Ir},Ct=function(){return typeof Symbol=="function"&&Symbol.observable||"@@observable"}();function Rt(s){return s}function Dt(s){return s.length===0?Rt:s.length===1?s[0]:function(i){return s.reduce(function(a,p){return p(a)},i)}}var vr=function(){function s(o){o&&(this._subscribe=o)}return s.prototype.lift=function(o){var i=new s;return i.source=this,i.operator=o,i},s.prototype.subscribe=function(o,i,a){var p=this,f=Lt(o)?o:new ur(o,i,a);return q(function(){var d=p,u=d.operator,m=d.source;f.add(u?u.call(f,m):m?p._subscribe(f):p._trySubscribe(f))}),f},s.prototype._trySubscribe=function(o){try{return this._subscribe(o)}catch(i){o.error(i)}},s.prototype.forEach=function(o,i){var a=this;return i=Ur(i),new i(function(p,f){var d=new ur({next:function(u){try{o(u)}catch(m){f(m),d.unsubscribe()}},error:f,complete:p});a.subscribe(d)})},s.prototype._subscribe=function(o){var i;return(i=this.source)===null||i===void 0?void 0:i.subscribe(o)},s.prototype[Ct]=function(){return this},s.prototype.pipe=function(){for(var o=[],i=0;i<arguments.length;i++)o[i]=arguments[i];return Dt(o)(this)},s.prototype.toPromise=function(o){var i=this;return o=Ur(o),new o(function(a,p){var f;i.subscribe(function(d){return f=d},function(d){return p(d)},function(){return a(f)})})},s.create=function(o){return new s(o)},s}();function Ur(s){var o;return(o=s!=null?s:Rr.Promise)!==null&&o!==void 0?o:Promise}function kt(s){return s&&D(s.next)&&D(s.error)&&D(s.complete)}function Lt(s){return s&&s instanceof Dr||kt(s)&&Cr(s)}var Mt=Tr(function(s){return function(){s(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}}),Pt=function(s){H(o,s);function o(){var i=s.call(this)||this;return i.closed=!1,i.currentObservers=null,i.observers=[],i.isStopped=!1,i.hasError=!1,i.thrownError=null,i}return o.prototype.lift=function(i){var a=new Fr(this,this);return a.operator=i,a},o.prototype._throwIfClosed=function(){if(this.closed)throw new Mt},o.prototype.next=function(i){var a=this;q(function(){var p,f;if(a._throwIfClosed(),!a.isStopped){a.currentObservers||(a.currentObservers=Array.from(a.observers));try{for(var d=$(a.currentObservers),u=d.next();!u.done;u=d.next()){var m=u.value;m.next(i)}}catch(y){p={error:y}}finally{try{u&&!u.done&&(f=d.return)&&f.call(d)}finally{if(p)throw p.error}}}})},o.prototype.error=function(i){var a=this;q(function(){if(a._throwIfClosed(),!a.isStopped){a.hasError=a.isStopped=!0,a.thrownError=i;for(var p=a.observers;p.length;)p.shift().error(i)}})},o.prototype.complete=function(){var i=this;q(function(){if(i._throwIfClosed(),!i.isStopped){i.isStopped=!0;for(var a=i.observers;a.length;)a.shift().complete()}})},o.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(o.prototype,"observed",{get:function(){var i;return((i=this.observers)===null||i===void 0?void 0:i.length)>0},enumerable:!1,configurable:!0}),o.prototype._trySubscribe=function(i){return this._throwIfClosed(),s.prototype._trySubscribe.call(this,i)},o.prototype._subscribe=function(i){return this._throwIfClosed(),this._checkFinalizedStatuses(i),this._innerSubscribe(i)},o.prototype._innerSubscribe=function(i){var a=this,p=this,f=p.hasError,d=p.isStopped,u=p.observers;return f||d?_r:(this.currentObservers=null,u.push(i),new z(function(){a.currentObservers=null,or(u,i)}))},o.prototype._checkFinalizedStatuses=function(i){var a=this,p=a.hasError,f=a.thrownError,d=a.isStopped;p?i.error(f):d&&i.complete()},o.prototype.asObservable=function(){var i=new vr;return i.source=this,i},o.create=function(i,a){return new Fr(i,a)},o}(vr),Fr=function(s){H(o,s);function o(i,a){var p=s.call(this)||this;return p.destination=i,p.source=a,p}return o.prototype.next=function(i){var a,p;(p=(a=this.destination)===null||a===void 0?void 0:a.next)===null||p===void 0||p.call(a,i)},o.prototype.error=function(i){var a,p;(p=(a=this.destination)===null||a===void 0?void 0:a.error)===null||p===void 0||p.call(a,i)},o.prototype.complete=function(){var i,a;(a=(i=this.destination)===null||i===void 0?void 0:i.complete)===null||a===void 0||a.call(i)},o.prototype._subscribe=function(i){var a,p;return(p=(a=this.source)===null||a===void 0?void 0:a.subscribe(i))!==null&&p!==void 0?p:_r},o}(Pt);export{vr as O,Pt as S,H as _,z as a,Sr as b,$t as c,Wt as d,G as e,Y as f,D as g,Dr as h,Rt as i,Gt as j,Yt as k,ir as l,$ as m,Ir as n,Ct as o,qt as p,Vt as q,Ft as r,Nt as s,Tr as t,ur as u,or as v,rr as w};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
