import{d as v,s as se,c as fe}from"./Subject.c67f7ae3.js";const b={reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],overline:[53,55],inverse:[7,27],hidden:[8,28],strikethrough:[9,29],black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],blackBright:[90,39],redBright:[91,39],greenBright:[92,39],yellowBright:[93,39],blueBright:[94,39],magentaBright:[95,39],cyanBright:[96,39],whiteBright:[97,39],bgBlack:[40,49],bgRed:[41,49],bgGreen:[42,49],bgYellow:[43,49],bgBlue:[44,49],bgMagenta:[45,49],bgCyan:[46,49],bgWhite:[47,49],bgBlackBright:[100,49],bgRedBright:[101,49],bgGreenBright:[102,49],bgYellowBright:[103,49],bgBlueBright:[104,49],bgMagentaBright:[105,49],bgCyanBright:[106,49],bgWhiteBright:[107,49]};function J(t,e,r,n=!1){const i=String(e),f=(o,s)=>`\x1B[${s[0]}m${o}\x1B[${s[1]}m`,a=(o,s)=>s!=null&&typeof s=="string"?f(o,b[s]):s!=null&&Array.isArray(s)?s.reduce((l,h)=>a(l,h),o):s!=null&&s[o.trim()]!=null?a(o,s[o.trim()]):s!=null&&s["*"]!=null?a(o,s["*"]):o;return i.replace(/{{(.+?)}}/g,(o,s)=>{var h;const l=r[s]!=null?r[s]:n?"":o;return t.stylePrettyLogs?a(l,(h=t==null?void 0:t.prettyLogStyles)==null?void 0:h[s])+f("",b.reset):l})}function O(t){const e=new Set;return JSON.stringify(t,(r,n)=>{if(typeof n=="object"&&n!==null){if(e.has(n))return"[Circular]";e.add(n)}return n})}function p(t,e){const r={seen:[],stylize:j};return e!=null&&re(r,e),F(r.showHidden)&&(r.showHidden=!1),F(r.depth)&&(r.depth=2),F(r.colors)&&(r.colors=!0),F(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=le),K(r,t,r.depth)}p.colors=b;p.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"};function ae(t){return typeof t=="boolean"}function F(t){return t==null}function j(t){return t}function le(t,e){var n,i,f,a;const r=p.styles[e];return r!=null&&((i=(n=p==null?void 0:p.colors)==null?void 0:n[r])==null?void 0:i[0])!=null&&((a=(f=p==null?void 0:p.colors)==null?void 0:f[r])==null?void 0:a[1])!=null?"\x1B["+p.colors[r][0]+"m"+t+"\x1B["+p.colors[r][1]+"m":t}function W(t){return typeof t=="function"}function M(t){return typeof t=="string"}function he(t){return typeof t=="number"}function ee(t){return t===null}function te(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function g(t){return $(t)&&Y(t)==="[object RegExp]"}function $(t){return typeof t=="object"&&t!==null}function U(t){return $(t)&&(Y(t)==="[object Error]"||t instanceof Error)}function Q(t){return $(t)&&Y(t)==="[object Date]"}function Y(t){return Object.prototype.toString.call(t)}function ce(t){const e={};return t.forEach(r=>{e[r]=!0}),e}function pe(t,e,r,n,i){const f=[];for(let a=0,o=e.length;a<o;++a)te(e,String(a))?f.push(G(t,e,r,n,String(a),!0)):f.push("");return i.forEach(a=>{a.match(/^\d+$/)||f.push(G(t,e,r,n,a,!0))}),f}function x(t){return"["+Error.prototype.toString.call(t)+"]"}function K(t,e,r=0){if(t.customInspect&&e!=null&&W(e)&&(e==null?void 0:e.inspect)!==p&&!((e==null?void 0:e.constructor)&&(e==null?void 0:e.constructor.prototype)===e)){if(typeof e.inspect!="function"&&e.toString!=null)return e.toString();let h=e==null?void 0:e.inspect(r,t);return M(h)||(h=K(t,h,r)),h}const n=B(t,e);if(n)return n;let i=Object.keys(e);const f=ce(i);try{t.showHidden&&Object.getOwnPropertyNames&&(i=Object.getOwnPropertyNames(e))}catch{}if(U(e)&&(i.indexOf("message")>=0||i.indexOf("description")>=0))return x(e);if(i.length===0)if(W(t.stylize)){if(W(e)){const h=e.name?": "+e.name:"";return t.stylize("[Function"+h+"]","special")}if(g(e))return t.stylize(RegExp.prototype.toString.call(e),"regexp");if(Q(e))return t.stylize(Date.prototype.toString.call(e),"date");if(U(e))return x(e)}else return e;let a="",o=!1,s=[`{
`,`
}`];if(Array.isArray(e)&&(o=!0,s=[`[
`,`
]`]),W(e)&&(a=" [Function"+(e.name?": "+e.name:"")+"]"),g(e)&&(a=" "+RegExp.prototype.toString.call(e)),Q(e)&&(a=" "+Date.prototype.toUTCString.call(e)),U(e)&&(a=" "+x(e)),i.length===0&&(!o||e.length==0))return s[0]+a+s[1];if(r<0)return g(e)?t.stylize(RegExp.prototype.toString.call(e),"regexp"):t.stylize("[Object]","special");t.seen.push(e);let l;return o?l=pe(t,e,r,f,i):l=i.map(h=>G(t,e,r,f,h,o)),t.seen.pop(),me(l,a,s)}function G(t,e,r,n,i,f){let a,o,s;s={value:void 0};try{s.value=e[i]}catch{}try{Object.getOwnPropertyDescriptor&&(s=Object.getOwnPropertyDescriptor(e,i)||s)}catch{}if(s.get?s.set?o=t.stylize("[Getter/Setter]","special"):o=t.stylize("[Getter]","special"):s.set&&(o=t.stylize("[Setter]","special")),te(n,i)||(a="["+i+"]"),o||(t.seen.indexOf(s.value)<0?(ee(r)?o=K(t,s.value,void 0):o=K(t,s.value,r-1),o.indexOf(`
`)>-1&&(f?o=o.split(`
`).map(l=>"  "+l).join(`
`).substr(2):o=`
`+o.split(`
`).map(l=>"   "+l).join(`
`))):o=t.stylize("[Circular]","special")),F(a)){if(f&&i.match(/^\d+$/))return o;a=JSON.stringify(""+i),a.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(a=a.substr(1,a.length-2),a=t.stylize(a,"name")):(a=a.replace(/'/g,"\\'").replace(/\\"/g,"\\'").replace(/(^"|"$)/g,"'"),a=t.stylize(a,"string"))}return a+": "+o}function B(t,e){if(F(e))return t.stylize("undefined","undefined");if(M(e)){const r="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,"\\'")+"'";return t.stylize(r,"string")}if(he(e))return t.stylize(""+e,"number");if(ae(e))return t.stylize(""+e,"boolean");if(ee(e))return t.stylize("null","null")}function me(t,e,r){return r[0]+(e===""?"":e+`
`)+"  "+t.join(`,
  `)+" "+r[1]}function re(t,e){if(!e||!$(e))return t;const r=Object.keys(e);let n=r.length;for(;n--;)t[r[n]]=e[r[n]];return t}function ue(t,...e){const r={seen:[],stylize:j};t!=null&&re(r,t);const n=e[0];let i=0,f="",a="";if(typeof n=="string"){if(e.length===1)return n;let o,s=0;for(let l=0;l<n.length-1;l++)if(n.charCodeAt(l)===37){const h=n.charCodeAt(++l);if(i+1!==e.length){switch(h){case 115:{const c=e[++i];typeof c=="number"||typeof c=="bigint"?o=B(r,c):typeof c!="object"||c===null?o=String(c):o=p(c,{...t,compact:3,colors:!1,depth:0});break}case 106:o=O(e[++i]);break;case 100:{const c=e[++i];typeof c=="bigint"?o=B(r,c):typeof c=="symbol"?o="NaN":o=B(r,c);break}case 79:o=p(e[++i],t);break;case 111:o=p(e[++i],{...t,showHidden:!0,showProxy:!0,depth:4});break;case 105:{const c=e[++i];typeof c=="bigint"?o=B(r,c):typeof c=="symbol"?o="NaN":o=B(r,parseInt(o));break}case 102:{const c=e[++i];typeof c=="symbol"?o="NaN":o=B(r,parseInt(c));break}case 99:i+=1,o="";break;case 37:f+=n.slice(s,l),s=l+1;continue;default:continue}s!==l-1&&(f+=n.slice(s,l-1)),f+=o,s=l+1}else h===37&&(f+=n.slice(s,l),s=l+1)}s!==0&&(i++,a=" ",s<n.length&&(f+=n.slice(s)))}for(;i<e.length;){const o=e[i];f+=a,f+=typeof o!="string"?p(o,t):o,a=" ",i++}return f}var X;const ye={runtime:[typeof window,typeof document].includes("undefined")?"Generic":"Browser",browser:(X=globalThis==null?void 0:globalThis.navigator)==null?void 0:X.userAgent},de=/(?:(?:file|https?|global code|[^@]+)@)?(?:file:)?((?:\/[^:/]+){2,})(?::(\d+))?(?::(\d+))?/;function we(t,e,r,n,i,f){return Object.assign({},ye,{name:i,parentNames:f,date:new Date,logLevelId:t,logLevelName:e,path:n?void 0:Le(r)})}function Le(t,e=Error()){var r,n,i;return ie((i=(n=(r=e==null?void 0:e.stack)==null?void 0:r.split(`
`))==null?void 0:n.filter(f=>!f.includes("Error: ")))==null?void 0:i[t])}function ne(t){var e,r,n;return(n=(r=(e=t==null?void 0:t.stack)==null?void 0:e.split(`
`))==null?void 0:r.filter(i=>!i.includes("Error: ")))==null?void 0:n.reduce((i,f)=>(i.push(ie(f)),i),[])}function ie(t){const e=globalThis.location.origin,r={fullFilePath:void 0,fileName:void 0,fileNameWithLine:void 0,fileColumn:void 0,fileLine:void 0,filePath:void 0,filePathWithLine:void 0,method:void 0};if(t!=null){const n=t.match(de);if(n){r.filePath=n[1].replace(/\?.*$/,""),r.fullFilePath=`${e}${r.filePath}`;const i=r.filePath.split("/");r.fileName=i[i.length-1],r.fileLine=n[2],r.fileColumn=n[3],r.filePathWithLine=`${r.filePath}:${r.fileLine}`,r.fileNameWithLine=`${r.fileName}:${r.fileLine}`}}return r}function H(t){return t instanceof Error}function Se(t,e){return t.reduce((r,n)=>(H(n)?r.errors.push(Ne(n,e)):r.args.push(n),r),{args:[],errors:[]})}function Ne(t,e){const r=ne(t).map(i=>J(e,e.prettyErrorStackTemplate,{...i},!0)),n={errorName:` ${t.name} `,errorMessage:t.message,errorStack:r.join(`
`)};return J(e,e.prettyErrorTemplate,n)}function Pe(t,e,r,n){const i=(r.length>0&&e.length>0?`
`:"")+r.join(`
`);n.prettyInspectOptions.colors=n.stylePrettyLogs,console.log(t+ue(n.prettyInspectOptions,...e)+i)}function ke(t){console.log(O(t))}function m(t,e=2,r=0){return t!=null&&isNaN(t)?"":(t=t!=null?t+r:t,e===2?t==null?"--":t<10?"0"+t:t.toString():t==null?"---":t<10?"00"+t:t<100?"0"+t:t.toString())}class Ee{constructor(e,r,n=4){var s,l,h,c,u,y,d,w,L,S,N,P,k,E,C,T,A,D,z,_,I,R,V,Z,q;this.logObj=r,this.stackDepthLevel=n;const i=![typeof window,typeof document].includes("undefined"),f=Object.prototype.toString.call(typeof process<"u"?process:0)==="[object process]";this.runtime=i?"browser":f?"nodejs":"unknown";const a=i?(((window==null?void 0:window.chrome)||window.Intl&&(Intl==null?void 0:Intl.v8BreakIterator))&&"CSS"in window)!=null:!1,o=i?/^((?!chrome|android).)*safari/i.test(navigator==null?void 0:navigator.userAgent):!1;this.stackDepthLevel=o?4:this.stackDepthLevel,this.settings={type:(s=e==null?void 0:e.type)!=null?s:"pretty",name:e==null?void 0:e.name,parentNames:e==null?void 0:e.parentNames,minLevel:(l=e==null?void 0:e.minLevel)!=null?l:0,argumentsArrayName:e==null?void 0:e.argumentsArrayName,hideLogPositionForProduction:(h=e==null?void 0:e.hideLogPositionForProduction)!=null?h:!1,prettyLogTemplate:(c=e==null?void 0:e.prettyLogTemplate)!=null?c:"{{yyyy}}.{{mm}}.{{dd}} {{hh}}:{{MM}}:{{ss}}:{{ms}}	{{logLevelName}}	{{filePathWithLine}}{{nameWithDelimiterPrefix}}	",prettyErrorTemplate:(u=e==null?void 0:e.prettyErrorTemplate)!=null?u:`
{{errorName}} {{errorMessage}}
error stack:
{{errorStack}}`,prettyErrorStackTemplate:(y=e==null?void 0:e.prettyErrorStackTemplate)!=null?y:`  \u2022 {{fileName}}	{{method}}
	{{filePathWithLine}}`,prettyErrorParentNamesSeparator:(d=e==null?void 0:e.prettyErrorParentNamesSeparator)!=null?d:":",prettyErrorLoggerNameDelimiter:(w=e==null?void 0:e.prettyErrorLoggerNameDelimiter)!=null?w:"	",stylePrettyLogs:(L=e==null?void 0:e.stylePrettyLogs)!=null?L:!0,prettyLogTimeZone:(S=e==null?void 0:e.prettyLogTimeZone)!=null?S:"UTC",prettyLogStyles:(N=e==null?void 0:e.prettyLogStyles)!=null?N:{logLevelName:{"*":["bold","black","bgWhiteBright","dim"],SILLY:["bold","white"],TRACE:["bold","whiteBright"],DEBUG:["bold","green"],INFO:["bold","blue"],WARN:["bold","yellow"],ERROR:["bold","red"],FATAL:["bold","redBright"]},dateIsoStr:"white",filePathWithLine:"white",name:["white","bold"],nameWithDelimiterPrefix:["white","bold"],nameWithDelimiterSuffix:["white","bold"],errorName:["bold","bgRedBright","whiteBright"],fileName:["yellow"],fileNameWithLine:"white"},prettyInspectOptions:(P=e==null?void 0:e.prettyInspectOptions)!=null?P:{colors:!0,compact:!1,depth:1/0},metaProperty:(k=e==null?void 0:e.metaProperty)!=null?k:"_meta",maskPlaceholder:(E=e==null?void 0:e.maskPlaceholder)!=null?E:"[***]",maskValuesOfKeys:(C=e==null?void 0:e.maskValuesOfKeys)!=null?C:["password"],maskValuesOfKeysCaseInsensitive:(T=e==null?void 0:e.maskValuesOfKeysCaseInsensitive)!=null?T:!1,maskValuesRegEx:e==null?void 0:e.maskValuesRegEx,prefix:[...(A=e==null?void 0:e.prefix)!=null?A:[]],attachedTransports:[...(D=e==null?void 0:e.attachedTransports)!=null?D:[]],overwrite:{mask:(z=e==null?void 0:e.overwrite)==null?void 0:z.mask,toLogObj:(_=e==null?void 0:e.overwrite)==null?void 0:_.toLogObj,addMeta:(I=e==null?void 0:e.overwrite)==null?void 0:I.addMeta,formatMeta:(R=e==null?void 0:e.overwrite)==null?void 0:R.formatMeta,formatLogObj:(V=e==null?void 0:e.overwrite)==null?void 0:V.formatLogObj,transportFormatted:(Z=e==null?void 0:e.overwrite)==null?void 0:Z.transportFormatted,transportJSON:(q=e==null?void 0:e.overwrite)==null?void 0:q.transportJSON}},this.settings.stylePrettyLogs=this.settings.stylePrettyLogs&&i&&!a?!1:this.settings.stylePrettyLogs}log(e,r,...n){var c,u,y,d,w,L,S,N,P,k,E,C,T,A;if(e<this.settings.minLevel)return;const i=[...this.settings.prefix,...n],f=((c=this.settings.overwrite)==null?void 0:c.mask)!=null?(u=this.settings.overwrite)==null?void 0:u.mask(i):this.settings.maskValuesOfKeys!=null&&this.settings.maskValuesOfKeys.length>0?this._mask(i):i,a=this.logObj!=null?this._recursiveCloneAndExecuteFunctions(this.logObj):void 0,o=((y=this.settings.overwrite)==null?void 0:y.toLogObj)!=null?(d=this.settings.overwrite)==null?void 0:d.toLogObj(f,a):this._toLogObj(f,a),s=((w=this.settings.overwrite)==null?void 0:w.addMeta)!=null?(L=this.settings.overwrite)==null?void 0:L.addMeta(o,e,r):this._addMetaToLogObj(o,e,r);let l,h;return((S=this.settings.overwrite)==null?void 0:S.formatMeta)!=null&&(l=(N=this.settings.overwrite)==null?void 0:N.formatMeta(s==null?void 0:s[this.settings.metaProperty])),((P=this.settings.overwrite)==null?void 0:P.formatLogObj)!=null&&(h=(k=this.settings.overwrite)==null?void 0:k.formatLogObj(f,this.settings)),this.settings.type==="pretty"&&(l=l!=null?l:this._prettyFormatLogObjMeta(s==null?void 0:s[this.settings.metaProperty]),h=h!=null?h:Se(f,this.settings)),l!=null&&h!=null?((E=this.settings.overwrite)==null?void 0:E.transportFormatted)!=null?(C=this.settings.overwrite)==null||C.transportFormatted(l,h.args,h.errors,this.settings):Pe(l,h.args,h.errors,this.settings):((T=this.settings.overwrite)==null?void 0:T.transportJSON)!=null?(A=this.settings.overwrite)==null||A.transportJSON(s):this.settings.type!=="hidden"&&ke(s),this.settings.attachedTransports!=null&&this.settings.attachedTransports.length>0&&this.settings.attachedTransports.forEach(D=>{D(s)}),s}attachTransport(e){this.settings.attachedTransports.push(e)}getSubLogger(e,r){var f,a,o,s;const n={...this.settings,...e,parentNames:((f=this.settings)==null?void 0:f.parentNames)!=null&&((a=this.settings)==null?void 0:a.name)!=null?[...this.settings.parentNames,this.settings.name]:((o=this.settings)==null?void 0:o.name)!=null?[this.settings.name]:void 0,prefix:[...this.settings.prefix,...(s=e==null?void 0:e.prefix)!=null?s:[]]};return new this.constructor(n,r!=null?r:this.logObj,this.stackDepthLevel)}_mask(e){const r=this.settings.maskValuesOfKeysCaseInsensitive!==!0?this.settings.maskValuesOfKeys:this.settings.maskValuesOfKeys.map(n=>n.toLowerCase());return e==null?void 0:e.map(n=>this._recursiveCloneAndMaskValuesOfKeys(n,r))}_recursiveCloneAndMaskValuesOfKeys(e,r,n=[]){return n.includes(e)?{...e}:(typeof e=="object"&&e!=null&&n.push(e),void 0?e:e instanceof Map?new Map(e):e instanceof Set?new Set(e):Array.isArray(e)?e.map(i=>this._recursiveCloneAndMaskValuesOfKeys(i,r,n)):e instanceof Date?new Date(e.getTime()):H(e)?Object.getOwnPropertyNames(e).reduce((i,f)=>{var a;return i[f]=r.includes(((a=this.settings)==null?void 0:a.maskValuesOfKeysCaseInsensitive)!==!0?f:f.toLowerCase())?this.settings.maskPlaceholder:this._recursiveCloneAndMaskValuesOfKeys(e[f],r,n),i},this._cloneError(e)):e!=null&&typeof e=="object"?Object.getOwnPropertyNames(e).reduce((i,f)=>{var a;return i[f]=r.includes(((a=this.settings)==null?void 0:a.maskValuesOfKeysCaseInsensitive)!==!0?f:f.toLowerCase())?this.settings.maskPlaceholder:this._recursiveCloneAndMaskValuesOfKeys(e[f],r,n),i},Object.create(Object.getPrototypeOf(e))):(i=>{var f,a;return(a=(f=this.settings)==null?void 0:f.maskValuesRegEx)==null||a.forEach(o=>{var s;i=(s=i==null?void 0:i.toString())==null?void 0:s.replace(o,this.settings.maskPlaceholder)}),i})(e))}_recursiveCloneAndExecuteFunctions(e,r=[]){return r.includes(e)?{...e}:(typeof e=="object"&&r.push(e),Array.isArray(e)?e.map(n=>this._recursiveCloneAndExecuteFunctions(n,r)):e instanceof Date?new Date(e.getTime()):e&&typeof e=="object"?Object.getOwnPropertyNames(e).reduce((n,i)=>(Object.defineProperty(n,i,Object.getOwnPropertyDescriptor(e,i)),n[i]=typeof e[i]=="function"?e[i]():this._recursiveCloneAndExecuteFunctions(e[i],r),n),Object.create(Object.getPrototypeOf(e))):e)}_toLogObj(e,r={}){return e=e==null?void 0:e.map(n=>H(n)?this._toErrorObject(n):n),this.settings.argumentsArrayName==null?e.length===1&&!Array.isArray(e[0])&&(e[0],void 0)!==!0&&!(e[0]instanceof Date)?r=typeof e[0]=="object"&&e[0]!=null?{...e[0],...r}:{0:e[0],...r}:r={...r,...e}:r={...r,[this.settings.argumentsArrayName]:e},r}_cloneError(e){const r=e.constructor,n=new r(e.message);Object.assign(n,e);const i=Object.getOwnPropertyNames(n);for(const f of i){const a=Object.getOwnPropertyDescriptor(n,f);a&&(a.writable=!0,Object.defineProperty(n,f,a))}return n}_toErrorObject(e){var r;return{nativeError:e,name:(r=e.name)!=null?r:"Error",message:e.message,stack:ne(e)}}_addMetaToLogObj(e,r,n){return{...e,[this.settings.metaProperty]:we(r,n,this.stackDepthLevel,this.settings.hideLogPositionForProduction,this.settings.name,this.settings.parentNames)}}_prettyFormatLogObjMeta(e){var a,o,s,l,h,c,u,y,d,w,L,S,N,P,k,E,C,T,A,D,z,_,I,R,V;if(e==null)return"";let r=this.settings.prettyLogTemplate;const n={};r.includes("{{yyyy}}.{{mm}}.{{dd}} {{hh}}:{{MM}}:{{ss}}:{{ms}}")?r=r.replace("{{yyyy}}.{{mm}}.{{dd}} {{hh}}:{{MM}}:{{ss}}:{{ms}}","{{dateIsoStr}}"):this.settings.prettyLogTimeZone==="UTC"?(n.yyyy=(o=(a=e==null?void 0:e.date)==null?void 0:a.getUTCFullYear())!=null?o:"----",n.mm=m((s=e==null?void 0:e.date)==null?void 0:s.getUTCMonth(),2,1),n.dd=m((l=e==null?void 0:e.date)==null?void 0:l.getUTCDate(),2),n.hh=m((h=e==null?void 0:e.date)==null?void 0:h.getUTCHours(),2),n.MM=m((c=e==null?void 0:e.date)==null?void 0:c.getUTCMinutes(),2),n.ss=m((u=e==null?void 0:e.date)==null?void 0:u.getUTCSeconds(),2),n.ms=m((y=e==null?void 0:e.date)==null?void 0:y.getUTCMilliseconds(),3)):(n.yyyy=(w=(d=e==null?void 0:e.date)==null?void 0:d.getFullYear())!=null?w:"----",n.mm=m((L=e==null?void 0:e.date)==null?void 0:L.getMonth(),2,1),n.dd=m((S=e==null?void 0:e.date)==null?void 0:S.getDate(),2),n.hh=m((N=e==null?void 0:e.date)==null?void 0:N.getHours(),2),n.MM=m((P=e==null?void 0:e.date)==null?void 0:P.getMinutes(),2),n.ss=m((k=e==null?void 0:e.date)==null?void 0:k.getSeconds(),2),n.ms=m((E=e==null?void 0:e.date)==null?void 0:E.getMilliseconds(),3));const i=this.settings.prettyLogTimeZone==="UTC"?e==null?void 0:e.date:new Date(((C=e==null?void 0:e.date)==null?void 0:C.getTime())-((T=e==null?void 0:e.date)==null?void 0:T.getTimezoneOffset())*6e4);n.rawIsoStr=i==null?void 0:i.toISOString(),n.dateIsoStr=i==null?void 0:i.toISOString().replace("T"," ").replace("Z",""),n.logLevelName=e==null?void 0:e.logLevelName,n.fileNameWithLine=(D=(A=e==null?void 0:e.path)==null?void 0:A.fileNameWithLine)!=null?D:"",n.filePathWithLine=(_=(z=e==null?void 0:e.path)==null?void 0:z.filePathWithLine)!=null?_:"",n.fullFilePath=(R=(I=e==null?void 0:e.path)==null?void 0:I.fullFilePath)!=null?R:"";let f=(V=this.settings.parentNames)==null?void 0:V.join(this.settings.prettyErrorParentNamesSeparator);return f=f!=null&&(e==null?void 0:e.name)!=null?f+this.settings.prettyErrorParentNamesSeparator:void 0,n.name=(e==null?void 0:e.name)!=null||f!=null?(f!=null?f:"")+(e==null?void 0:e.name):"",n.nameWithDelimiterPrefix=n.name.length>0?this.settings.prettyErrorLoggerNameDelimiter+n.name:"",n.nameWithDelimiterSuffix=n.name.length>0?n.name+this.settings.prettyErrorLoggerNameDelimiter:"",J(this.settings,r,n)}}class oe extends Ee{constructor(e,r){super(e,r,5)}log(e,r,...n){return super.log(e,r,...n)}silly(...e){return super.log(0,"SILLY",...e)}trace(...e){return super.log(1,"TRACE",...e)}debug(...e){return super.log(2,"DEBUG",...e)}info(...e){return super.log(3,"INFO",...e)}warn(...e){return super.log(4,"WARN",...e)}error(...e){return super.log(5,"ERROR",...e)}fatal(...e){return super.log(6,"FATAL",...e)}getSubLogger(e,r){return super.getSubLogger(e,r)}}const Ae=new oe({prettyLogTemplate:"{{hh}}:{{MM}}:{{ss}}:{{ms}}	{{logLevelName}}	",minLevel:v.logLevel}),Ce=new oe({prettyLogTemplate:"{{hh}}:{{MM}}:{{ss}}:{{ms}}	{{logLevelName}}	",minLevel:v.logLevel});Ce.attachTransport(t=>{se(fe.offscreenLog(t))});export{Ae as l,Ce as o};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLjhhYWQ2YzM0LmpzIiwic291cmNlcyI6WyIuLi8uLi9ub2RlX21vZHVsZXMvdHNsb2cvZGlzdC9lc20vcHJldHR5TG9nU3R5bGVzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3RzbG9nL2Rpc3QvZXNtL2Zvcm1hdFRlbXBsYXRlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3RzbG9nL2Rpc3QvZXNtL3J1bnRpbWUvYnJvd3Nlci9oZWxwZXIuanNvblN0cmluZ2lmeVJlY3Vyc2l2ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy90c2xvZy9kaXN0L2VzbS9ydW50aW1lL2Jyb3dzZXIvdXRpbC5pbnNwZWN0LnBvbHlmaWwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvdHNsb2cvZGlzdC9lc20vcnVudGltZS9icm93c2VyL2luZGV4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3RzbG9nL2Rpc3QvZXNtL2Zvcm1hdE51bWJlckFkZFplcm9zLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3RzbG9nL2Rpc3QvZXNtL0Jhc2VMb2dnZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvdHNsb2cvZGlzdC9lc20vaW5kZXguanMiLCIuLi8uLi9zcmMvdXRpbHMvbG9nZ2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBwcmV0dHlMb2dTdHlsZXMgPSB7XG4gICAgcmVzZXQ6IFswLCAwXSxcbiAgICBib2xkOiBbMSwgMjJdLFxuICAgIGRpbTogWzIsIDIyXSxcbiAgICBpdGFsaWM6IFszLCAyM10sXG4gICAgdW5kZXJsaW5lOiBbNCwgMjRdLFxuICAgIG92ZXJsaW5lOiBbNTMsIDU1XSxcbiAgICBpbnZlcnNlOiBbNywgMjddLFxuICAgIGhpZGRlbjogWzgsIDI4XSxcbiAgICBzdHJpa2V0aHJvdWdoOiBbOSwgMjldLFxuICAgIGJsYWNrOiBbMzAsIDM5XSxcbiAgICByZWQ6IFszMSwgMzldLFxuICAgIGdyZWVuOiBbMzIsIDM5XSxcbiAgICB5ZWxsb3c6IFszMywgMzldLFxuICAgIGJsdWU6IFszNCwgMzldLFxuICAgIG1hZ2VudGE6IFszNSwgMzldLFxuICAgIGN5YW46IFszNiwgMzldLFxuICAgIHdoaXRlOiBbMzcsIDM5XSxcbiAgICBibGFja0JyaWdodDogWzkwLCAzOV0sXG4gICAgcmVkQnJpZ2h0OiBbOTEsIDM5XSxcbiAgICBncmVlbkJyaWdodDogWzkyLCAzOV0sXG4gICAgeWVsbG93QnJpZ2h0OiBbOTMsIDM5XSxcbiAgICBibHVlQnJpZ2h0OiBbOTQsIDM5XSxcbiAgICBtYWdlbnRhQnJpZ2h0OiBbOTUsIDM5XSxcbiAgICBjeWFuQnJpZ2h0OiBbOTYsIDM5XSxcbiAgICB3aGl0ZUJyaWdodDogWzk3LCAzOV0sXG4gICAgYmdCbGFjazogWzQwLCA0OV0sXG4gICAgYmdSZWQ6IFs0MSwgNDldLFxuICAgIGJnR3JlZW46IFs0MiwgNDldLFxuICAgIGJnWWVsbG93OiBbNDMsIDQ5XSxcbiAgICBiZ0JsdWU6IFs0NCwgNDldLFxuICAgIGJnTWFnZW50YTogWzQ1LCA0OV0sXG4gICAgYmdDeWFuOiBbNDYsIDQ5XSxcbiAgICBiZ1doaXRlOiBbNDcsIDQ5XSxcbiAgICBiZ0JsYWNrQnJpZ2h0OiBbMTAwLCA0OV0sXG4gICAgYmdSZWRCcmlnaHQ6IFsxMDEsIDQ5XSxcbiAgICBiZ0dyZWVuQnJpZ2h0OiBbMTAyLCA0OV0sXG4gICAgYmdZZWxsb3dCcmlnaHQ6IFsxMDMsIDQ5XSxcbiAgICBiZ0JsdWVCcmlnaHQ6IFsxMDQsIDQ5XSxcbiAgICBiZ01hZ2VudGFCcmlnaHQ6IFsxMDUsIDQ5XSxcbiAgICBiZ0N5YW5CcmlnaHQ6IFsxMDYsIDQ5XSxcbiAgICBiZ1doaXRlQnJpZ2h0OiBbMTA3LCA0OV0sXG59O1xuIiwiaW1wb3J0IHsgcHJldHR5TG9nU3R5bGVzIH0gZnJvbSBcIi4vcHJldHR5TG9nU3R5bGVzLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0VGVtcGxhdGUoc2V0dGluZ3MsIHRlbXBsYXRlLCB2YWx1ZXMsIGhpZGVVbnNldFBsYWNlaG9sZGVyID0gZmFsc2UpIHtcbiAgICBjb25zdCB0ZW1wbGF0ZVN0cmluZyA9IFN0cmluZyh0ZW1wbGF0ZSk7XG4gICAgY29uc3QgYW5zaUNvbG9yV3JhcCA9IChwbGFjZWhvbGRlclZhbHVlLCBjb2RlKSA9PiBgXFx1MDAxYlske2NvZGVbMF19bSR7cGxhY2Vob2xkZXJWYWx1ZX1cXHUwMDFiWyR7Y29kZVsxXX1tYDtcbiAgICBjb25zdCBzdHlsZVdyYXAgPSAodmFsdWUsIHN0eWxlKSA9PiB7XG4gICAgICAgIGlmIChzdHlsZSAhPSBudWxsICYmIHR5cGVvZiBzdHlsZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgcmV0dXJuIGFuc2lDb2xvcldyYXAodmFsdWUsIHByZXR0eUxvZ1N0eWxlc1tzdHlsZV0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHN0eWxlICE9IG51bGwgJiYgQXJyYXkuaXNBcnJheShzdHlsZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHlsZS5yZWR1Y2UoKHByZXZWYWx1ZSwgdGhpc1N0eWxlKSA9PiBzdHlsZVdyYXAocHJldlZhbHVlLCB0aGlzU3R5bGUpLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoc3R5bGUgIT0gbnVsbCAmJiBzdHlsZVt2YWx1ZS50cmltKCldICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3R5bGVXcmFwKHZhbHVlLCBzdHlsZVt2YWx1ZS50cmltKCldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHN0eWxlICE9IG51bGwgJiYgc3R5bGVbXCIqXCJdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3R5bGVXcmFwKHZhbHVlLCBzdHlsZVtcIipcIl0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gdGVtcGxhdGVTdHJpbmcucmVwbGFjZSgve3soLis/KX19L2csIChfLCBwbGFjZWhvbGRlcikgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHZhbHVlc1twbGFjZWhvbGRlcl0gIT0gbnVsbCA/IHZhbHVlc1twbGFjZWhvbGRlcl0gOiBoaWRlVW5zZXRQbGFjZWhvbGRlciA/IFwiXCIgOiBfO1xuICAgICAgICByZXR1cm4gc2V0dGluZ3Muc3R5bGVQcmV0dHlMb2dzID8gc3R5bGVXcmFwKHZhbHVlLCBzZXR0aW5ncz8ucHJldHR5TG9nU3R5bGVzPy5bcGxhY2Vob2xkZXJdKSArIGFuc2lDb2xvcldyYXAoXCJcIiwgcHJldHR5TG9nU3R5bGVzLnJlc2V0KSA6IHZhbHVlO1xuICAgIH0pO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGpzb25TdHJpbmdpZnlSZWN1cnNpdmUob2JqKSB7XG4gICAgY29uc3QgY2FjaGUgPSBuZXcgU2V0KCk7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaiwgKGtleSwgdmFsdWUpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiB2YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGNhY2hlLmhhcyh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJbQ2lyY3VsYXJdXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYWNoZS5hZGQodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9KTtcbn1cbiIsImltcG9ydCB7IHByZXR0eUxvZ1N0eWxlcyB9IGZyb20gXCIuLi8uLi9wcmV0dHlMb2dTdHlsZXMuanNcIjtcbmltcG9ydCB7IGpzb25TdHJpbmdpZnlSZWN1cnNpdmUgfSBmcm9tIFwiLi9oZWxwZXIuanNvblN0cmluZ2lmeVJlY3Vyc2l2ZS5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGluc3BlY3Qob2JqLCBvcHRzKSB7XG4gICAgY29uc3QgY3R4ID0ge1xuICAgICAgICBzZWVuOiBbXSxcbiAgICAgICAgc3R5bGl6ZTogc3R5bGl6ZU5vQ29sb3IsXG4gICAgfTtcbiAgICBpZiAob3B0cyAhPSBudWxsKSB7XG4gICAgICAgIF9leHRlbmQoY3R4LCBvcHRzKTtcbiAgICB9XG4gICAgaWYgKGlzVW5kZWZpbmVkKGN0eC5zaG93SGlkZGVuKSlcbiAgICAgICAgY3R4LnNob3dIaWRkZW4gPSBmYWxzZTtcbiAgICBpZiAoaXNVbmRlZmluZWQoY3R4LmRlcHRoKSlcbiAgICAgICAgY3R4LmRlcHRoID0gMjtcbiAgICBpZiAoaXNVbmRlZmluZWQoY3R4LmNvbG9ycykpXG4gICAgICAgIGN0eC5jb2xvcnMgPSB0cnVlO1xuICAgIGlmIChpc1VuZGVmaW5lZChjdHguY3VzdG9tSW5zcGVjdCkpXG4gICAgICAgIGN0eC5jdXN0b21JbnNwZWN0ID0gdHJ1ZTtcbiAgICBpZiAoY3R4LmNvbG9ycylcbiAgICAgICAgY3R4LnN0eWxpemUgPSBzdHlsaXplV2l0aENvbG9yO1xuICAgIHJldHVybiBmb3JtYXRWYWx1ZShjdHgsIG9iaiwgY3R4LmRlcHRoKTtcbn1cbmluc3BlY3QuY29sb3JzID0gcHJldHR5TG9nU3R5bGVzO1xuaW5zcGVjdC5zdHlsZXMgPSB7XG4gICAgc3BlY2lhbDogXCJjeWFuXCIsXG4gICAgbnVtYmVyOiBcInllbGxvd1wiLFxuICAgIGJvb2xlYW46IFwieWVsbG93XCIsXG4gICAgdW5kZWZpbmVkOiBcImdyZXlcIixcbiAgICBudWxsOiBcImJvbGRcIixcbiAgICBzdHJpbmc6IFwiZ3JlZW5cIixcbiAgICBkYXRlOiBcIm1hZ2VudGFcIixcbiAgICByZWdleHA6IFwicmVkXCIsXG59O1xuZnVuY3Rpb24gaXNCb29sZWFuKGFyZykge1xuICAgIHJldHVybiB0eXBlb2YgYXJnID09PSBcImJvb2xlYW5cIjtcbn1cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICAgIHJldHVybiBhcmcgPT0gbnVsbDtcbn1cbmZ1bmN0aW9uIHN0eWxpemVOb0NvbG9yKHN0cikge1xuICAgIHJldHVybiBzdHI7XG59XG5mdW5jdGlvbiBzdHlsaXplV2l0aENvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gICAgY29uc3Qgc3R5bGUgPSBpbnNwZWN0LnN0eWxlc1tzdHlsZVR5cGVdO1xuICAgIGlmIChzdHlsZSAhPSBudWxsICYmIGluc3BlY3Q/LmNvbG9ycz8uW3N0eWxlXT8uWzBdICE9IG51bGwgJiYgaW5zcGVjdD8uY29sb3JzPy5bc3R5bGVdPy5bMV0gIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gXCJcXHUwMDFiW1wiICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzBdICsgXCJtXCIgKyBzdHIgKyBcIlxcdTAwMWJbXCIgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMV0gKyBcIm1cIjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxufVxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gXCJmdW5jdGlvblwiO1xufVxuZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBhcmcgPT09IFwic3RyaW5nXCI7XG59XG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gXCJudW1iZXJcIjtcbn1cbmZ1bmN0aW9uIGlzTnVsbChhcmcpIHtcbiAgICByZXR1cm4gYXJnID09PSBudWxsO1xufVxuZnVuY3Rpb24gaGFzT3duKG9iaiwgcHJvcCkge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbn1cbmZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHJlKSAmJiBvYmplY3RUb1N0cmluZyhyZSkgPT09IFwiW29iamVjdCBSZWdFeHBdXCI7XG59XG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gXCJvYmplY3RcIiAmJiBhcmcgIT09IG51bGw7XG59XG5mdW5jdGlvbiBpc0Vycm9yKGUpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoZSkgJiYgKG9iamVjdFRvU3RyaW5nKGUpID09PSBcIltvYmplY3QgRXJyb3JdXCIgfHwgZSBpbnN0YW5jZW9mIEVycm9yKTtcbn1cbmZ1bmN0aW9uIGlzRGF0ZShkKSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGQpICYmIG9iamVjdFRvU3RyaW5nKGQpID09PSBcIltvYmplY3QgRGF0ZV1cIjtcbn1cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKG8pIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pO1xufVxuZnVuY3Rpb24gYXJyYXlUb0hhc2goYXJyYXkpIHtcbiAgICBjb25zdCBoYXNoID0ge307XG4gICAgYXJyYXkuZm9yRWFjaCgodmFsKSA9PiB7XG4gICAgICAgIGhhc2hbdmFsXSA9IHRydWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIGhhc2g7XG59XG5mdW5jdGlvbiBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKSB7XG4gICAgY29uc3Qgb3V0cHV0ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgaWYgKGhhc093bih2YWx1ZSwgU3RyaW5nKGkpKSkge1xuICAgICAgICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywgU3RyaW5nKGkpLCB0cnVlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvdXRwdXQucHVzaChcIlwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBrZXlzLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICBpZiAoIWtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgICAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgdHJ1ZSkpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG91dHB1dDtcbn1cbmZ1bmN0aW9uIGZvcm1hdEVycm9yKHZhbHVlKSB7XG4gICAgcmV0dXJuIFwiW1wiICsgRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpICsgXCJdXCI7XG59XG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0VmFsdWUoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzID0gMCkge1xuICAgIGlmIChjdHguY3VzdG9tSW5zcGVjdCAmJlxuICAgICAgICB2YWx1ZSAhPSBudWxsICYmXG4gICAgICAgIGlzRnVuY3Rpb24odmFsdWUpICYmXG4gICAgICAgIHZhbHVlPy5pbnNwZWN0ICE9PSBpbnNwZWN0ICYmXG4gICAgICAgICEodmFsdWU/LmNvbnN0cnVjdG9yICYmIHZhbHVlPy5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgPT09IHZhbHVlKSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlLmluc3BlY3QgIT09IFwiZnVuY3Rpb25cIiAmJiB2YWx1ZS50b1N0cmluZyAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmV0ID0gdmFsdWU/Lmluc3BlY3QocmVjdXJzZVRpbWVzLCBjdHgpO1xuICAgICAgICBpZiAoIWlzU3RyaW5nKHJldCkpIHtcbiAgICAgICAgICAgIHJldCA9IGZvcm1hdFZhbHVlKGN0eCwgcmV0LCByZWN1cnNlVGltZXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuICAgIGNvbnN0IHByaW1pdGl2ZSA9IGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKTtcbiAgICBpZiAocHJpbWl0aXZlKSB7XG4gICAgICAgIHJldHVybiBwcmltaXRpdmU7XG4gICAgfVxuICAgIGxldCBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpO1xuICAgIGNvbnN0IHZpc2libGVLZXlzID0gYXJyYXlUb0hhc2goa2V5cyk7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKGN0eC5zaG93SGlkZGVuICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKSB7XG4gICAgICAgICAgICBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgfVxuICAgIGlmIChpc0Vycm9yKHZhbHVlKSAmJiAoa2V5cy5pbmRleE9mKFwibWVzc2FnZVwiKSA+PSAwIHx8IGtleXMuaW5kZXhPZihcImRlc2NyaXB0aW9uXCIpID49IDApKSB7XG4gICAgICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gICAgfVxuICAgIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihjdHguc3R5bGl6ZSkpIHtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5hbWUgPSB2YWx1ZS5uYW1lID8gXCI6IFwiICsgdmFsdWUubmFtZSA6IFwiXCI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFwiW0Z1bmN0aW9uXCIgKyBuYW1lICsgXCJdXCIsIFwic3BlY2lhbFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgXCJyZWdleHBcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNEYXRlKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjdHguc3R5bGl6ZShEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgXCJkYXRlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgYmFzZSA9IFwiXCI7XG4gICAgbGV0IGFycmF5ID0gZmFsc2U7XG4gICAgbGV0IGJyYWNlcyA9IFtcIntcXG5cIiwgXCJcXG59XCJdO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBhcnJheSA9IHRydWU7XG4gICAgICAgIGJyYWNlcyA9IFtcIltcXG5cIiwgXCJcXG5dXCJdO1xuICAgIH1cbiAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgICAgY29uc3QgbiA9IHZhbHVlLm5hbWUgPyBcIjogXCIgKyB2YWx1ZS5uYW1lIDogXCJcIjtcbiAgICAgICAgYmFzZSA9IFwiIFtGdW5jdGlvblwiICsgbiArIFwiXVwiO1xuICAgIH1cbiAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgICAgIGJhc2UgPSBcIiBcIiArIFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgfVxuICAgIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgICAgIGJhc2UgPSBcIiBcIiArIERhdGUucHJvdG90eXBlLnRvVVRDU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgIH1cbiAgICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICAgICAgYmFzZSA9IFwiIFwiICsgZm9ybWF0RXJyb3IodmFsdWUpO1xuICAgIH1cbiAgICBpZiAoa2V5cy5sZW5ndGggPT09IDAgJiYgKCFhcnJheSB8fCB2YWx1ZS5sZW5ndGggPT0gMCkpIHtcbiAgICAgICAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyBicmFjZXNbMV07XG4gICAgfVxuICAgIGlmIChyZWN1cnNlVGltZXMgPCAwKSB7XG4gICAgICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCBcInJlZ2V4cFwiKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjdHguc3R5bGl6ZShcIltPYmplY3RdXCIsIFwic3BlY2lhbFwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjdHguc2Vlbi5wdXNoKHZhbHVlKTtcbiAgICBsZXQgb3V0cHV0O1xuICAgIGlmIChhcnJheSkge1xuICAgICAgICBvdXRwdXQgPSBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG91dHB1dCA9IGtleXMubWFwKChrZXkpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGN0eC5zZWVuLnBvcCgpO1xuICAgIHJldHVybiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcyk7XG59XG5mdW5jdGlvbiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KSB7XG4gICAgbGV0IG5hbWUsIHN0ciwgZGVzYztcbiAgICBkZXNjID0geyB2YWx1ZTogdm9pZCAwIH07XG4gICAgdHJ5IHtcbiAgICAgICAgZGVzYy52YWx1ZSA9IHZhbHVlW2tleV07XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKSB7XG4gICAgICAgICAgICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih2YWx1ZSwga2V5KSB8fCBkZXNjO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgfVxuICAgIGlmIChkZXNjLmdldCkge1xuICAgICAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgICAgICAgIHN0ciA9IGN0eC5zdHlsaXplKFwiW0dldHRlci9TZXR0ZXJdXCIsIFwic3BlY2lhbFwiKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN0ciA9IGN0eC5zdHlsaXplKFwiW0dldHRlcl1cIiwgXCJzcGVjaWFsXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgICAgICAgIHN0ciA9IGN0eC5zdHlsaXplKFwiW1NldHRlcl1cIiwgXCJzcGVjaWFsXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghaGFzT3duKHZpc2libGVLZXlzLCBrZXkpKSB7XG4gICAgICAgIG5hbWUgPSBcIltcIiArIGtleSArIFwiXVwiO1xuICAgIH1cbiAgICBpZiAoIXN0cikge1xuICAgICAgICBpZiAoY3R4LnNlZW4uaW5kZXhPZihkZXNjLnZhbHVlKSA8IDApIHtcbiAgICAgICAgICAgIGlmIChpc051bGwocmVjdXJzZVRpbWVzKSkge1xuICAgICAgICAgICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgcmVjdXJzZVRpbWVzIC0gMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RyLmluZGV4T2YoXCJcXG5cIikgPiAtMSkge1xuICAgICAgICAgICAgICAgIGlmIChhcnJheSkge1xuICAgICAgICAgICAgICAgICAgICBzdHIgPSBzdHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zcGxpdChcIlxcblwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCgobGluZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiICBcIiArIGxpbmU7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuam9pbihcIlxcblwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnN1YnN0cigyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN0ciA9XG4gICAgICAgICAgICAgICAgICAgICAgICBcIlxcblwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNwbGl0KFwiXFxuXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoKGxpbmUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiICAgXCIgKyBsaW5lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5qb2luKFwiXFxuXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN0ciA9IGN0eC5zdHlsaXplKFwiW0NpcmN1bGFyXVwiLCBcInNwZWNpYWxcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzVW5kZWZpbmVkKG5hbWUpKSB7XG4gICAgICAgIGlmIChhcnJheSAmJiBrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgICB9XG4gICAgICAgIG5hbWUgPSBKU09OLnN0cmluZ2lmeShcIlwiICsga2V5KTtcbiAgICAgICAgaWYgKG5hbWUubWF0Y2goL15cIihbYS16QS1aX11bYS16QS1aXzAtOV0qKVwiJC8pKSB7XG4gICAgICAgICAgICBuYW1lID0gbmFtZS5zdWJzdHIoMSwgbmFtZS5sZW5ndGggLSAyKTtcbiAgICAgICAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCBcIm5hbWVcIik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBuYW1lID0gbmFtZVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIilcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csIFwiXFxcXCdcIilcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvKF5cInxcIiQpL2csIFwiJ1wiKTtcbiAgICAgICAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCBcInN0cmluZ1wiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmFtZSArIFwiOiBcIiArIHN0cjtcbn1cbmZ1bmN0aW9uIGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKSB7XG4gICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSlcbiAgICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFwidW5kZWZpbmVkXCIsIFwidW5kZWZpbmVkXCIpO1xuICAgIGlmIChpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgICAgY29uc3Qgc2ltcGxlID0gXCInXCIgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkucmVwbGFjZSgvXlwifFwiJC9nLCBcIlwiKS5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIikucmVwbGFjZSgvXFxcXFwiL2csIFwiXFxcXCdcIikgKyBcIidcIjtcbiAgICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKHNpbXBsZSwgXCJzdHJpbmdcIik7XG4gICAgfVxuICAgIGlmIChpc051bWJlcih2YWx1ZSkpXG4gICAgICAgIHJldHVybiBjdHguc3R5bGl6ZShcIlwiICsgdmFsdWUsIFwibnVtYmVyXCIpO1xuICAgIGlmIChpc0Jvb2xlYW4odmFsdWUpKVxuICAgICAgICByZXR1cm4gY3R4LnN0eWxpemUoXCJcIiArIHZhbHVlLCBcImJvb2xlYW5cIik7XG4gICAgaWYgKGlzTnVsbCh2YWx1ZSkpXG4gICAgICAgIHJldHVybiBjdHguc3R5bGl6ZShcIm51bGxcIiwgXCJudWxsXCIpO1xufVxuZnVuY3Rpb24gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpIHtcbiAgICByZXR1cm4gYnJhY2VzWzBdICsgKGJhc2UgPT09IFwiXCIgPyBcIlwiIDogYmFzZSArIFwiXFxuXCIpICsgXCIgIFwiICsgb3V0cHV0LmpvaW4oXCIsXFxuICBcIikgKyBcIiBcIiArIGJyYWNlc1sxXTtcbn1cbmZ1bmN0aW9uIF9leHRlbmQob3JpZ2luLCBhZGQpIHtcbiAgICBpZiAoIWFkZCB8fCAhaXNPYmplY3QoYWRkKSlcbiAgICAgICAgcmV0dXJuIG9yaWdpbjtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoYWRkKTtcbiAgICBsZXQgaSA9IGtleXMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgb3JpZ2luW2tleXNbaV1dID0gYWRkW2tleXNbaV1dO1xuICAgIH1cbiAgICByZXR1cm4gb3JpZ2luO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdFdpdGhPcHRpb25zKGluc3BlY3RPcHRpb25zLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgY3R4ID0ge1xuICAgICAgICBzZWVuOiBbXSxcbiAgICAgICAgc3R5bGl6ZTogc3R5bGl6ZU5vQ29sb3IsXG4gICAgfTtcbiAgICBpZiAoaW5zcGVjdE9wdGlvbnMgIT0gbnVsbCkge1xuICAgICAgICBfZXh0ZW5kKGN0eCwgaW5zcGVjdE9wdGlvbnMpO1xuICAgIH1cbiAgICBjb25zdCBmaXJzdCA9IGFyZ3NbMF07XG4gICAgbGV0IGEgPSAwO1xuICAgIGxldCBzdHIgPSBcIlwiO1xuICAgIGxldCBqb2luID0gXCJcIjtcbiAgICBpZiAodHlwZW9mIGZpcnN0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIGZpcnN0O1xuICAgICAgICB9XG4gICAgICAgIGxldCB0ZW1wU3RyO1xuICAgICAgICBsZXQgbGFzdFBvcyA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmlyc3QubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZmlyc3QuY2hhckNvZGVBdChpKSA9PT0gMzcpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0Q2hhciA9IGZpcnN0LmNoYXJDb2RlQXQoKytpKTtcbiAgICAgICAgICAgICAgICBpZiAoYSArIDEgIT09IGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAobmV4dENoYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTE1OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVtcEFyZyA9IGFyZ3NbKythXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRlbXBBcmcgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFN0ciA9IGZvcm1hdFByaW1pdGl2ZShjdHgsIHRlbXBBcmcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgdGVtcEFyZyA9PT0gXCJiaWdpbnRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wU3RyID0gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdGVtcEFyZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB0ZW1wQXJnICE9PSBcIm9iamVjdFwiIHx8IHRlbXBBcmcgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFN0ciA9IFN0cmluZyh0ZW1wQXJnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBTdHIgPSBpbnNwZWN0KHRlbXBBcmcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLmluc3BlY3RPcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFjdDogMyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXB0aDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMDY6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFN0ciA9IGpzb25TdHJpbmdpZnlSZWN1cnNpdmUoYXJnc1srK2FdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTAwOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVtcE51bSA9IGFyZ3NbKythXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRlbXBOdW0gPT09IFwiYmlnaW50XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFN0ciA9IGZvcm1hdFByaW1pdGl2ZShjdHgsIHRlbXBOdW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgdGVtcE51bSA9PT0gXCJzeW1ib2xcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wU3RyID0gXCJOYU5cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBTdHIgPSBmb3JtYXRQcmltaXRpdmUoY3R4LCB0ZW1wTnVtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDc5OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBTdHIgPSBpbnNwZWN0KGFyZ3NbKythXSwgaW5zcGVjdE9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMTE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFN0ciA9IGluc3BlY3QoYXJnc1srK2FdLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLmluc3BlY3RPcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93SGlkZGVuOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93UHJveHk6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcHRoOiA0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMDU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZW1wSW50ZWdlciA9IGFyZ3NbKythXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRlbXBJbnRlZ2VyID09PSBcImJpZ2ludFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBTdHIgPSBmb3JtYXRQcmltaXRpdmUoY3R4LCB0ZW1wSW50ZWdlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB0ZW1wSW50ZWdlciA9PT0gXCJzeW1ib2xcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wU3RyID0gXCJOYU5cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBTdHIgPSBmb3JtYXRQcmltaXRpdmUoY3R4LCBwYXJzZUludCh0ZW1wU3RyKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMDI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZW1wRmxvYXQgPSBhcmdzWysrYV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0ZW1wRmxvYXQgPT09IFwic3ltYm9sXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFN0ciA9IFwiTmFOXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wU3RyID0gZm9ybWF0UHJpbWl0aXZlKGN0eCwgcGFyc2VJbnQodGVtcEZsb2F0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA5OTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhICs9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFN0ciA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM3OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSBmaXJzdC5zbGljZShsYXN0UG9zLCBpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0UG9zID0gaSArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXN0UG9zICE9PSBpIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9IGZpcnN0LnNsaWNlKGxhc3RQb3MsIGkgLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzdHIgKz0gdGVtcFN0cjtcbiAgICAgICAgICAgICAgICAgICAgbGFzdFBvcyA9IGkgKyAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChuZXh0Q2hhciA9PT0gMzcpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RyICs9IGZpcnN0LnNsaWNlKGxhc3RQb3MsIGkpO1xuICAgICAgICAgICAgICAgICAgICBsYXN0UG9zID0gaSArIDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChsYXN0UG9zICE9PSAwKSB7XG4gICAgICAgICAgICBhKys7XG4gICAgICAgICAgICBqb2luID0gXCIgXCI7XG4gICAgICAgICAgICBpZiAobGFzdFBvcyA8IGZpcnN0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHN0ciArPSBmaXJzdC5zbGljZShsYXN0UG9zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICB3aGlsZSAoYSA8IGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gYXJnc1thXTtcbiAgICAgICAgc3RyICs9IGpvaW47XG4gICAgICAgIHN0ciArPSB0eXBlb2YgdmFsdWUgIT09IFwic3RyaW5nXCIgPyBpbnNwZWN0KHZhbHVlLCBpbnNwZWN0T3B0aW9ucykgOiB2YWx1ZTtcbiAgICAgICAgam9pbiA9IFwiIFwiO1xuICAgICAgICBhKys7XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG59XG4iLCJpbXBvcnQgeyBmb3JtYXRUZW1wbGF0ZSB9IGZyb20gXCIuLi8uLi9mb3JtYXRUZW1wbGF0ZS5qc1wiO1xuaW1wb3J0IHsgZm9ybWF0V2l0aE9wdGlvbnMgfSBmcm9tIFwiLi91dGlsLmluc3BlY3QucG9seWZpbC5qc1wiO1xuaW1wb3J0IHsganNvblN0cmluZ2lmeVJlY3Vyc2l2ZSB9IGZyb20gXCIuL2hlbHBlci5qc29uU3RyaW5naWZ5UmVjdXJzaXZlLmpzXCI7XG5jb25zdCBtZXRhID0ge1xuICAgIHJ1bnRpbWU6ICFbdHlwZW9mIHdpbmRvdywgdHlwZW9mIGRvY3VtZW50XS5pbmNsdWRlcyhcInVuZGVmaW5lZFwiKSA/IFwiQnJvd3NlclwiIDogXCJHZW5lcmljXCIsXG4gICAgYnJvd3NlcjogZ2xvYmFsVGhpcz8uW1wibmF2aWdhdG9yXCJdPy51c2VyQWdlbnQsXG59O1xuY29uc3QgcGF0aFJlZ2V4ID0gLyg/Oig/OmZpbGV8aHR0cHM/fGdsb2JhbCBjb2RlfFteQF0rKUApPyg/OmZpbGU6KT8oKD86XFwvW146L10rKXsyLH0pKD86OihcXGQrKSk/KD86OihcXGQrKSk/LztcbmV4cG9ydCBmdW5jdGlvbiBnZXRNZXRhKGxvZ0xldmVsSWQsIGxvZ0xldmVsTmFtZSwgc3RhY2tEZXB0aExldmVsLCBoaWRlTG9nUG9zaXRpb25Gb3JQZXJmb3JtYW5jZSwgbmFtZSwgcGFyZW50TmFtZXMpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgbWV0YSwge1xuICAgICAgICBuYW1lLFxuICAgICAgICBwYXJlbnROYW1lcyxcbiAgICAgICAgZGF0ZTogbmV3IERhdGUoKSxcbiAgICAgICAgbG9nTGV2ZWxJZCxcbiAgICAgICAgbG9nTGV2ZWxOYW1lLFxuICAgICAgICBwYXRoOiAhaGlkZUxvZ1Bvc2l0aW9uRm9yUGVyZm9ybWFuY2UgPyBnZXRDYWxsZXJTdGFja0ZyYW1lKHN0YWNrRGVwdGhMZXZlbCkgOiB1bmRlZmluZWQsXG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2FsbGVyU3RhY2tGcmFtZShzdGFja0RlcHRoTGV2ZWwsIGVycm9yID0gRXJyb3IoKSkge1xuICAgIHJldHVybiBzdGFja0xpbmVUb1N0YWNrRnJhbWUoZXJyb3I/LnN0YWNrPy5zcGxpdChcIlxcblwiKT8uZmlsdGVyKChsaW5lKSA9PiAhbGluZS5pbmNsdWRlcyhcIkVycm9yOiBcIikpPy5bc3RhY2tEZXB0aExldmVsXSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0RXJyb3JUcmFjZShlcnJvcikge1xuICAgIHJldHVybiBlcnJvcj8uc3RhY2tcbiAgICAgICAgPy5zcGxpdChcIlxcblwiKVxuICAgICAgICA/LmZpbHRlcigobGluZSkgPT4gIWxpbmUuaW5jbHVkZXMoXCJFcnJvcjogXCIpKVxuICAgICAgICA/LnJlZHVjZSgocmVzdWx0LCBsaW5lKSA9PiB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHN0YWNrTGluZVRvU3RhY2tGcmFtZShsaW5lKSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSwgW10pO1xufVxuZnVuY3Rpb24gc3RhY2tMaW5lVG9TdGFja0ZyYW1lKGxpbmUpIHtcbiAgICBjb25zdCBocmVmID0gZ2xvYmFsVGhpcy5sb2NhdGlvbi5vcmlnaW47XG4gICAgY29uc3QgcGF0aFJlc3VsdCA9IHtcbiAgICAgICAgZnVsbEZpbGVQYXRoOiB1bmRlZmluZWQsXG4gICAgICAgIGZpbGVOYW1lOiB1bmRlZmluZWQsXG4gICAgICAgIGZpbGVOYW1lV2l0aExpbmU6IHVuZGVmaW5lZCxcbiAgICAgICAgZmlsZUNvbHVtbjogdW5kZWZpbmVkLFxuICAgICAgICBmaWxlTGluZTogdW5kZWZpbmVkLFxuICAgICAgICBmaWxlUGF0aDogdW5kZWZpbmVkLFxuICAgICAgICBmaWxlUGF0aFdpdGhMaW5lOiB1bmRlZmluZWQsXG4gICAgICAgIG1ldGhvZDogdW5kZWZpbmVkLFxuICAgIH07XG4gICAgaWYgKGxpbmUgIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtYXRjaCA9IGxpbmUubWF0Y2gocGF0aFJlZ2V4KTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICBwYXRoUmVzdWx0LmZpbGVQYXRoID0gbWF0Y2hbMV0ucmVwbGFjZSgvXFw/LiokLywgXCJcIik7XG4gICAgICAgICAgICBwYXRoUmVzdWx0LmZ1bGxGaWxlUGF0aCA9IGAke2hyZWZ9JHtwYXRoUmVzdWx0LmZpbGVQYXRofWA7XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFydHMgPSBwYXRoUmVzdWx0LmZpbGVQYXRoLnNwbGl0KFwiL1wiKTtcbiAgICAgICAgICAgIHBhdGhSZXN1bHQuZmlsZU5hbWUgPSBwYXRoUGFydHNbcGF0aFBhcnRzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgcGF0aFJlc3VsdC5maWxlTGluZSA9IG1hdGNoWzJdO1xuICAgICAgICAgICAgcGF0aFJlc3VsdC5maWxlQ29sdW1uID0gbWF0Y2hbM107XG4gICAgICAgICAgICBwYXRoUmVzdWx0LmZpbGVQYXRoV2l0aExpbmUgPSBgJHtwYXRoUmVzdWx0LmZpbGVQYXRofToke3BhdGhSZXN1bHQuZmlsZUxpbmV9YDtcbiAgICAgICAgICAgIHBhdGhSZXN1bHQuZmlsZU5hbWVXaXRoTGluZSA9IGAke3BhdGhSZXN1bHQuZmlsZU5hbWV9OiR7cGF0aFJlc3VsdC5maWxlTGluZX1gO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwYXRoUmVzdWx0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzRXJyb3IoZSkge1xuICAgIHJldHVybiBlIGluc3RhbmNlb2YgRXJyb3I7XG59XG5leHBvcnQgZnVuY3Rpb24gcHJldHR5Rm9ybWF0TG9nT2JqKG1hc2tlZEFyZ3MsIHNldHRpbmdzKSB7XG4gICAgcmV0dXJuIG1hc2tlZEFyZ3MucmVkdWNlKChyZXN1bHQsIGFyZykgPT4ge1xuICAgICAgICBpc0Vycm9yKGFyZykgPyByZXN1bHQuZXJyb3JzLnB1c2gocHJldHR5Rm9ybWF0RXJyb3JPYmooYXJnLCBzZXR0aW5ncykpIDogcmVzdWx0LmFyZ3MucHVzaChhcmcpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sIHsgYXJnczogW10sIGVycm9yczogW10gfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gcHJldHR5Rm9ybWF0RXJyb3JPYmooZXJyb3IsIHNldHRpbmdzKSB7XG4gICAgY29uc3QgZXJyb3JTdGFja1N0ciA9IGdldEVycm9yVHJhY2UoZXJyb3IpLm1hcCgoc3RhY2tGcmFtZSkgPT4ge1xuICAgICAgICByZXR1cm4gZm9ybWF0VGVtcGxhdGUoc2V0dGluZ3MsIHNldHRpbmdzLnByZXR0eUVycm9yU3RhY2tUZW1wbGF0ZSwgeyAuLi5zdGFja0ZyYW1lIH0sIHRydWUpO1xuICAgIH0pO1xuICAgIGNvbnN0IHBsYWNlaG9sZGVyVmFsdWVzRXJyb3IgPSB7XG4gICAgICAgIGVycm9yTmFtZTogYCAke2Vycm9yLm5hbWV9IGAsXG4gICAgICAgIGVycm9yTWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgZXJyb3JTdGFjazogZXJyb3JTdGFja1N0ci5qb2luKFwiXFxuXCIpLFxuICAgIH07XG4gICAgcmV0dXJuIGZvcm1hdFRlbXBsYXRlKHNldHRpbmdzLCBzZXR0aW5ncy5wcmV0dHlFcnJvclRlbXBsYXRlLCBwbGFjZWhvbGRlclZhbHVlc0Vycm9yKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc3BvcnRGb3JtYXR0ZWQobG9nTWV0YU1hcmt1cCwgbG9nQXJncywgbG9nRXJyb3JzLCBzZXR0aW5ncykge1xuICAgIGNvbnN0IGxvZ0Vycm9yc1N0ciA9IChsb2dFcnJvcnMubGVuZ3RoID4gMCAmJiBsb2dBcmdzLmxlbmd0aCA+IDAgPyBcIlxcblwiIDogXCJcIikgKyBsb2dFcnJvcnMuam9pbihcIlxcblwiKTtcbiAgICBzZXR0aW5ncy5wcmV0dHlJbnNwZWN0T3B0aW9ucy5jb2xvcnMgPSBzZXR0aW5ncy5zdHlsZVByZXR0eUxvZ3M7XG4gICAgY29uc29sZS5sb2cobG9nTWV0YU1hcmt1cCArIGZvcm1hdFdpdGhPcHRpb25zKHNldHRpbmdzLnByZXR0eUluc3BlY3RPcHRpb25zLCAuLi5sb2dBcmdzKSArIGxvZ0Vycm9yc1N0cik7XG59XG5leHBvcnQgZnVuY3Rpb24gdHJhbnNwb3J0SlNPTihqc29uKSB7XG4gICAgY29uc29sZS5sb2coanNvblN0cmluZ2lmeVJlY3Vyc2l2ZShqc29uKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNCdWZmZXIoYXJnKSB7XG4gICAgcmV0dXJuIGFyZyA/IHVuZGVmaW5lZCA6IHVuZGVmaW5lZDtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBmb3JtYXROdW1iZXJBZGRaZXJvcyh2YWx1ZSwgZGlnaXRzID0gMiwgYWRkTnVtYmVyID0gMCkge1xuICAgIGlmICh2YWx1ZSAhPSBudWxsICYmIGlzTmFOKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG4gICAgdmFsdWUgPSB2YWx1ZSAhPSBudWxsID8gdmFsdWUgKyBhZGROdW1iZXIgOiB2YWx1ZTtcbiAgICByZXR1cm4gZGlnaXRzID09PSAyXG4gICAgICAgID8gdmFsdWUgPT0gbnVsbFxuICAgICAgICAgICAgPyBcIi0tXCJcbiAgICAgICAgICAgIDogdmFsdWUgPCAxMFxuICAgICAgICAgICAgICAgID8gXCIwXCIgKyB2YWx1ZVxuICAgICAgICAgICAgICAgIDogdmFsdWUudG9TdHJpbmcoKVxuICAgICAgICA6IHZhbHVlID09IG51bGxcbiAgICAgICAgICAgID8gXCItLS1cIlxuICAgICAgICAgICAgOiB2YWx1ZSA8IDEwXG4gICAgICAgICAgICAgICAgPyBcIjAwXCIgKyB2YWx1ZVxuICAgICAgICAgICAgICAgIDogdmFsdWUgPCAxMDBcbiAgICAgICAgICAgICAgICAgICAgPyBcIjBcIiArIHZhbHVlXG4gICAgICAgICAgICAgICAgICAgIDogdmFsdWUudG9TdHJpbmcoKTtcbn1cbiIsImltcG9ydCB7IGdldE1ldGEsIGdldEVycm9yVHJhY2UsIHRyYW5zcG9ydEZvcm1hdHRlZCwgdHJhbnNwb3J0SlNPTiwgcHJldHR5Rm9ybWF0TG9nT2JqLCBpc0Vycm9yLCBpc0J1ZmZlciB9IGZyb20gXCIuL3J1bnRpbWUvbm9kZWpzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBmb3JtYXRUZW1wbGF0ZSB9IGZyb20gXCIuL2Zvcm1hdFRlbXBsYXRlLmpzXCI7XG5pbXBvcnQgeyBmb3JtYXROdW1iZXJBZGRaZXJvcyB9IGZyb20gXCIuL2Zvcm1hdE51bWJlckFkZFplcm9zLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9pbnRlcmZhY2VzLmpzXCI7XG5leHBvcnQgY2xhc3MgQmFzZUxvZ2dlciB7XG4gICAgY29uc3RydWN0b3Ioc2V0dGluZ3MsIGxvZ09iaiwgc3RhY2tEZXB0aExldmVsID0gNCkge1xuICAgICAgICB0aGlzLmxvZ09iaiA9IGxvZ09iajtcbiAgICAgICAgdGhpcy5zdGFja0RlcHRoTGV2ZWwgPSBzdGFja0RlcHRoTGV2ZWw7XG4gICAgICAgIGNvbnN0IGlzQnJvd3NlciA9ICFbdHlwZW9mIHdpbmRvdywgdHlwZW9mIGRvY3VtZW50XS5pbmNsdWRlcyhcInVuZGVmaW5lZFwiKTtcbiAgICAgICAgY29uc3QgaXNOb2RlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiID8gcHJvY2VzcyA6IDApID09PSBcIltvYmplY3QgcHJvY2Vzc11cIjtcbiAgICAgICAgdGhpcy5ydW50aW1lID0gaXNCcm93c2VyID8gXCJicm93c2VyXCIgOiBpc05vZGUgPyBcIm5vZGVqc1wiIDogXCJ1bmtub3duXCI7XG4gICAgICAgIGNvbnN0IGlzQnJvd3NlckJsaW5rRW5naW5lID0gaXNCcm93c2VyID8gKCh3aW5kb3c/LltcImNocm9tZVwiXSB8fCAod2luZG93LkludGwgJiYgSW50bD8uW1widjhCcmVha0l0ZXJhdG9yXCJdKSkgJiYgXCJDU1NcIiBpbiB3aW5kb3cpICE9IG51bGwgOiBmYWxzZTtcbiAgICAgICAgY29uc3QgaXNTYWZhcmkgPSBpc0Jyb3dzZXIgPyAvXigoPyFjaHJvbWV8YW5kcm9pZCkuKSpzYWZhcmkvaS50ZXN0KG5hdmlnYXRvcj8udXNlckFnZW50KSA6IGZhbHNlO1xuICAgICAgICB0aGlzLnN0YWNrRGVwdGhMZXZlbCA9IGlzU2FmYXJpID8gNCA6IHRoaXMuc3RhY2tEZXB0aExldmVsO1xuICAgICAgICB0aGlzLnNldHRpbmdzID0ge1xuICAgICAgICAgICAgdHlwZTogc2V0dGluZ3M/LnR5cGUgPz8gXCJwcmV0dHlcIixcbiAgICAgICAgICAgIG5hbWU6IHNldHRpbmdzPy5uYW1lLFxuICAgICAgICAgICAgcGFyZW50TmFtZXM6IHNldHRpbmdzPy5wYXJlbnROYW1lcyxcbiAgICAgICAgICAgIG1pbkxldmVsOiBzZXR0aW5ncz8ubWluTGV2ZWwgPz8gMCxcbiAgICAgICAgICAgIGFyZ3VtZW50c0FycmF5TmFtZTogc2V0dGluZ3M/LmFyZ3VtZW50c0FycmF5TmFtZSxcbiAgICAgICAgICAgIGhpZGVMb2dQb3NpdGlvbkZvclByb2R1Y3Rpb246IHNldHRpbmdzPy5oaWRlTG9nUG9zaXRpb25Gb3JQcm9kdWN0aW9uID8/IGZhbHNlLFxuICAgICAgICAgICAgcHJldHR5TG9nVGVtcGxhdGU6IHNldHRpbmdzPy5wcmV0dHlMb2dUZW1wbGF0ZSA/P1xuICAgICAgICAgICAgICAgIFwie3t5eXl5fX0ue3ttbX19Lnt7ZGR9fSB7e2hofX06e3tNTX19Ont7c3N9fTp7e21zfX1cXHR7e2xvZ0xldmVsTmFtZX19XFx0e3tmaWxlUGF0aFdpdGhMaW5lfX17e25hbWVXaXRoRGVsaW1pdGVyUHJlZml4fX1cXHRcIixcbiAgICAgICAgICAgIHByZXR0eUVycm9yVGVtcGxhdGU6IHNldHRpbmdzPy5wcmV0dHlFcnJvclRlbXBsYXRlID8/IFwiXFxue3tlcnJvck5hbWV9fSB7e2Vycm9yTWVzc2FnZX19XFxuZXJyb3Igc3RhY2s6XFxue3tlcnJvclN0YWNrfX1cIixcbiAgICAgICAgICAgIHByZXR0eUVycm9yU3RhY2tUZW1wbGF0ZTogc2V0dGluZ3M/LnByZXR0eUVycm9yU3RhY2tUZW1wbGF0ZSA/PyBcIiAg4oCiIHt7ZmlsZU5hbWV9fVxcdHt7bWV0aG9kfX1cXG5cXHR7e2ZpbGVQYXRoV2l0aExpbmV9fVwiLFxuICAgICAgICAgICAgcHJldHR5RXJyb3JQYXJlbnROYW1lc1NlcGFyYXRvcjogc2V0dGluZ3M/LnByZXR0eUVycm9yUGFyZW50TmFtZXNTZXBhcmF0b3IgPz8gXCI6XCIsXG4gICAgICAgICAgICBwcmV0dHlFcnJvckxvZ2dlck5hbWVEZWxpbWl0ZXI6IHNldHRpbmdzPy5wcmV0dHlFcnJvckxvZ2dlck5hbWVEZWxpbWl0ZXIgPz8gXCJcXHRcIixcbiAgICAgICAgICAgIHN0eWxlUHJldHR5TG9nczogc2V0dGluZ3M/LnN0eWxlUHJldHR5TG9ncyA/PyB0cnVlLFxuICAgICAgICAgICAgcHJldHR5TG9nVGltZVpvbmU6IHNldHRpbmdzPy5wcmV0dHlMb2dUaW1lWm9uZSA/PyBcIlVUQ1wiLFxuICAgICAgICAgICAgcHJldHR5TG9nU3R5bGVzOiBzZXR0aW5ncz8ucHJldHR5TG9nU3R5bGVzID8/IHtcbiAgICAgICAgICAgICAgICBsb2dMZXZlbE5hbWU6IHtcbiAgICAgICAgICAgICAgICAgICAgXCIqXCI6IFtcImJvbGRcIiwgXCJibGFja1wiLCBcImJnV2hpdGVCcmlnaHRcIiwgXCJkaW1cIl0sXG4gICAgICAgICAgICAgICAgICAgIFNJTExZOiBbXCJib2xkXCIsIFwid2hpdGVcIl0sXG4gICAgICAgICAgICAgICAgICAgIFRSQUNFOiBbXCJib2xkXCIsIFwid2hpdGVCcmlnaHRcIl0sXG4gICAgICAgICAgICAgICAgICAgIERFQlVHOiBbXCJib2xkXCIsIFwiZ3JlZW5cIl0sXG4gICAgICAgICAgICAgICAgICAgIElORk86IFtcImJvbGRcIiwgXCJibHVlXCJdLFxuICAgICAgICAgICAgICAgICAgICBXQVJOOiBbXCJib2xkXCIsIFwieWVsbG93XCJdLFxuICAgICAgICAgICAgICAgICAgICBFUlJPUjogW1wiYm9sZFwiLCBcInJlZFwiXSxcbiAgICAgICAgICAgICAgICAgICAgRkFUQUw6IFtcImJvbGRcIiwgXCJyZWRCcmlnaHRcIl0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkYXRlSXNvU3RyOiBcIndoaXRlXCIsXG4gICAgICAgICAgICAgICAgZmlsZVBhdGhXaXRoTGluZTogXCJ3aGl0ZVwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFtcIndoaXRlXCIsIFwiYm9sZFwiXSxcbiAgICAgICAgICAgICAgICBuYW1lV2l0aERlbGltaXRlclByZWZpeDogW1wid2hpdGVcIiwgXCJib2xkXCJdLFxuICAgICAgICAgICAgICAgIG5hbWVXaXRoRGVsaW1pdGVyU3VmZml4OiBbXCJ3aGl0ZVwiLCBcImJvbGRcIl0sXG4gICAgICAgICAgICAgICAgZXJyb3JOYW1lOiBbXCJib2xkXCIsIFwiYmdSZWRCcmlnaHRcIiwgXCJ3aGl0ZUJyaWdodFwiXSxcbiAgICAgICAgICAgICAgICBmaWxlTmFtZTogW1wieWVsbG93XCJdLFxuICAgICAgICAgICAgICAgIGZpbGVOYW1lV2l0aExpbmU6IFwid2hpdGVcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcmV0dHlJbnNwZWN0T3B0aW9uczogc2V0dGluZ3M/LnByZXR0eUluc3BlY3RPcHRpb25zID8/IHtcbiAgICAgICAgICAgICAgICBjb2xvcnM6IHRydWUsXG4gICAgICAgICAgICAgICAgY29tcGFjdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgZGVwdGg6IEluZmluaXR5LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1ldGFQcm9wZXJ0eTogc2V0dGluZ3M/Lm1ldGFQcm9wZXJ0eSA/PyBcIl9tZXRhXCIsXG4gICAgICAgICAgICBtYXNrUGxhY2Vob2xkZXI6IHNldHRpbmdzPy5tYXNrUGxhY2Vob2xkZXIgPz8gXCJbKioqXVwiLFxuICAgICAgICAgICAgbWFza1ZhbHVlc09mS2V5czogc2V0dGluZ3M/Lm1hc2tWYWx1ZXNPZktleXMgPz8gW1wicGFzc3dvcmRcIl0sXG4gICAgICAgICAgICBtYXNrVmFsdWVzT2ZLZXlzQ2FzZUluc2Vuc2l0aXZlOiBzZXR0aW5ncz8ubWFza1ZhbHVlc09mS2V5c0Nhc2VJbnNlbnNpdGl2ZSA/PyBmYWxzZSxcbiAgICAgICAgICAgIG1hc2tWYWx1ZXNSZWdFeDogc2V0dGluZ3M/Lm1hc2tWYWx1ZXNSZWdFeCxcbiAgICAgICAgICAgIHByZWZpeDogWy4uLihzZXR0aW5ncz8ucHJlZml4ID8/IFtdKV0sXG4gICAgICAgICAgICBhdHRhY2hlZFRyYW5zcG9ydHM6IFsuLi4oc2V0dGluZ3M/LmF0dGFjaGVkVHJhbnNwb3J0cyA/PyBbXSldLFxuICAgICAgICAgICAgb3ZlcndyaXRlOiB7XG4gICAgICAgICAgICAgICAgbWFzazogc2V0dGluZ3M/Lm92ZXJ3cml0ZT8ubWFzayxcbiAgICAgICAgICAgICAgICB0b0xvZ09iajogc2V0dGluZ3M/Lm92ZXJ3cml0ZT8udG9Mb2dPYmosXG4gICAgICAgICAgICAgICAgYWRkTWV0YTogc2V0dGluZ3M/Lm92ZXJ3cml0ZT8uYWRkTWV0YSxcbiAgICAgICAgICAgICAgICBmb3JtYXRNZXRhOiBzZXR0aW5ncz8ub3ZlcndyaXRlPy5mb3JtYXRNZXRhLFxuICAgICAgICAgICAgICAgIGZvcm1hdExvZ09iajogc2V0dGluZ3M/Lm92ZXJ3cml0ZT8uZm9ybWF0TG9nT2JqLFxuICAgICAgICAgICAgICAgIHRyYW5zcG9ydEZvcm1hdHRlZDogc2V0dGluZ3M/Lm92ZXJ3cml0ZT8udHJhbnNwb3J0Rm9ybWF0dGVkLFxuICAgICAgICAgICAgICAgIHRyYW5zcG9ydEpTT046IHNldHRpbmdzPy5vdmVyd3JpdGU/LnRyYW5zcG9ydEpTT04sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNldHRpbmdzLnN0eWxlUHJldHR5TG9ncyA9IHRoaXMuc2V0dGluZ3Muc3R5bGVQcmV0dHlMb2dzICYmIGlzQnJvd3NlciAmJiAhaXNCcm93c2VyQmxpbmtFbmdpbmUgPyBmYWxzZSA6IHRoaXMuc2V0dGluZ3Muc3R5bGVQcmV0dHlMb2dzO1xuICAgIH1cbiAgICBsb2cobG9nTGV2ZWxJZCwgbG9nTGV2ZWxOYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgIGlmIChsb2dMZXZlbElkIDwgdGhpcy5zZXR0aW5ncy5taW5MZXZlbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxvZ0FyZ3MgPSBbLi4udGhpcy5zZXR0aW5ncy5wcmVmaXgsIC4uLmFyZ3NdO1xuICAgICAgICBjb25zdCBtYXNrZWRBcmdzID0gdGhpcy5zZXR0aW5ncy5vdmVyd3JpdGU/Lm1hc2sgIT0gbnVsbFxuICAgICAgICAgICAgPyB0aGlzLnNldHRpbmdzLm92ZXJ3cml0ZT8ubWFzayhsb2dBcmdzKVxuICAgICAgICAgICAgOiB0aGlzLnNldHRpbmdzLm1hc2tWYWx1ZXNPZktleXMgIT0gbnVsbCAmJiB0aGlzLnNldHRpbmdzLm1hc2tWYWx1ZXNPZktleXMubGVuZ3RoID4gMFxuICAgICAgICAgICAgICAgID8gdGhpcy5fbWFzayhsb2dBcmdzKVxuICAgICAgICAgICAgICAgIDogbG9nQXJncztcbiAgICAgICAgY29uc3QgdGhpc0xvZ09iaiA9IHRoaXMubG9nT2JqICE9IG51bGwgPyB0aGlzLl9yZWN1cnNpdmVDbG9uZUFuZEV4ZWN1dGVGdW5jdGlvbnModGhpcy5sb2dPYmopIDogdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBsb2dPYmogPSB0aGlzLnNldHRpbmdzLm92ZXJ3cml0ZT8udG9Mb2dPYmogIT0gbnVsbCA/IHRoaXMuc2V0dGluZ3Mub3ZlcndyaXRlPy50b0xvZ09iaihtYXNrZWRBcmdzLCB0aGlzTG9nT2JqKSA6IHRoaXMuX3RvTG9nT2JqKG1hc2tlZEFyZ3MsIHRoaXNMb2dPYmopO1xuICAgICAgICBjb25zdCBsb2dPYmpXaXRoTWV0YSA9IHRoaXMuc2V0dGluZ3Mub3ZlcndyaXRlPy5hZGRNZXRhICE9IG51bGxcbiAgICAgICAgICAgID8gdGhpcy5zZXR0aW5ncy5vdmVyd3JpdGU/LmFkZE1ldGEobG9nT2JqLCBsb2dMZXZlbElkLCBsb2dMZXZlbE5hbWUpXG4gICAgICAgICAgICA6IHRoaXMuX2FkZE1ldGFUb0xvZ09iaihsb2dPYmosIGxvZ0xldmVsSWQsIGxvZ0xldmVsTmFtZSk7XG4gICAgICAgIGxldCBsb2dNZXRhTWFya3VwO1xuICAgICAgICBsZXQgbG9nQXJnc0FuZEVycm9yc01hcmt1cCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3Mub3ZlcndyaXRlPy5mb3JtYXRNZXRhICE9IG51bGwpIHtcbiAgICAgICAgICAgIGxvZ01ldGFNYXJrdXAgPSB0aGlzLnNldHRpbmdzLm92ZXJ3cml0ZT8uZm9ybWF0TWV0YShsb2dPYmpXaXRoTWV0YT8uW3RoaXMuc2V0dGluZ3MubWV0YVByb3BlcnR5XSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3Mub3ZlcndyaXRlPy5mb3JtYXRMb2dPYmogIT0gbnVsbCkge1xuICAgICAgICAgICAgbG9nQXJnc0FuZEVycm9yc01hcmt1cCA9IHRoaXMuc2V0dGluZ3Mub3ZlcndyaXRlPy5mb3JtYXRMb2dPYmoobWFza2VkQXJncywgdGhpcy5zZXR0aW5ncyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MudHlwZSA9PT0gXCJwcmV0dHlcIikge1xuICAgICAgICAgICAgbG9nTWV0YU1hcmt1cCA9IGxvZ01ldGFNYXJrdXAgPz8gdGhpcy5fcHJldHR5Rm9ybWF0TG9nT2JqTWV0YShsb2dPYmpXaXRoTWV0YT8uW3RoaXMuc2V0dGluZ3MubWV0YVByb3BlcnR5XSk7XG4gICAgICAgICAgICBsb2dBcmdzQW5kRXJyb3JzTWFya3VwID0gbG9nQXJnc0FuZEVycm9yc01hcmt1cCA/PyBwcmV0dHlGb3JtYXRMb2dPYmoobWFza2VkQXJncywgdGhpcy5zZXR0aW5ncyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvZ01ldGFNYXJrdXAgIT0gbnVsbCAmJiBsb2dBcmdzQW5kRXJyb3JzTWFya3VwICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3Mub3ZlcndyaXRlPy50cmFuc3BvcnRGb3JtYXR0ZWQgIT0gbnVsbFxuICAgICAgICAgICAgICAgID8gdGhpcy5zZXR0aW5ncy5vdmVyd3JpdGU/LnRyYW5zcG9ydEZvcm1hdHRlZChsb2dNZXRhTWFya3VwLCBsb2dBcmdzQW5kRXJyb3JzTWFya3VwLmFyZ3MsIGxvZ0FyZ3NBbmRFcnJvcnNNYXJrdXAuZXJyb3JzLCB0aGlzLnNldHRpbmdzKVxuICAgICAgICAgICAgICAgIDogdHJhbnNwb3J0Rm9ybWF0dGVkKGxvZ01ldGFNYXJrdXAsIGxvZ0FyZ3NBbmRFcnJvcnNNYXJrdXAuYXJncywgbG9nQXJnc0FuZEVycm9yc01hcmt1cC5lcnJvcnMsIHRoaXMuc2V0dGluZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5vdmVyd3JpdGU/LnRyYW5zcG9ydEpTT04gIT0gbnVsbFxuICAgICAgICAgICAgICAgID8gdGhpcy5zZXR0aW5ncy5vdmVyd3JpdGU/LnRyYW5zcG9ydEpTT04obG9nT2JqV2l0aE1ldGEpXG4gICAgICAgICAgICAgICAgOiB0aGlzLnNldHRpbmdzLnR5cGUgIT09IFwiaGlkZGVuXCJcbiAgICAgICAgICAgICAgICAgICAgPyB0cmFuc3BvcnRKU09OKGxvZ09ialdpdGhNZXRhKVxuICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5hdHRhY2hlZFRyYW5zcG9ydHMgIT0gbnVsbCAmJiB0aGlzLnNldHRpbmdzLmF0dGFjaGVkVHJhbnNwb3J0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLmF0dGFjaGVkVHJhbnNwb3J0cy5mb3JFYWNoKCh0cmFuc3BvcnRMb2dnZXIpID0+IHtcbiAgICAgICAgICAgICAgICB0cmFuc3BvcnRMb2dnZXIobG9nT2JqV2l0aE1ldGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxvZ09ialdpdGhNZXRhO1xuICAgIH1cbiAgICBhdHRhY2hUcmFuc3BvcnQodHJhbnNwb3J0TG9nZ2VyKSB7XG4gICAgICAgIHRoaXMuc2V0dGluZ3MuYXR0YWNoZWRUcmFuc3BvcnRzLnB1c2godHJhbnNwb3J0TG9nZ2VyKTtcbiAgICB9XG4gICAgZ2V0U3ViTG9nZ2VyKHNldHRpbmdzLCBsb2dPYmopIHtcbiAgICAgICAgY29uc3Qgc3ViTG9nZ2VyU2V0dGluZ3MgPSB7XG4gICAgICAgICAgICAuLi50aGlzLnNldHRpbmdzLFxuICAgICAgICAgICAgLi4uc2V0dGluZ3MsXG4gICAgICAgICAgICBwYXJlbnROYW1lczogdGhpcy5zZXR0aW5ncz8ucGFyZW50TmFtZXMgIT0gbnVsbCAmJiB0aGlzLnNldHRpbmdzPy5uYW1lICE9IG51bGxcbiAgICAgICAgICAgICAgICA/IFsuLi50aGlzLnNldHRpbmdzLnBhcmVudE5hbWVzLCB0aGlzLnNldHRpbmdzLm5hbWVdXG4gICAgICAgICAgICAgICAgOiB0aGlzLnNldHRpbmdzPy5uYW1lICE9IG51bGxcbiAgICAgICAgICAgICAgICAgICAgPyBbdGhpcy5zZXR0aW5ncy5uYW1lXVxuICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHByZWZpeDogWy4uLnRoaXMuc2V0dGluZ3MucHJlZml4LCAuLi4oc2V0dGluZ3M/LnByZWZpeCA/PyBbXSldLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBzdWJMb2dnZXIgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihzdWJMb2dnZXJTZXR0aW5ncywgbG9nT2JqID8/IHRoaXMubG9nT2JqLCB0aGlzLnN0YWNrRGVwdGhMZXZlbCk7XG4gICAgICAgIHJldHVybiBzdWJMb2dnZXI7XG4gICAgfVxuICAgIF9tYXNrKGFyZ3MpIHtcbiAgICAgICAgY29uc3QgbWFza1ZhbHVlc09mS2V5cyA9IHRoaXMuc2V0dGluZ3MubWFza1ZhbHVlc09mS2V5c0Nhc2VJbnNlbnNpdGl2ZSAhPT0gdHJ1ZSA/IHRoaXMuc2V0dGluZ3MubWFza1ZhbHVlc09mS2V5cyA6IHRoaXMuc2V0dGluZ3MubWFza1ZhbHVlc09mS2V5cy5tYXAoKGtleSkgPT4ga2V5LnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICByZXR1cm4gYXJncz8ubWFwKChhcmcpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZWN1cnNpdmVDbG9uZUFuZE1hc2tWYWx1ZXNPZktleXMoYXJnLCBtYXNrVmFsdWVzT2ZLZXlzKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9yZWN1cnNpdmVDbG9uZUFuZE1hc2tWYWx1ZXNPZktleXMoc291cmNlLCBrZXlzLCBzZWVuID0gW10pIHtcbiAgICAgICAgaWYgKHNlZW4uaW5jbHVkZXMoc291cmNlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgLi4uc291cmNlIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2UgPT09IFwib2JqZWN0XCIgJiYgc291cmNlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChzb3VyY2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc0J1ZmZlcihzb3VyY2UpXG4gICAgICAgICAgICA/IHNvdXJjZVxuICAgICAgICAgICAgOiBzb3VyY2UgaW5zdGFuY2VvZiBNYXBcbiAgICAgICAgICAgICAgICA/IG5ldyBNYXAoc291cmNlKVxuICAgICAgICAgICAgICAgIDogc291cmNlIGluc3RhbmNlb2YgU2V0XG4gICAgICAgICAgICAgICAgICAgID8gbmV3IFNldChzb3VyY2UpXG4gICAgICAgICAgICAgICAgICAgIDogQXJyYXkuaXNBcnJheShzb3VyY2UpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHNvdXJjZS5tYXAoKGl0ZW0pID0+IHRoaXMuX3JlY3Vyc2l2ZUNsb25lQW5kTWFza1ZhbHVlc09mS2V5cyhpdGVtLCBrZXlzLCBzZWVuKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogc291cmNlIGluc3RhbmNlb2YgRGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbmV3IERhdGUoc291cmNlLmdldFRpbWUoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGlzRXJyb3Ioc291cmNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZSkucmVkdWNlKChvLCBwcm9wKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvW3Byb3BdID0ga2V5cy5pbmNsdWRlcyh0aGlzLnNldHRpbmdzPy5tYXNrVmFsdWVzT2ZLZXlzQ2FzZUluc2Vuc2l0aXZlICE9PSB0cnVlID8gcHJvcCA6IHByb3AudG9Mb3dlckNhc2UoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMuc2V0dGluZ3MubWFza1BsYWNlaG9sZGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLl9yZWN1cnNpdmVDbG9uZUFuZE1hc2tWYWx1ZXNPZktleXMoc291cmNlW3Byb3BdLCBrZXlzLCBzZWVuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB0aGlzLl9jbG9uZUVycm9yKHNvdXJjZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogc291cmNlICE9IG51bGwgJiYgdHlwZW9mIHNvdXJjZSA9PT0gXCJvYmplY3RcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2UpLnJlZHVjZSgobywgcHJvcCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9bcHJvcF0gPSBrZXlzLmluY2x1ZGVzKHRoaXMuc2V0dGluZ3M/Lm1hc2tWYWx1ZXNPZktleXNDYXNlSW5zZW5zaXRpdmUgIT09IHRydWUgPyBwcm9wIDogcHJvcC50b0xvd2VyQ2FzZSgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMuc2V0dGluZ3MubWFza1BsYWNlaG9sZGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5fcmVjdXJzaXZlQ2xvbmVBbmRNYXNrVmFsdWVzT2ZLZXlzKHNvdXJjZVtwcm9wXSwga2V5cywgc2Vlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG87XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZihzb3VyY2UpKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKChzb3VyY2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldHRpbmdzPy5tYXNrVmFsdWVzUmVnRXg/LmZvckVhY2goKHJlZ0V4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZSA9IHNvdXJjZT8udG9TdHJpbmcoKT8ucmVwbGFjZShyZWdFeCwgdGhpcy5zZXR0aW5ncy5tYXNrUGxhY2Vob2xkZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KShzb3VyY2UpO1xuICAgIH1cbiAgICBfcmVjdXJzaXZlQ2xvbmVBbmRFeGVjdXRlRnVuY3Rpb25zKHNvdXJjZSwgc2VlbiA9IFtdKSB7XG4gICAgICAgIGlmIChzZWVuLmluY2x1ZGVzKHNvdXJjZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnNvdXJjZSB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygc291cmNlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICBzZWVuLnB1c2goc291cmNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShzb3VyY2UpXG4gICAgICAgICAgICA/IHNvdXJjZS5tYXAoKGl0ZW0pID0+IHRoaXMuX3JlY3Vyc2l2ZUNsb25lQW5kRXhlY3V0ZUZ1bmN0aW9ucyhpdGVtLCBzZWVuKSlcbiAgICAgICAgICAgIDogc291cmNlIGluc3RhbmNlb2YgRGF0ZVxuICAgICAgICAgICAgICAgID8gbmV3IERhdGUoc291cmNlLmdldFRpbWUoKSlcbiAgICAgICAgICAgICAgICA6IHNvdXJjZSAmJiB0eXBlb2Ygc291cmNlID09PSBcIm9iamVjdFwiXG4gICAgICAgICAgICAgICAgICAgID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoc291cmNlKS5yZWR1Y2UoKG8sIHByb3ApID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBwcm9wLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgcHJvcCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb1twcm9wXSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHNvdXJjZVtwcm9wXSA9PT0gXCJmdW5jdGlvblwiID8gc291cmNlW3Byb3BdKCkgOiB0aGlzLl9yZWN1cnNpdmVDbG9uZUFuZEV4ZWN1dGVGdW5jdGlvbnMoc291cmNlW3Byb3BdLCBzZWVuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvO1xuICAgICAgICAgICAgICAgICAgICB9LCBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZihzb3VyY2UpKSlcbiAgICAgICAgICAgICAgICAgICAgOiBzb3VyY2U7XG4gICAgfVxuICAgIF90b0xvZ09iaihhcmdzLCBjbG9uZWRMb2dPYmogPSB7fSkge1xuICAgICAgICBhcmdzID0gYXJncz8ubWFwKChhcmcpID0+IChpc0Vycm9yKGFyZykgPyB0aGlzLl90b0Vycm9yT2JqZWN0KGFyZykgOiBhcmcpKTtcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuYXJndW1lbnRzQXJyYXlOYW1lID09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSAmJiAhQXJyYXkuaXNBcnJheShhcmdzWzBdKSAmJiBpc0J1ZmZlcihhcmdzWzBdKSAhPT0gdHJ1ZSAmJiAhKGFyZ3NbMF0gaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgICAgICAgICAgICAgIGNsb25lZExvZ09iaiA9IHR5cGVvZiBhcmdzWzBdID09PSBcIm9iamVjdFwiICYmIGFyZ3NbMF0gIT0gbnVsbCA/IHsgLi4uYXJnc1swXSwgLi4uY2xvbmVkTG9nT2JqIH0gOiB7IDA6IGFyZ3NbMF0sIC4uLmNsb25lZExvZ09iaiB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2xvbmVkTG9nT2JqID0geyAuLi5jbG9uZWRMb2dPYmosIC4uLmFyZ3MgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNsb25lZExvZ09iaiA9IHtcbiAgICAgICAgICAgICAgICAuLi5jbG9uZWRMb2dPYmosXG4gICAgICAgICAgICAgICAgW3RoaXMuc2V0dGluZ3MuYXJndW1lbnRzQXJyYXlOYW1lXTogYXJncyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNsb25lZExvZ09iajtcbiAgICB9XG4gICAgX2Nsb25lRXJyb3IoZXJyb3IpIHtcbiAgICAgICAgY29uc3QgRXJyb3JDb25zdHJ1Y3RvciA9IGVycm9yLmNvbnN0cnVjdG9yO1xuICAgICAgICBjb25zdCBuZXdFcnJvciA9IG5ldyBFcnJvckNvbnN0cnVjdG9yKGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICBPYmplY3QuYXNzaWduKG5ld0Vycm9yLCBlcnJvcik7XG4gICAgICAgIGNvbnN0IHByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhuZXdFcnJvcik7XG4gICAgICAgIGZvciAoY29uc3QgcHJvcE5hbWUgb2YgcHJvcGVydHlOYW1lcykge1xuICAgICAgICAgICAgY29uc3QgcHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG5ld0Vycm9yLCBwcm9wTmFtZSk7XG4gICAgICAgICAgICBpZiAocHJvcERlc2MpIHtcbiAgICAgICAgICAgICAgICBwcm9wRGVzYy53cml0YWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld0Vycm9yLCBwcm9wTmFtZSwgcHJvcERlc2MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdFcnJvcjtcbiAgICB9XG4gICAgX3RvRXJyb3JPYmplY3QoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5hdGl2ZUVycm9yOiBlcnJvcixcbiAgICAgICAgICAgIG5hbWU6IGVycm9yLm5hbWUgPz8gXCJFcnJvclwiLFxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgICAgIHN0YWNrOiBnZXRFcnJvclRyYWNlKGVycm9yKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgX2FkZE1ldGFUb0xvZ09iaihsb2dPYmosIGxvZ0xldmVsSWQsIGxvZ0xldmVsTmFtZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4ubG9nT2JqLFxuICAgICAgICAgICAgW3RoaXMuc2V0dGluZ3MubWV0YVByb3BlcnR5XTogZ2V0TWV0YShsb2dMZXZlbElkLCBsb2dMZXZlbE5hbWUsIHRoaXMuc3RhY2tEZXB0aExldmVsLCB0aGlzLnNldHRpbmdzLmhpZGVMb2dQb3NpdGlvbkZvclByb2R1Y3Rpb24sIHRoaXMuc2V0dGluZ3MubmFtZSwgdGhpcy5zZXR0aW5ncy5wYXJlbnROYW1lcyksXG4gICAgICAgIH07XG4gICAgfVxuICAgIF9wcmV0dHlGb3JtYXRMb2dPYmpNZXRhKGxvZ09iak1ldGEpIHtcbiAgICAgICAgaWYgKGxvZ09iak1ldGEgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHRlbXBsYXRlID0gdGhpcy5zZXR0aW5ncy5wcmV0dHlMb2dUZW1wbGF0ZTtcbiAgICAgICAgY29uc3QgcGxhY2Vob2xkZXJWYWx1ZXMgPSB7fTtcbiAgICAgICAgaWYgKHRlbXBsYXRlLmluY2x1ZGVzKFwie3t5eXl5fX0ue3ttbX19Lnt7ZGR9fSB7e2hofX06e3tNTX19Ont7c3N9fTp7e21zfX1cIikpIHtcbiAgICAgICAgICAgIHRlbXBsYXRlID0gdGVtcGxhdGUucmVwbGFjZShcInt7eXl5eX19Lnt7bW19fS57e2RkfX0ge3toaH19Ont7TU19fTp7e3NzfX06e3ttc319XCIsIFwie3tkYXRlSXNvU3RyfX1cIik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5wcmV0dHlMb2dUaW1lWm9uZSA9PT0gXCJVVENcIikge1xuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyVmFsdWVzW1wieXl5eVwiXSA9IGxvZ09iak1ldGE/LmRhdGU/LmdldFVUQ0Z1bGxZZWFyKCkgPz8gXCItLS0tXCI7XG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXJWYWx1ZXNbXCJtbVwiXSA9IGZvcm1hdE51bWJlckFkZFplcm9zKGxvZ09iak1ldGE/LmRhdGU/LmdldFVUQ01vbnRoKCksIDIsIDEpO1xuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyVmFsdWVzW1wiZGRcIl0gPSBmb3JtYXROdW1iZXJBZGRaZXJvcyhsb2dPYmpNZXRhPy5kYXRlPy5nZXRVVENEYXRlKCksIDIpO1xuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyVmFsdWVzW1wiaGhcIl0gPSBmb3JtYXROdW1iZXJBZGRaZXJvcyhsb2dPYmpNZXRhPy5kYXRlPy5nZXRVVENIb3VycygpLCAyKTtcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlclZhbHVlc1tcIk1NXCJdID0gZm9ybWF0TnVtYmVyQWRkWmVyb3MobG9nT2JqTWV0YT8uZGF0ZT8uZ2V0VVRDTWludXRlcygpLCAyKTtcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlclZhbHVlc1tcInNzXCJdID0gZm9ybWF0TnVtYmVyQWRkWmVyb3MobG9nT2JqTWV0YT8uZGF0ZT8uZ2V0VVRDU2Vjb25kcygpLCAyKTtcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlclZhbHVlc1tcIm1zXCJdID0gZm9ybWF0TnVtYmVyQWRkWmVyb3MobG9nT2JqTWV0YT8uZGF0ZT8uZ2V0VVRDTWlsbGlzZWNvbmRzKCksIDMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXJWYWx1ZXNbXCJ5eXl5XCJdID0gbG9nT2JqTWV0YT8uZGF0ZT8uZ2V0RnVsbFllYXIoKSA/PyBcIi0tLS1cIjtcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlclZhbHVlc1tcIm1tXCJdID0gZm9ybWF0TnVtYmVyQWRkWmVyb3MobG9nT2JqTWV0YT8uZGF0ZT8uZ2V0TW9udGgoKSwgMiwgMSk7XG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXJWYWx1ZXNbXCJkZFwiXSA9IGZvcm1hdE51bWJlckFkZFplcm9zKGxvZ09iak1ldGE/LmRhdGU/LmdldERhdGUoKSwgMik7XG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXJWYWx1ZXNbXCJoaFwiXSA9IGZvcm1hdE51bWJlckFkZFplcm9zKGxvZ09iak1ldGE/LmRhdGU/LmdldEhvdXJzKCksIDIpO1xuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyVmFsdWVzW1wiTU1cIl0gPSBmb3JtYXROdW1iZXJBZGRaZXJvcyhsb2dPYmpNZXRhPy5kYXRlPy5nZXRNaW51dGVzKCksIDIpO1xuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyVmFsdWVzW1wic3NcIl0gPSBmb3JtYXROdW1iZXJBZGRaZXJvcyhsb2dPYmpNZXRhPy5kYXRlPy5nZXRTZWNvbmRzKCksIDIpO1xuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyVmFsdWVzW1wibXNcIl0gPSBmb3JtYXROdW1iZXJBZGRaZXJvcyhsb2dPYmpNZXRhPy5kYXRlPy5nZXRNaWxsaXNlY29uZHMoKSwgMyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGF0ZUluU2V0dGluZ3NUaW1lWm9uZSA9IHRoaXMuc2V0dGluZ3MucHJldHR5TG9nVGltZVpvbmUgPT09IFwiVVRDXCIgPyBsb2dPYmpNZXRhPy5kYXRlIDogbmV3IERhdGUobG9nT2JqTWV0YT8uZGF0ZT8uZ2V0VGltZSgpIC0gbG9nT2JqTWV0YT8uZGF0ZT8uZ2V0VGltZXpvbmVPZmZzZXQoKSAqIDYwMDAwKTtcbiAgICAgICAgcGxhY2Vob2xkZXJWYWx1ZXNbXCJyYXdJc29TdHJcIl0gPSBkYXRlSW5TZXR0aW5nc1RpbWVab25lPy50b0lTT1N0cmluZygpO1xuICAgICAgICBwbGFjZWhvbGRlclZhbHVlc1tcImRhdGVJc29TdHJcIl0gPSBkYXRlSW5TZXR0aW5nc1RpbWVab25lPy50b0lTT1N0cmluZygpLnJlcGxhY2UoXCJUXCIsIFwiIFwiKS5yZXBsYWNlKFwiWlwiLCBcIlwiKTtcbiAgICAgICAgcGxhY2Vob2xkZXJWYWx1ZXNbXCJsb2dMZXZlbE5hbWVcIl0gPSBsb2dPYmpNZXRhPy5sb2dMZXZlbE5hbWU7XG4gICAgICAgIHBsYWNlaG9sZGVyVmFsdWVzW1wiZmlsZU5hbWVXaXRoTGluZVwiXSA9IGxvZ09iak1ldGE/LnBhdGg/LmZpbGVOYW1lV2l0aExpbmUgPz8gXCJcIjtcbiAgICAgICAgcGxhY2Vob2xkZXJWYWx1ZXNbXCJmaWxlUGF0aFdpdGhMaW5lXCJdID0gbG9nT2JqTWV0YT8ucGF0aD8uZmlsZVBhdGhXaXRoTGluZSA/PyBcIlwiO1xuICAgICAgICBwbGFjZWhvbGRlclZhbHVlc1tcImZ1bGxGaWxlUGF0aFwiXSA9IGxvZ09iak1ldGE/LnBhdGg/LmZ1bGxGaWxlUGF0aCA/PyBcIlwiO1xuICAgICAgICBsZXQgcGFyZW50TmFtZXNTdHJpbmcgPSB0aGlzLnNldHRpbmdzLnBhcmVudE5hbWVzPy5qb2luKHRoaXMuc2V0dGluZ3MucHJldHR5RXJyb3JQYXJlbnROYW1lc1NlcGFyYXRvcik7XG4gICAgICAgIHBhcmVudE5hbWVzU3RyaW5nID0gcGFyZW50TmFtZXNTdHJpbmcgIT0gbnVsbCAmJiBsb2dPYmpNZXRhPy5uYW1lICE9IG51bGwgPyBwYXJlbnROYW1lc1N0cmluZyArIHRoaXMuc2V0dGluZ3MucHJldHR5RXJyb3JQYXJlbnROYW1lc1NlcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgICAgcGxhY2Vob2xkZXJWYWx1ZXNbXCJuYW1lXCJdID0gbG9nT2JqTWV0YT8ubmFtZSAhPSBudWxsIHx8IHBhcmVudE5hbWVzU3RyaW5nICE9IG51bGwgPyAocGFyZW50TmFtZXNTdHJpbmcgPz8gXCJcIikgKyBsb2dPYmpNZXRhPy5uYW1lID8/IFwiXCIgOiBcIlwiO1xuICAgICAgICBwbGFjZWhvbGRlclZhbHVlc1tcIm5hbWVXaXRoRGVsaW1pdGVyUHJlZml4XCJdID1cbiAgICAgICAgICAgIHBsYWNlaG9sZGVyVmFsdWVzW1wibmFtZVwiXS5sZW5ndGggPiAwID8gdGhpcy5zZXR0aW5ncy5wcmV0dHlFcnJvckxvZ2dlck5hbWVEZWxpbWl0ZXIgKyBwbGFjZWhvbGRlclZhbHVlc1tcIm5hbWVcIl0gOiBcIlwiO1xuICAgICAgICBwbGFjZWhvbGRlclZhbHVlc1tcIm5hbWVXaXRoRGVsaW1pdGVyU3VmZml4XCJdID1cbiAgICAgICAgICAgIHBsYWNlaG9sZGVyVmFsdWVzW1wibmFtZVwiXS5sZW5ndGggPiAwID8gcGxhY2Vob2xkZXJWYWx1ZXNbXCJuYW1lXCJdICsgdGhpcy5zZXR0aW5ncy5wcmV0dHlFcnJvckxvZ2dlck5hbWVEZWxpbWl0ZXIgOiBcIlwiO1xuICAgICAgICByZXR1cm4gZm9ybWF0VGVtcGxhdGUodGhpcy5zZXR0aW5ncywgdGVtcGxhdGUsIHBsYWNlaG9sZGVyVmFsdWVzKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBCYXNlTG9nZ2VyIH0gZnJvbSBcIi4vQmFzZUxvZ2dlci5qc1wiO1xuZXhwb3J0IHsgQmFzZUxvZ2dlciB9O1xuZXhwb3J0IGNsYXNzIExvZ2dlciBleHRlbmRzIEJhc2VMb2dnZXIge1xuICAgIGNvbnN0cnVjdG9yKHNldHRpbmdzLCBsb2dPYmopIHtcbiAgICAgICAgc3VwZXIoc2V0dGluZ3MsIGxvZ09iaiwgNSk7XG4gICAgfVxuICAgIGxvZyhsb2dMZXZlbElkLCBsb2dMZXZlbE5hbWUsIC4uLmFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmxvZyhsb2dMZXZlbElkLCBsb2dMZXZlbE5hbWUsIC4uLmFyZ3MpO1xuICAgIH1cbiAgICBzaWxseSguLi5hcmdzKSB7XG4gICAgICAgIHJldHVybiBzdXBlci5sb2coMCwgXCJTSUxMWVwiLCAuLi5hcmdzKTtcbiAgICB9XG4gICAgdHJhY2UoLi4uYXJncykge1xuICAgICAgICByZXR1cm4gc3VwZXIubG9nKDEsIFwiVFJBQ0VcIiwgLi4uYXJncyk7XG4gICAgfVxuICAgIGRlYnVnKC4uLmFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmxvZygyLCBcIkRFQlVHXCIsIC4uLmFyZ3MpO1xuICAgIH1cbiAgICBpbmZvKC4uLmFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmxvZygzLCBcIklORk9cIiwgLi4uYXJncyk7XG4gICAgfVxuICAgIHdhcm4oLi4uYXJncykge1xuICAgICAgICByZXR1cm4gc3VwZXIubG9nKDQsIFwiV0FSTlwiLCAuLi5hcmdzKTtcbiAgICB9XG4gICAgZXJyb3IoLi4uYXJncykge1xuICAgICAgICByZXR1cm4gc3VwZXIubG9nKDUsIFwiRVJST1JcIiwgLi4uYXJncyk7XG4gICAgfVxuICAgIGZhdGFsKC4uLmFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmxvZyg2LCBcIkZBVEFMXCIsIC4uLmFyZ3MpO1xuICAgIH1cbiAgICBnZXRTdWJMb2dnZXIoc2V0dGluZ3MsIGxvZ09iaikge1xuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0U3ViTG9nZ2VyKHNldHRpbmdzLCBsb2dPYmopO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IHNlbmRNZXNzYWdlIH0gZnJvbSAnY2hyb21lL2hlbHBlcnMvc2VuZC1tZXNzYWdlJ1xuaW1wb3J0IHsgY3JlYXRlTWVzc2FnZSB9IGZyb20gJ2Nocm9tZS9tZXNzYWdlcy9jcmVhdGUtbWVzc2FnZSdcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJ2NvbmZpZydcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJ3RzbG9nJ1xuXG5leHBvcnQgdHlwZSBBcHBMb2dnZXIgPSB0eXBlb2YgbG9nZ2VyXG5leHBvcnQgY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih7XG4gIHByZXR0eUxvZ1RlbXBsYXRlOiAne3toaH19Ont7TU19fTp7e3NzfX06e3ttc319XFx0e3tsb2dMZXZlbE5hbWV9fVxcdCcsXG4gIG1pbkxldmVsOiBjb25maWcubG9nTGV2ZWwsXG59KVxuXG5leHBvcnQgY29uc3Qgb2Zmc2NyZWVuTG9nZ2VyID0gbmV3IExvZ2dlcih7XG4gIHByZXR0eUxvZ1RlbXBsYXRlOiAne3toaH19Ont7TU19fTp7e3NzfX06e3ttc319XFx0e3tsb2dMZXZlbE5hbWV9fVxcdCcsXG4gIG1pbkxldmVsOiBjb25maWcubG9nTGV2ZWwsXG59KVxuXG5vZmZzY3JlZW5Mb2dnZXIuYXR0YWNoVHJhbnNwb3J0KChsb2dPYmopID0+IHtcbiAgc2VuZE1lc3NhZ2UoY3JlYXRlTWVzc2FnZS5vZmZzY3JlZW5Mb2cobG9nT2JqKSlcbn0pXG4iXSwibmFtZXMiOlsicHJldHR5TG9nU3R5bGVzIiwiZm9ybWF0VGVtcGxhdGUiLCJzZXR0aW5ncyIsInRlbXBsYXRlIiwidmFsdWVzIiwiaGlkZVVuc2V0UGxhY2Vob2xkZXIiLCJ0ZW1wbGF0ZVN0cmluZyIsImFuc2lDb2xvcldyYXAiLCJwbGFjZWhvbGRlclZhbHVlIiwiY29kZSIsInN0eWxlV3JhcCIsInZhbHVlIiwic3R5bGUiLCJwcmV2VmFsdWUiLCJ0aGlzU3R5bGUiLCJfIiwicGxhY2Vob2xkZXIiLCJfYSIsImpzb25TdHJpbmdpZnlSZWN1cnNpdmUiLCJvYmoiLCJjYWNoZSIsImtleSIsImluc3BlY3QiLCJvcHRzIiwiY3R4Iiwic3R5bGl6ZU5vQ29sb3IiLCJfZXh0ZW5kIiwiaXNVbmRlZmluZWQiLCJzdHlsaXplV2l0aENvbG9yIiwiZm9ybWF0VmFsdWUiLCJpc0Jvb2xlYW4iLCJhcmciLCJzdHIiLCJzdHlsZVR5cGUiLCJfYiIsIl9kIiwiX2MiLCJpc0Z1bmN0aW9uIiwiaXNTdHJpbmciLCJpc051bWJlciIsImlzTnVsbCIsImhhc093biIsInByb3AiLCJpc1JlZ0V4cCIsInJlIiwiaXNPYmplY3QiLCJvYmplY3RUb1N0cmluZyIsImlzRXJyb3IiLCJlIiwiaXNEYXRlIiwiZCIsIm8iLCJhcnJheVRvSGFzaCIsImFycmF5IiwiaGFzaCIsInZhbCIsImZvcm1hdEFycmF5IiwicmVjdXJzZVRpbWVzIiwidmlzaWJsZUtleXMiLCJrZXlzIiwib3V0cHV0IiwiaSIsImwiLCJmb3JtYXRQcm9wZXJ0eSIsImZvcm1hdEVycm9yIiwicmV0IiwicHJpbWl0aXZlIiwiZm9ybWF0UHJpbWl0aXZlIiwibmFtZSIsImJhc2UiLCJicmFjZXMiLCJyZWR1Y2VUb1NpbmdsZVN0cmluZyIsImRlc2MiLCJsaW5lIiwic2ltcGxlIiwib3JpZ2luIiwiYWRkIiwiZm9ybWF0V2l0aE9wdGlvbnMiLCJpbnNwZWN0T3B0aW9ucyIsImFyZ3MiLCJmaXJzdCIsImEiLCJqb2luIiwidGVtcFN0ciIsImxhc3RQb3MiLCJuZXh0Q2hhciIsInRlbXBBcmciLCJ0ZW1wTnVtIiwidGVtcEludGVnZXIiLCJ0ZW1wRmxvYXQiLCJtZXRhIiwicGF0aFJlZ2V4IiwiZ2V0TWV0YSIsImxvZ0xldmVsSWQiLCJsb2dMZXZlbE5hbWUiLCJzdGFja0RlcHRoTGV2ZWwiLCJoaWRlTG9nUG9zaXRpb25Gb3JQZXJmb3JtYW5jZSIsInBhcmVudE5hbWVzIiwiZ2V0Q2FsbGVyU3RhY2tGcmFtZSIsImVycm9yIiwic3RhY2tMaW5lVG9TdGFja0ZyYW1lIiwiZ2V0RXJyb3JUcmFjZSIsInJlc3VsdCIsImhyZWYiLCJwYXRoUmVzdWx0IiwibWF0Y2giLCJwYXRoUGFydHMiLCJwcmV0dHlGb3JtYXRMb2dPYmoiLCJtYXNrZWRBcmdzIiwicHJldHR5Rm9ybWF0RXJyb3JPYmoiLCJlcnJvclN0YWNrU3RyIiwic3RhY2tGcmFtZSIsInBsYWNlaG9sZGVyVmFsdWVzRXJyb3IiLCJ0cmFuc3BvcnRGb3JtYXR0ZWQiLCJsb2dNZXRhTWFya3VwIiwibG9nQXJncyIsImxvZ0Vycm9ycyIsImxvZ0Vycm9yc1N0ciIsInRyYW5zcG9ydEpTT04iLCJqc29uIiwiZm9ybWF0TnVtYmVyQWRkWmVyb3MiLCJkaWdpdHMiLCJhZGROdW1iZXIiLCJCYXNlTG9nZ2VyIiwibG9nT2JqIiwiaXNCcm93c2VyIiwiaXNOb2RlIiwiaXNCcm93c2VyQmxpbmtFbmdpbmUiLCJpc1NhZmFyaSIsIl9lIiwiX2YiLCJfZyIsIl9oIiwiX2kiLCJfaiIsIl9rIiwiX2wiLCJfbSIsIl9uIiwiX28iLCJfcCIsIl9xIiwiX3IiLCJfcyIsIl90IiwiX3UiLCJfdiIsIl93IiwiX3giLCJfeSIsInRoaXNMb2dPYmoiLCJsb2dPYmpXaXRoTWV0YSIsImxvZ0FyZ3NBbmRFcnJvcnNNYXJrdXAiLCJ0cmFuc3BvcnRMb2dnZXIiLCJzdWJMb2dnZXJTZXR0aW5ncyIsIm1hc2tWYWx1ZXNPZktleXMiLCJzb3VyY2UiLCJzZWVuIiwiaXRlbSIsInJlZ0V4IiwiY2xvbmVkTG9nT2JqIiwiRXJyb3JDb25zdHJ1Y3RvciIsIm5ld0Vycm9yIiwicHJvcGVydHlOYW1lcyIsInByb3BOYW1lIiwicHJvcERlc2MiLCJsb2dPYmpNZXRhIiwicGxhY2Vob2xkZXJWYWx1ZXMiLCJkYXRlSW5TZXR0aW5nc1RpbWVab25lIiwicGFyZW50TmFtZXNTdHJpbmciLCJMb2dnZXIiLCJsb2dnZXIiLCJjb25maWciLCJvZmZz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
