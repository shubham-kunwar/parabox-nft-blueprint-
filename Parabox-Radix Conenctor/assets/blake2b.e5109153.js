import{a as AI,e as II,o as iI,b as tI}from"./index.es.095da3c8.js";import{b as W}from"./Subject.c67f7ae3.js";var z=1/0,wA=9007199254740991,eI=17976931348623157e292,AA=0/0,nI="[object Function]",gI="[object GeneratorFunction]",CI="[object Symbol]",rI=/^\s+|\s+$/g,hI=/^[-+]0x[0-9a-f]+$/i,oI=/^0b[01]+$/i,EI=/^0o[0-7]+$/i,QI=/^(?:0|[1-9]\d*)$/,fI=parseInt,BI=Object.prototype,cA=BI.toString,yI=Math.ceil,sI=Math.max;function wI(A,I,i){var g=-1,r=A.length;I<0&&(I=-I>r?0:r+I),i=i>r?r:i,i<0&&(i+=r),r=I>i?0:i-I>>>0,I>>>=0;for(var h=Array(r);++g<r;)h[g]=A[g+I];return h}function cI(A,I){return I=I==null?wA:I,!!I&&(typeof A=="number"||QI.test(A))&&A>-1&&A%1==0&&A<I}function DI(A,I,i){if(!k(i))return!1;var g=typeof I;return(g=="number"?SI(i)&&cI(I,i.length):g=="string"&&I in i)?uI(i[I],A):!1}function aI(A,I,i){(i?DI(A,I,i):I===void 0)?I=1:I=sI(HI(I),0);var g=A?A.length:0;if(!g||I<1)return[];for(var r=0,h=0,o=Array(yI(g/I));r<g;)o[h++]=wI(A,r,r+=I);return o}function uI(A,I){return A===I||A!==A&&I!==I}function SI(A){return A!=null&&FI(A.length)&&!UI(A)}function UI(A){var I=k(A)?cA.call(A):"";return I==nI||I==gI}function FI(A){return typeof A=="number"&&A>-1&&A%1==0&&A<=wA}function k(A){var I=typeof A;return!!A&&(I=="object"||I=="function")}function KI(A){return!!A&&typeof A=="object"}function lI(A){return typeof A=="symbol"||KI(A)&&cA.call(A)==CI}function xI(A){if(!A)return A===0?A:0;if(A=YI(A),A===z||A===-z){var I=A<0?-1:1;return I*eI}return A===A?A:0}function HI(A){var I=xI(A),i=I%1;return I===I?i?I-i:I:0}function YI(A){if(typeof A=="number")return A;if(lI(A))return AA;if(k(A)){var I=typeof A.valueOf=="function"?A.valueOf():A;A=k(I)?I+"":I}if(typeof A!="string")return A===0?A:+A;A=A.replace(rI,"");var i=oI.test(A);return i||EI.test(A)?fI(A.slice(2),i?2:8):hI.test(A)?AA:+A}var pI=aI;const mI=A=>A,Ii=(A,I)=>{try{return AI(pI(A.toJSON().data,I).map(i=>W.Buffer.from(i)))}catch(i){return II(mI(i))}};var u={exports:{}},DA=uA;class aA extends Error{}aA.prototype.name="AssertionError";function uA(A,I){if(!A){var i=new aA(I);throw Error.captureStackTrace&&Error.captureStackTrace(i,uA),i}}var K={exports:{}},R={exports:{}};function SA(A){return A.length}function LI(A){const I=A.byteLength;let i="";for(let g=0;g<I;g++)i+=String.fromCharCode(A[g]);return i}function VI(A,I,i=0,g=SA(I)){const r=Math.min(g,A.byteLength-i);for(let h=0;h<r;h++)A[i+h]=I.charCodeAt(h);return r}var MI={byteLength:SA,toString:LI,write:VI};const L="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",m=new Uint8Array(256);for(let A=0;A<L.length;A++)m[L.charCodeAt(A)]=A;m[45]=62;m[95]=63;function UA(A){let I=A.length;return A.charCodeAt(I-1)===61&&I--,I>1&&A.charCodeAt(I-1)===61&&I--,I*3>>>2}function GI(A){const I=A.byteLength;let i="";for(let g=0;g<I;g+=3)i+=L[A[g]>>2]+L[(A[g]&3)<<4|A[g+1]>>4]+L[(A[g+1]&15)<<2|A[g+2]>>6]+L[A[g+2]&63];return I%3===2?i=i.substring(0,i.length-1)+"=":I%3===1&&(i=i.substring(0,i.length-2)+"=="),i}function bI(A,I,i=0,g=UA(I)){const r=Math.min(g,A.byteLength-i);for(let h=0,o=0;o<r;h+=4){const f=m[I.charCodeAt(h)],y=m[I.charCodeAt(h+1)],w=m[I.charCodeAt(h+2)],s=m[I.charCodeAt(h+3)];A[o++]=f<<2|y>>4,A[o++]=(y&15)<<4|w>>2,A[o++]=(w&3)<<6|s&63}return r}var dI={byteLength:UA,toString:GI,write:bI};function FA(A){return A.length>>>1}function PI(A){const I=A.byteLength;A=new DataView(A.buffer,A.byteOffset,I);let i="",g=0;for(let r=I-I%4;g<r;g+=4)i+=A.getUint32(g).toString(16).padStart(8,"0");for(;g<I;g++)i+=A.getUint8(g).toString(16).padStart(2,"0");return i}function NI(A,I,i=0,g=FA(I)){const r=Math.min(g,A.byteLength-i);for(let h=0;h<r;h++){const o=IA(I.charCodeAt(h*2)),f=IA(I.charCodeAt(h*2+1));if(o===void 0||f===void 0)return A.subarray(0,h);A[i+h]=o<<4|f}return r}var OI={byteLength:FA,toString:PI,write:NI};function IA(A){if(A>=48&&A<=57)return A-48;if(A>=65&&A<=70)return A-65+10;if(A>=97&&A<=102)return A-97+10}function j(A){let I=0;for(let i=0,g=A.length;i<g;i++){const r=A.charCodeAt(i);if(r>=55296&&r<=56319&&i+1<g){const h=A.charCodeAt(i+1);if(h>=56320&&h<=57343){I+=4,i++;continue}}r<=127?I+=1:r<=2047?I+=2:I+=3}return I}let v;if(typeof TextDecoder<"u"){const A=new TextDecoder;v=function(i){return A.decode(i)}}else v=function(I){const i=I.byteLength;let g="",r=0;for(;r<i;){let h=I[r];if(h<=127){g+=String.fromCharCode(h),r++;continue}let o=0,f=0;if(h<=223?(o=1,f=h&31):h<=239?(o=2,f=h&15):h<=244&&(o=3,f=h&7),i-r-o>0){let y=0;for(;y<o;)h=I[r+y+1],f=f<<6|h&63,y+=1}else f=65533,o=i-r;g+=String.fromCodePoint(f),r+=o+1}return g};let q;if(typeof TextEncoder<"u"){const A=new TextEncoder;q=function(i,g,r=0,h=j(g)){const o=Math.min(h,i.byteLength-r);return A.encodeInto(g,i.subarray(r,r+o)),o}}else q=function(I,i,g=0,r=j(i)){const h=Math.min(r,I.byteLength-g);I=I.subarray(g,g+h);let o=0,f=0;for(;o<i.length;){const y=i.codePointAt(o);if(y<=127){I[f++]=y,o++;continue}let w=0,s=0;for(y<=2047?(w=6,s=192):y<=65535?(w=12,s=224):y<=2097151&&(w=18,s=240),I[f++]=s|y>>w,w-=6;w>=0;)I[f++]=128|y>>w&63,w-=6;o+=y>=65536?2:1}return h};var kI={byteLength:j,toString:v,write:q};function KA(A){return A.length*2}function JI(A){const I=A.byteLength;let i="";for(let g=0;g<I-1;g+=2)i+=String.fromCharCode(A[g]+A[g+1]*256);return i}function TI(A,I,i=0,g=KA(I)){const r=Math.min(g,A.byteLength-i);let h=r;for(let o=0;o<I.length&&!((h-=2)<0);++o){const f=I.charCodeAt(o),y=f>>8,w=f%256;A[i+o*2]=w,A[i+o*2+1]=y}return r}var _I={byteLength:KA,toString:JI,write:TI};(function(A,I){const i=MI,g=dI,r=OI,h=kI,o=_I,f=new Uint8Array(Uint16Array.of(255).buffer)[0]===255;function y(t){switch(t){case"ascii":return i;case"base64":return g;case"hex":return r;case"utf8":case"utf-8":case void 0:return h;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return o;default:throw new Error(`Unknown encoding: ${t}`)}}function w(t){return t instanceof Uint8Array}function s(t){try{return y(t),!0}catch{return!1}}function D(t,e,n){const C=new Uint8Array(t);return e!==void 0&&I.fill(C,e,0,C.byteLength,n),C}function J(t){return new Uint8Array(t)}function b(t){return new Uint8Array(t)}function d(t,e){return y(e).byteLength(t)}function T(t,e){if(t===e)return 0;const n=Math.min(t.byteLength,e.byteLength);t=new DataView(t.buffer,t.byteOffset,t.byteLength),e=new DataView(e.buffer,e.byteOffset,e.byteLength);let C=0;for(let E=n-n%4;C<E;C+=4){const B=t.getUint32(C,f),c=e.getUint32(C,f);if(B!==c)break}for(;C<n;C++){const E=t.getUint8(C),B=e.getUint8(C);if(E<B)return-1;if(E>B)return 1}return t.byteLength>e.byteLength?1:t.byteLength<e.byteLength?-1:0}function pA(t,e){e===void 0&&(e=t.reduce((E,B)=>E+B.byteLength,0));const n=new Uint8Array(e);let C=0;for(const E of t){if(C+E.byteLength>n.byteLength){const B=E.subarray(0,n.byteLength-C);return n.set(B,C),n}n.set(E,C),C+=E.byteLength}return n}function mA(t,e,n=0,C=0,E=t.byteLength){if(E>0&&E<C||E===C||t.byteLength===0||e.byteLength===0)return 0;if(n<0)throw new RangeError("targetStart is out of range");if(C<0||C>=t.byteLength)throw new RangeError("sourceStart is out of range");if(E<0)throw new RangeError("sourceEnd is out of range");n>=e.byteLength&&(n=e.byteLength),E>t.byteLength&&(E=t.byteLength),e.byteLength-n<E-C&&(E=e.length-n+C);const B=E-C;return t===e?e.copyWithin(n,C,E):e.set(t.subarray(C,E),n),B}function LA(t,e){if(t===e)return!0;if(t.byteLength!==e.byteLength)return!1;const n=t.byteLength;t=new DataView(t.buffer,t.byteOffset,t.byteLength),e=new DataView(e.buffer,e.byteOffset,e.byteLength);let C=0;for(let E=n-n%4;C<E;C+=4)if(t.getUint32(C,f)!==e.getUint32(C,f))return!1;for(;C<n;C++)if(t.getUint8(C)!==e.getUint8(C))return!1;return!0}function VA(t,e,n,C,E){if(typeof e=="string"?typeof n=="string"?(E=n,n=0,C=t.byteLength):typeof C=="string"&&(E=C,C=t.byteLength):typeof e=="number"?e=e&255:typeof e=="boolean"&&(e=+e),n<0||t.byteLength<n||t.byteLength<C)throw new RangeError("Out of range index");if(n===void 0&&(n=0),C===void 0&&(C=t.byteLength),C<=n)return t;if(e||(e=0),typeof e=="number")for(let B=n;B<C;++B)t[B]=e;else{e=w(e)?e:_(e,E);const B=e.byteLength;for(let c=0;c<C-n;++c)t[c+n]=e[c%B]}return t}function _(t,e,n){return typeof t=="string"?MA(t,e):Array.isArray(t)?GA(t):ArrayBuffer.isView(t)?bA(t):dA(t,e,n)}function MA(t,e){const n=y(e),C=new Uint8Array(n.byteLength(t));return n.write(C,t,0,C.byteLength),C}function GA(t){const e=new Uint8Array(t.length);return e.set(t),e}function bA(t){const e=new Uint8Array(t.byteLength);return e.set(t),e}function dA(t,e,n){return new Uint8Array(t,e,n)}function PA(t,e,n,C){return Z(t,e,n,C)!==-1}function $(t,e,n,C,E){if(t.byteLength===0)return-1;if(typeof n=="string"?(C=n,n=0):n===void 0?n=E?0:t.length-1:n<0&&(n+=t.byteLength),n>=t.byteLength){if(E)return-1;n=t.byteLength-1}else if(n<0)if(E)n=0;else return-1;if(typeof e=="string")e=_(e,C);else if(typeof e=="number")return e=e&255,E?t.indexOf(e,n):t.lastIndexOf(e,n);if(e.byteLength===0)return-1;if(E){let B=-1;for(let c=n;c<t.byteLength;c++)if(t[c]===e[B===-1?0:c-B]){if(B===-1&&(B=c),c-B+1===e.byteLength)return B}else B!==-1&&(c-=c-B),B=-1}else{n+e.byteLength>t.byteLength&&(n=t.byteLength-e.byteLength);for(let B=n;B>=0;B--){let c=!0;for(let P=0;P<e.byteLength;P++)if(t[B+P]!==e[P]){c=!1;break}if(c)return B}}return-1}function Z(t,e,n,C){return $(t,e,n,C,!0)}function NA(t,e,n,C){return $(t,e,n,C,!1)}function p(t,e,n){const C=t[e];t[e]=t[n],t[n]=C}function OA(t){const e=t.byteLength;if(e%2!==0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let n=0;n<e;n+=2)p(t,n,n+1);return t}function kA(t){const e=t.byteLength;if(e%4!==0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let n=0;n<e;n+=4)p(t,n,n+3),p(t,n+1,n+2);return t}function JA(t){const e=t.byteLength;if(e%8!==0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let n=0;n<e;n+=8)p(t,n,n+7),p(t,n+1,n+6),p(t,n+2,n+5),p(t,n+3,n+4);return t}function TA(t){return t}function _A(t,e,n=0,C=t.byteLength){const E=t.byteLength;return n>=E||C<=n?"":(n<0&&(n=0),C>E&&(C=E),(n!==0||C<E)&&(t=t.subarray(n,C)),y(e).toString(t))}function XA(t,e,n,C,E){return n===void 0?E="utf8":C===void 0&&typeof n=="string"?(E=n,n=void 0):E===void 0&&typeof C=="string"&&(E=C,C=void 0),y(E).write(t,e,n,C)}function RA(t,e,n){return n===void 0&&(n=0),new DataView(t.buffer,t.byteOffset,t.byteLength).setFloat64(n,e,!0),n+8}function jA(t,e,n){return n===void 0&&(n=0),new DataView(t.buffer,t.byteOffset,t.byteLength).setFloat32(n,e,!0),n+4}function vA(t,e,n){return n===void 0&&(n=0),new DataView(t.buffer,t.byteOffset,t.byteLength).setUint32(n,e,!0),n+4}function qA(t,e,n){return n===void 0&&(n=0),new DataView(t.buffer,t.byteOffset,t.byteLength).setInt32(n,e,!0),n+4}function WA(t,e){return e===void 0&&(e=0),new DataView(t.buffer,t.byteOffset,t.byteLength).getFloat64(e,!0)}function $A(t,e){return e===void 0&&(e=0),new DataView(t.buffer,t.byteOffset,t.byteLength).getFloat32(e,!0)}function ZA(t,e){return e===void 0&&(e=0),new DataView(t.buffer,t.byteOffset,t.byteLength).getUint32(e,!0)}function zA(t,e){return e===void 0&&(e=0),new DataView(t.buffer,t.byteOffset,t.byteLength).getInt32(e,!0)}A.exports=I={isBuffer:w,isEncoding:s,alloc:D,allocUnsafe:J,allocUnsafeSlow:b,byteLength:d,compare:T,concat:pA,copy:mA,equals:LA,fill:VA,from:_,includes:PA,indexOf:Z,lastIndexOf:NA,swap16:OA,swap32:kA,swap64:JA,toBuffer:TA,toString:_A,write:XA,writeDoubleLE:RA,writeFloatLE:jA,writeUInt32LE:vA,writeInt32LE:qA,readDoubleLE:WA,readFloatLE:$A,readUInt32LE:ZA,readInt32LE:zA}})(R,R.exports);var X,iA;function XI(){if(iA)return X;iA=1;var A=(h,o)=>function(){return o||(0,h[Object.keys(h)[0]])((o={exports:{}}).exports,o),o.exports},I=(()=>{for(var h=new Uint8Array(128),o=0;o<64;o++)h[o<26?o+65:o<52?o+71:o<62?o-4:o*4-205]=o;return f=>{for(var y=f.length,w=new Uint8Array((y-(f[y-1]=="=")-(f[y-2]=="="))*3/4|0),s=0,D=0;s<y;){var J=h[f.charCodeAt(s++)],b=h[f.charCodeAt(s++)],d=h[f.charCodeAt(s++)],T=h[f.charCodeAt(s++)];w[D++]=J<<2|b>>4,w[D++]=b<<4|d>>2,w[D++]=d<<6|T}return w}})(),i=A({"wasm-binary:./blake2b.wat"(h,o){o.exports=I("")}}),g=i(),r=WebAssembly.compile(g);return X=async h=>(await WebAssembly.instantiate(await r,h)).exports,X}var U=DA,RI=R.exports,x=null,tA=typeof WebAssembly<"u"&&XI()().then(A=>{x=A}),l=64,O=[];K.exports=S;var eA=K.exports.BYTES_MIN=16,nA=K.exports.BYTES_MAX=64;K.exports.BYTES=32;var gA=K.exports.KEYBYTES_MIN=16,CA=K.exports.KEYBYTES_MAX=64;K.exports.KEYBYTES=32;var rA=K.exports.SALTBYTES=16,hA=K.exports.PERSONALBYTES=16;function S(A,I,i,g,r){if(!(this instanceof S))return new S(A,I,i,g,r);if(!x)throw new Error("WASM not loaded. Wait for Blake2b.ready(cb)");A||(A=32),r!==!0&&(U(A>=eA,"digestLength must be at least "+eA+", was given "+A),U(A<=nA,"digestLength must be at most "+nA+", was given "+A),I!=null&&(U(I instanceof Uint8Array,"key must be Uint8Array or Buffer"),U(I.length>=gA,"key must be at least "+gA+", was given "+I.length),U(I.length<=CA,"key must be at least "+CA+", was given "+I.length)),i!=null&&(U(i instanceof Uint8Array,"salt must be Uint8Array or Buffer"),U(i.length===rA,"salt must be exactly "+rA+", was given "+i.length)),g!=null&&(U(g instanceof Uint8Array,"personal must be Uint8Array or Buffer"),U(g.length===hA,"personal must be exactly "+hA+", was given "+g.length))),O.length||(O.push(l),l+=216),this.digestLength=A,this.finalized=!1,this.pointer=O.pop(),this._memory=new Uint8Array(x.memory.buffer),this._memory.fill(0,0,64),this._memory[0]=this.digestLength,this._memory[1]=I?I.length:0,this._memory[2]=1,this._memory[3]=1,i&&this._memory.set(i,32),g&&this._memory.set(g,48),this.pointer+216>this._memory.length&&this._realloc(this.pointer+216),x.blake2b_init(this.pointer,this.digestLength),I&&(this.update(I),this._memory.fill(0,l,l+I.length),this._memory[this.pointer+200]=128)}S.prototype._realloc=function(A){x.memory.grow(Math.max(0,Math.ceil(Math.abs(A-this._memory.length)/65536))),this._memory=new Uint8Array(x.memory.buffer)};S.prototype.update=function(A){return U(this.finalized===!1,"Hash instance finalized"),U(A instanceof Uint8Array,"input must be Uint8Array or Buffer"),l+A.length>this._memory.length&&this._realloc(l+A.length),this._memory.set(A,l),x.blake2b_update(this.pointer,l,l+A.length),this};S.prototype.digest=function(A){if(U(this.finalized===!1,"Hash instance finalized"),this.finalized=!0,O.push(this.pointer),x.blake2b_final(this.pointer),!A||A==="binary")return this._memory.slice(this.pointer+128,this.pointer+128+this.digestLength);if(typeof A=="string")return RI.toString(this._memory,A,this.pointer+128,this.pointer+128+this.digestLength);U(A instanceof Uint8Array&&A.length>=this.digestLength,"input must be Uint8Array or Buffer");for(var I=0;I<this.digestLength;I++)A[I]=this._memory[this.pointer+128+I];return A};S.prototype.final=S.prototype.digest;S.WASM=x;S.SUPPORTED=typeof WebAssembly<"u";S.ready=function(A){return A||(A=jI),tA?tA.then(()=>A(),A):A(new Error("WebAssembly not supported"))};S.prototype.ready=S.ready;S.prototype.getPartialHash=function(){return this._memory.slice(this.pointer,this.pointer+216)};S.prototype.setPartialHash=function(A){this._memory.set(A,this.pointer)};function jI(){}var F=DA,G=K.exports;function N(A,I,i){var g=A[I]+A[i],r=A[I+1]+A[i+1];g>=4294967296&&r++,A[I]=g,A[I+1]=r}function oA(A,I,i,g){var r=A[I]+i;i<0&&(r+=4294967296);var h=A[I+1]+g;r>=4294967296&&h++,A[I]=r,A[I+1]=h}function lA(A,I){return A[I]^A[I+1]<<8^A[I+2]<<16^A[I+3]<<24}function H(A,I,i,g,r,h){var o=M[r],f=M[r+1],y=M[h],w=M[h+1];N(Q,A,I),oA(Q,A,o,f);var s=Q[g]^Q[A],D=Q[g+1]^Q[A+1];Q[g]=D,Q[g+1]=s,N(Q,i,g),s=Q[I]^Q[i],D=Q[I+1]^Q[i+1],Q[I]=s>>>24^D<<8,Q[I+1]=D>>>24^s<<8,N(Q,A,I),oA(Q,A,y,w),s=Q[g]^Q[A],D=Q[g+1]^Q[A+1],Q[g]=s>>>16^D<<16,Q[g+1]=D>>>16^s<<16,N(Q,i,g),s=Q[I]^Q[i],D=Q[I+1]^Q[i+1],Q[I]=D>>>31^s<<1,Q[I+1]=s>>>31^D<<1}var xA=new Uint32Array([4089235720,1779033703,2227873595,3144134277,4271175723,1013904242,1595750129,2773480762,2917565137,1359893119,725511199,2600822924,4215389547,528734635,327033209,1541459225]),vI=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,14,10,4,8,9,15,13,6,1,12,0,2,11,7,5,3,11,8,12,0,5,2,15,13,10,14,3,6,7,1,9,4,7,9,3,1,13,12,11,14,2,6,5,10,4,0,15,8,9,0,5,7,2,4,10,15,14,1,11,12,6,8,3,13,2,12,6,10,0,11,8,3,4,13,7,5,15,14,1,9,12,5,1,15,14,13,4,10,0,7,6,3,9,2,8,11,13,11,7,14,12,1,3,9,5,0,15,4,8,6,2,10,6,15,14,9,11,3,0,8,12,2,13,7,1,4,10,5,10,2,8,4,7,6,1,5,15,11,9,14,3,12,13,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,14,10,4,8,9,15,13,6,1,12,0,2,11,7,5,3],a=new Uint8Array(vI.map(function(A){return A*2})),Q=new Uint32Array(32),M=new Uint32Array(32);function HA(A,I){var i=0;for(i=0;i<16;i++)Q[i]=A.h[i],Q[i+16]=xA[i];for(Q[24]=Q[24]^A.t,Q[25]=Q[25]^A.t/4294967296,I&&(Q[28]=~Q[28],Q[29]=~Q[29]),i=0;i<32;i++)M[i]=lA(A.b,4*i);for(i=0;i<12;i++)H(0,8,16,24,a[i*16+0],a[i*16+1]),H(2,10,18,26,a[i*16+2],a[i*16+3]),H(4,12,20,28,a[i*16+4],a[i*16+5]),H(6,14,22,30,a[i*16+6],a[i*16+7]),H(0,10,20,30,a[i*16+8],a[i*16+9]),H(2,12,22,24,a[i*16+10],a[i*16+11]),H(4,14,16,26,a[i*16+12],a[i*16+13]),H(6,8,18,28,a[i*16+14],a[i*16+15]);for(i=0;i<16;i++)A.h[i]=A.h[i]^Q[i]^Q[i+16]}var Y=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);function V(A,I,i,g){Y.fill(0),this.b=new Uint8Array(128),this.h=new Uint32Array(16),this.t=0,this.c=0,this.outlen=A,Y[0]=A,I&&(Y[1]=I.length),Y[2]=1,Y[3]=1,i&&Y.set(i,32),g&&Y.set(g,48);for(var r=0;r<16;r++)this.h[r]=xA[r]^lA(Y,r*4);I&&(YA(this,I),this.c=128)}V.prototype.update=function(A){return F(A instanceof Uint8Array,"input must be Uint8Array or Buffer"),YA(this,A),this};V.prototype.digest=function(A){var I=!A||A==="binary"||A==="hex"?new Uint8Array(this.outlen):A;return F(I instanceof Uint8Array,'out must be "binary", "hex", Uint8Array, or Buffer'),F(I.length>=this.outlen,"out must have at least outlen bytes of space"),qI(this,I),A==="hex"?WI(I):I};V.prototype.final=V.prototype.digest;V.ready=function(A){G.ready(function(){A()})};function YA(A,I){for(var i=0;i<I.length;i++)A.c===128&&(A.t+=A.c,HA(A,!1),A.c=0),A.b[A.c++]=I[i]}function qI(A,I){for(A.t+=A.c;A.c<128;)A.b[A.c++]=0;HA(A,!0);for(var i=0;i<A.outlen;i++)I[i]=A.h[i>>2]>>8*(i&3);return I}function WI(A){for(var I="",i=0;i<A.length;i++)I+=$I(A[i]);return I}function $I(A){return A<16?"0"+A.toString(16):A.toString(16)}var ZI=V;u.exports=function(I,i,g,r,h){return h!==!0&&(F(I>=EA,"outlen must be at least "+EA+", was given "+I),F(I<=QA,"outlen must be at most "+QA+", was given "+I),i!=null&&(F(i instanceof Uint8Array,"key must be Uint8Array or Buffer"),F(i.length>=fA,"key must be at least "+fA+", was given "+i.length),F(i.length<=BA,"key must be at most "+BA+", was given "+i.length)),g!=null&&(F(g instanceof Uint8Array,"salt must be Uint8Array or Buffer"),F(g.length===yA,"salt must be exactly "+yA+", was given "+g.length)),r!=null&&(F(r instanceof Uint8Array,"personal must be Uint8Array or Buffer"),F(r.length===sA,"personal must be exactly "+sA+", was given "+r.length))),new ZI(I,i,g,r)};u.exports.ready=function(A){G.ready(function(){A()})};u.exports.WASM_SUPPORTED=G.SUPPORTED;u.exports.WASM_LOADED=!1;var EA=u.exports.BYTES_MIN=16,QA=u.exports.BYTES_MAX=64;u.exports.BYTES=32;var fA=u.exports.KEYBYTES_MIN=16,BA=u.exports.KEYBYTES_MAX=64;u.exports.KEYBYTES=32;var yA=u.exports.SALTBYTES=16,sA=u.exports.PERSONALBYTES=16;G.ready(function(A){A||(u.exports.WASM_LOADED=!0,u.exports=G)});const ii=A=>{const I=new Uint8Array(32);try{return iI(u.exports(I.length).update(new Uint8Array(A)).digest("hex")).map(i=>W.Buffer.from(i,"hex"))}catch(i){return tI(i)}},ti=A=>u.exports(32).update(new Uint8Array(W.Buffer.from(A,"hex"))).digest("hex");export{ti as a,Ii as b,ii as c,mI as e};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
