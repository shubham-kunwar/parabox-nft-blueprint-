import{a as f,e as T,R as j}from"./index.es.095da3c8.js";import{a as C,c,w as y}from"./Subject.c67f7ae3.js";import{R as k,f as M,a as w,b as x,m as R,d as l}from"./first.9e6ac58d.js";import{s as E}from"./send-message.6e0479e0.js";const F=()=>({messageSubject:new k(1)}),D=(m,d,g)=>{const r=g.subjects||F(),i=g.sendMessage||E,u=new C,t=(s,e)=>{const n=s.source!=="background"&&e?c.sendMessageToTab(s.source,e,s):s,h=r.messageSubject.pipe(M(o=>o.message.discriminator==="confirmation"&&n.messageId===o.message.messageId),x(),R(o=>o.message.success?f(o.message.data):T(o.message.error))),S=j.fromSafePromise(l(h)).andThen(o=>o);return i(n,e).andThen(()=>S)},b=({origin:s,messageId:e,tabId:a,data:n})=>i(c.confirmationSuccess(s,e,n),a),p=({origin:s,messageId:e,error:a,tabId:n})=>i(c.confirmationError(s,e,a),n);return u.add(r.messageSubject.pipe(M(({message:s})=>s.discriminator!=="confirmation"),w(({message:s,tabId:e})=>m(s,t,e).andThen(a=>a.sendConfirmation?b({origin:d,messageId:s.messageId,tabId:e,data:a.data}):f(void 0)).mapErr(a=>{a.reason!=="unhandledMessageDiscriminator"&&p({origin:d,messageId:s.messageId,error:a,tabId:s.discriminator===y.sendMessageToTab?void 0:e})}))).subscribe()),{onMessage:(s,e)=>r.messageSubject.next({message:s,tabId:e}),handleMessage:(s,e)=>m(s,t,e),sendMessageAndWaitForConfirmation:t,destroy:()=>{u.unsubscribe()}}};export{D as M};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
